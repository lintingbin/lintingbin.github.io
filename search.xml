<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用k8s部署Django项目</title>
      <link href="/2019/01/13/%E4%BD%BF%E7%94%A8k8s%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/01/13/%E4%BD%BF%E7%94%A8k8s%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接触了一下docker和k8s，感觉是非常不错的东西。能够方便的部署线上环境，而且还能够更好的利用机器的资源，感觉是以后的大趋势。最近刚好有一个基于django的项目，所以就把这个项目打包到docker里面，放到k8是里面运行，顺便学习下k8s和docker的使用。</p></blockquote><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><h5 id="为什么使用docker？"><a href="#为什么使用docker？" class="headerlink" title="为什么使用docker？"></a>为什么使用docker？</h5><p>我觉得docker最大的好处是部署的时候比较方便，一个预先打包好的docker镜像，可以在任何安装有docker的机器上面直接运行，不用再安装其他任何的依赖环境。不管是在开发、测试、还是发布阶段，都能节省很多安装依赖和配置文件的时间，真正做到了Build once, Run anywhere。</p><h5 id="docker在我的项目中怎么使用？"><a href="#docker在我的项目中怎么使用？" class="headerlink" title="docker在我的项目中怎么使用？"></a>docker在我的项目中怎么使用？</h5><p>在我的项目中，我主要使用dockerfile来生成项目的镜像。我们都知道docker是按照层的思想来构建一个镜像的，我的镜像的最底层的操作系统使用的是centos7，再接着安装python相关的工具和库，然后安装项目所需求的库，最后再把项目拷到镜像中。<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL=en_US.utf-<span class="number">8</span> LANG=en_US.utf-<span class="number">8</span></span><br><span class="line"><span class="keyword">RUN</span> yum install -y https://centos7.iuscommunity.org/ius-release.rpm &amp;&amp; \</span><br><span class="line">    yum install -y python36u python36u-libs python36u-devel python36u-pip mysql-devel gcc which &amp;&amp; \</span><br><span class="line">    pip3.6 install pipenv</span><br><span class="line"></span><br><span class="line">COPY Pipfile Pipfile.lock /my_app/</span><br><span class="line">WORKDIR /my_app</span><br><span class="line">RUN pipenv sync</span><br><span class="line"></span><br><span class="line">COPY my_app_site /my_app/my_app_site</span><br><span class="line">COPY gunicorn_config.py /my_app/gunicorn_config.py</span><br><span class="line">COPY resource/nginx.conf /my_app/resource/nginx.conf</span><br><span class="line"></span><br><span class="line">RUN mkdir /static/ &amp;&amp; \</span><br><span class="line">    cd my_app_site &amp;&amp; \</span><br><span class="line">    pipenv run python manage.py collectstatic &amp;&amp; \</span><br><span class="line">    cd my_app_site &amp;&amp; \</span><br><span class="line">    rm -f local_settings.py</span><br><span class="line"></span><br><span class="line">WORKDIR /my_app</span><br><span class="line"></span><br><span class="line">EXPOSE 8000</span><br><span class="line">CMD pipenv run gunicorn my_app_site.wsgi -c gunicorn_config.py --log-file logs/gunicorn.log</span><br></pre></td></tr></table></figure></p><p>在dockerfile中，每个RUN命令都会构建新的层，我这边之所以在dockerfile中使用三个RUN命令，是为了能够尽量的减少重复的构建过程。每次在构建镜像的时候docker都会判断每层的内容是否有修改，如果没有修改的话，就不需要重复的构建。所以在应用开发的过程中，上面的dockerfile最多也就重新构建最后一层和倒数第二层（在项目有新包加入的时候才重新构建倒数第二层，不然正常情况下就只会重新构建最后一层）。</p><h4 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h4><h5 id="为什么使用k8s？"><a href="#为什么使用k8s？" class="headerlink" title="为什么使用k8s？"></a>为什么使用k8s？</h5><p>k8s的功能非常强大。不过简单的来说，k8s是用来管理容器的一个工具。有了k8s以后我们就能让k8s自动的去拉取docker镜像，并且根据需要来启动、关闭、调度docker容器，实现一些牛逼的自动化运维操作。</p><h5 id="k8s在我的项目中怎么使用？"><a href="#k8s在我的项目中怎么使用？" class="headerlink" title="k8s在我的项目中怎么使用？"></a>k8s在我的项目中怎么使用？</h5><p>我使用了yaml文件定义了一个k8s部署，下面是具体的文件示例：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------- MyApp Deployment ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">static-dir</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">my_app-web</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">my_app:latest</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/nginx/conf.d/</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">static-dir</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html/my_app/static</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["-c",</span> <span class="string">"cp resource/nginx.conf /etc/nginx/conf.d/ &amp;&amp; \</span></span><br><span class="line"><span class="string">              cp /static/* /usr/share/nginx/html/my_app/static -rf &amp;&amp; \</span></span><br><span class="line"><span class="string">              pipenv run gunicorn my_app.wsgi -c gunicorn_config.py"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">my_app-nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.15.8</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">8899</span></span><br><span class="line"><span class="attr">            protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/etc/nginx/conf.d/</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">static-dir</span></span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/usr/share/nginx/html/my_app/static</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8899</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------- MyApp Service ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8899</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8899</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">my_app</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure></p><p>django项目在部署的时候需要用到nginx服务器，所以在部署的时候我在同一个pod里面也加入了一个nginx镜像，不过为了少打包一个新的nginx镜像（带有nginx配置文件和静态文件的nginx镜像），我在两个容器之间使用volumes来共享django静态文件和nginx配置文件。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是我使用docker和k8s来部署django项目的一个示例，文章里面没有包含一些具体的docker和k8s的介绍，是因为这些内容比较多，在这篇小文章里面放不下，感兴趣的同学可以去他们官网详细了解。最后我只想说，docker和k8s真是好东西，没有用过的同学赶紧去试试吧！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Impala性能优化</title>
      <link href="/2018/11/24/Impala%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/11/24/Impala%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近做了一些离线的etl，因为用到了kudu，所以大部分的etl都是在impala下面执行的。下面的性能优化是我在使用impala的时候总结的一些经验。</p></blockquote><h4 id="COMPUTE-STATS"><a href="#COMPUTE-STATS" class="headerlink" title="COMPUTE STATS"></a>COMPUTE STATS</h4><p>impala在做join的时候会根据表格的实际情况采用更优化的join方案，但是如果impala不知道表的统计信息（比如表格的大小）的话就不能定制优化的join方案，而<code>compute stats</code>命令就是用来让impala产生表的统计信息的命令。正常的情况下把所有要执行的表都执行下<code>compute stats</code>就能有最好的性能，但是有时候impala的优化也不一定是最好的，所以我们必须懂得自己分析执行的过程。</p><h4 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h4><p>在执行sql语句之前可以使用<code>explain</code>命令来查看impala计划执行该sql的流程和预估消耗的资源。要优化sql语句的话最方便的就是改完sql语句后直接执行<code>explain</code>命令，因为该命令不用执行sql语句，可以很方便的调优sql语句，而不用任何的等待。在hue的执行窗口有<code>explain</code>的命令可以直接按，非常的方便。</p><h4 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h4><p><code>explain</code>命令虽然在大多数的情况下是能够预估sql语句的执行情况，但是毕竟没有执行sql语句，所以预估的情况可能和实际情况会有一些出入。所以这时候我们可以使用<code>summary</code>，在一条语句执行完以后立马执行<code>summary</code>命令就能看到这条sql语句执行时所消耗的时间和资源的情况，还有impala预估的资源使用，有时候预估和实际情况还是有很多不同的。如下图所示的summary的预估内存和实际使用的内存就要较大的出入。当然如果想要看到更详细的执行信息还可以用Profiles命令，但是由于我在优化的过程中没有使用到，这边就不多说了。<img src="/images/impala_summary_1.jpg" alt="impala summary 示例"></p><h4 id="SQL语句提示信息"><a href="#SQL语句提示信息" class="headerlink" title="SQL语句提示信息"></a>SQL语句提示信息</h4><p>通过上面的<code>explain</code>和<code>summary</code>后我们就能清楚的知道我们的sql语句的性能瓶颈在哪里，但是有时候即使执行了<code>compute stats</code>命令，impala还是不能优化这些性能瓶颈的问题，也就是说，impala的优化不能保证是最优的。所以我们就要告诉impala按照我们自己的想法来执行sql语句。比如：使用<code>STRAIGHT_JOIN</code>命令就可以告诉impala按照我写的sql语句的join顺序来执行join过程，而不进行重排（因为有时候重排的效果更差）。在join后使用<code>-- +SHUFFLE</code>注释就可以告诉impala使用SHUFFLE的方式进行join，而不是BROADCAST的方式进行join。我之前优化的一个sql语句因为加了<code>-- +SHUFFLE</code>注释而减少了好几G的内存使用量。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这篇文章只是粗略的介绍下可以优化的点，具体的优化过程还是得结合自己的sql语句来定制自己的优化方案，如果想了解更多的优化技巧请移步impala官网的文档。</p>]]></content>
      
      
      <categories>
          
          <category> 离线处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Impala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为集群搭建DNS服务的过程记录</title>
      <link href="/2018/11/01/%E4%B8%BA%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BADNS%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/11/01/%E4%B8%BA%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BADNS%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前集群维护hostname和ip之间的映射关系使用的是/etc/hosts文件，但是由于每次新加机器的时候都要更新每台机器的/etc/hosts文件，比较繁琐而且容易出错，所以就考虑为集群增加dns服务。</p></blockquote><h4 id="搭建dns服务器"><a href="#搭建dns服务器" class="headerlink" title="搭建dns服务器"></a>搭建dns服务器</h4><p>我们这边的dns服务器是运维直接帮我搭的，使用的是dnsmasq。相比于bind，dnsmasq的主要优势是轻量级、配置简单，然后我们机器的hostname和ip的映射文件放于这台机器的<code>/etc/hosts</code>文件下面，每次增加新机器的时候只要修改<code>/etc/hosts</code>文件，然后重启dnsmasq就可以了。</p><h4 id="集群机器的配置"><a href="#集群机器的配置" class="headerlink" title="集群机器的配置"></a>集群机器的配置</h4><p>集群的机器配置主要是修改dns服务器的地址，把<code>/etc/resolv.conf</code>文件的内容修改为：<code>nameserver 192.168.1.1（你自己的dns服务器地址）</code>。<br>在这步，我遇到了一个问题：用dig和nslookup可以找到一个hostname对应的ip，但是使用ping或者telnet的时候就会返回<code>Name or service not known</code>。我在网上查了很多的资料，有人遇到类似的问题，但是他们的问题是因为<code>/etc/nsswitch.conf</code>的host配置没配好，而我这边并没有该配置问题。最后我在一个帖子回答中找到了解决方法，原来是我启用了nscd服务，这样的话，修改dns服务器就需要把该服务重启下，重启完后问题就解决了。</p><h4 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h4><p>虽然经过上述的步骤后，集群的机器就可以使用dns服务了，但是还需要一些优化，才能让dns服务有更好的性能。</p><h5 id="启用nscd服务"><a href="#启用nscd服务" class="headerlink" title="启用nscd服务"></a>启用nscd服务</h5><p>在centos7中默认是没有开启nscd服务的，这样的话，每次查询一个域名都需要向dns服务器发起一次请求，如果请求非常多的话就会给dns服务器带来压力，所以我们需要启用nscd服务。如果机器没有安装该服务的话，可以使用命令<code>yum install nscd</code>进行安装，然后使用命令<code>systemctl start nscd</code>启动该服务，使用命令<code>systemctl enable nscd</code>把该服务设置成开机启动。</p><h4 id="配置dnsmasq的local-ttl参数"><a href="#配置dnsmasq的local-ttl参数" class="headerlink" title="配置dnsmasq的local-ttl参数"></a>配置dnsmasq的local-ttl参数</h4><p>集群的机器启动了nscd服务以后，按道理对dns服务器的请求会大大的减少，但是我在dns服务器上使用<code>tcpdump udp port 53</code>查看集群机器对dns服务器的请求的时候，集群机器会一直重复的请求一个hostname的ip，nscd根本没有起到缓存到的效果，如下图所示：<img src="/images/dns_request.png" alt="tcpdump显示log">后面查看dnsmasq的man手册知道，dnsmasq的local-ttl参数是控制本地域名的缓存时间的，比如存在<code>/etc/hosts</code>下的域名映射关系的缓存时间就是由local-ttl参数控制的，该值默认是0。我们集群的所有机器的hostname和ip的映射关系都是存储在dns服务器的<code>/etc/hosts</code>文件中的，所以这些域名在集群机器中是不缓存的，所以集群机器才会一直重复的请求某一个hostname的ip。最后为local-ttl配置一个适当值后该问题就解决了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>为集群配置dns服务看起来是一件比较简单的事情，但是如果不知道其中的一些坑的话，配置起来就会挺费精力的，我就花了不少的时间。希望这篇文章能让其他人少走一些弯路。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> dnsmasq </tag>
            
            <tag> nscd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用django-guardian实现django-admin的行级权限控制</title>
      <link href="/2018/10/27/%E4%BD%BF%E7%94%A8django-guardian%E5%AE%9E%E7%8E%B0django-admin%E7%9A%84%E8%A1%8C%E7%BA%A7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/10/27/%E4%BD%BF%E7%94%A8django-guardian%E5%AE%9E%E7%8E%B0django-admin%E7%9A%84%E8%A1%8C%E7%BA%A7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用django框架来做一些后台管理的web页面简直太方便了，django自带模块级的权限系统，用来做一些内部的系统非常合适，可以大大的减少开发量。但是django自带的权限系统还不支持行级的权限控制，如果要实现行级的权限控制，需要依赖第三方的app来开发，或者自己重新写一个。</p></blockquote><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>我们项目组开发的一些系统通常会用mysql数据库来存储一些配置，但是如果每次有配置修改的时候都去手动修改mysql数据的话，会挺麻烦的，同时也比较容易出错。django-admin能够根据定义的model自动的生成相应的页面，同时还能提供权限的管理，所以我们就把一些系统到的配置放到django中。但是到现在，随着系统的需求越来越多，该系统已经不止我们自己项目组的人员使用，也要开放给其他项目组的同事使用，所以就产生了一些更细粒度的权限需求。因此，我们要在现有的系统上支持行级的权限控制。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>当然可以自己写一套权限系统了，但是自己写的成本比较高，而且自己写的不一定比较好。所以我就先在网上找了一些现成的解决方案，<a href="https://djangopackages.org/grids/g/perms/" target="_blank" rel="noopener">https://djangopackages.org/grids/g/perms/</a> 该链接列出了现有的一些第三方的权限系统解决方案。从该页面来看，django-guardian是最受欢迎的第三方权限系统，而且支持行级的权限系统，同时还可以整合到django-admin里面，所以我就选择了django-guardian。</p><h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><h5 id="安装配置django-guardian"><a href="#安装配置django-guardian" class="headerlink" title="安装配置django-guardian"></a>安装配置django-guardian</h5><p>安装配置django-guardian比较简单，按照她项目提供的<a href="https://django-guardian.readthedocs.io/en/stable/" target="_blank" rel="noopener">文档</a>进行安装就可以了，安装完成后会在数据库里面创建两张权限相关的表。</p><h5 id="把django-guardian整合到django-admin"><a href="#把django-guardian整合到django-admin" class="headerlink" title="把django-guardian整合到django-admin"></a>把django-guardian整合到django-admin</h5><p>首先把admin.py文件里面需要用到行级权限的类，由原来的继承admin.ModelAdmin，改成继承GuardedModelAdmin，这时候打开某个数据行的页面的时候，在该页面的右上角的历史旁边会显示编辑对象权限的按钮，点击该按钮进去相应的页面就可以编辑该行数据的具体权限。<br>配置完权限的时候，用一个新的用户测试的话，会发现该用户没有权限来访问任何的数据，这是因为GuardedModelAdmin还有很多事情没有帮我们做，我们还需要重写一些函数来实现admin后台页面的显示。具体的信息看下面的代码注释。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> guardian.admin <span class="keyword">import</span> GuardedModelAdmin</span><br><span class="line"><span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> get_objects_for_user, assign_perm, remove_perm, get_users_with_perms, \</span><br><span class="line">    get_groups_with_perms</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 需改前</span></span><br><span class="line"><span class="meta">@admin.register(DataAssistantJob)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAssistantJobAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="meta">@admin.register(DataAssistantJob)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAssistantJobAdmin</span><span class="params">(GuardedModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># app是否在主页面中显示的话由该函数决定</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_module_permission</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> super().has_module_permission(request):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model_objs(request).exists()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在显示数据列表额时候，哪些数据显示，哪些不显示，由该函数控制</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> super().get_queryset(request)</span><br><span class="line"></span><br><span class="line">        data = self.get_model_objs(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 内部用来获取某个用户有权限访问的数据行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model_objs</span><span class="params">(self, request, action=None, klass=None)</span>:</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        actions = [action] <span class="keyword">if</span> action <span class="keyword">else</span> [<span class="string">'view'</span>, <span class="string">'change'</span>, <span class="string">'delete'</span>]</span><br><span class="line">        klass = klass <span class="keyword">if</span> klass <span class="keyword">else</span> opts.model</span><br><span class="line">        model_name = klass._meta.model_name</span><br><span class="line">        <span class="keyword">return</span> get_objects_for_user(user=request.user, perms=[<span class="string">f'<span class="subst">&#123;perm&#125;</span>_<span class="subst">&#123;model_name&#125;</span>'</span> <span class="keyword">for</span> perm <span class="keyword">in</span> actions],</span><br><span class="line">                                    klass=klass, any_perm=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来判断某个用户是否有某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perm</span><span class="params">(self, request, obj, action)</span>:</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        codename = <span class="string">f'<span class="subst">&#123;action&#125;</span>_<span class="subst">&#123;opts.model_name&#125;</span>'</span></span><br><span class="line">        <span class="keyword">if</span> obj:</span><br><span class="line">            <span class="keyword">return</span> request.user.has_perm(<span class="string">f'<span class="subst">&#123;opts.app_label&#125;</span>.<span class="subst">&#123;codename&#125;</span>'</span>, obj)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.get_model_objs(request, action).exists()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有查看某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_view_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'view'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有修改某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_change_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'change'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有删除某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_delete_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'delete'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户应该拥有他新增的数据行的所有权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        result = super().save_model(request, obj, form, change)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_superuser <span class="keyword">and</span> <span class="keyword">not</span> change:</span><br><span class="line">            opts = self.opts</span><br><span class="line">            actions = [<span class="string">'view'</span>, <span class="string">'add'</span>, <span class="string">'change'</span>, <span class="string">'delete'</span>]</span><br><span class="line">            [assign_perm(<span class="string">f'<span class="subst">&#123;opts.app_label&#125;</span>.<span class="subst">&#123;action&#125;</span>_<span class="subst">&#123;opts.model_name&#125;</span>'</span>, request.user, obj) <span class="keyword">for</span> action <span class="keyword">in</span> actions]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><p>通过上面的修改，django-admin中的模块就能够支持行级的权限，并能够正确的在后台页面中显示出来，当然如果有很多的模块需要支持行级的权限控制，则可以把上面的这些修改写到一个新的类中，然后其他想支持行级权限的模块再从该模块继承就可以了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>感觉django-guardian和django-admin整合，实现的不是很好。如果开发者对django内部的代码不怎么了解，那么用django-guardian来实现行级权限控制的话会挺麻烦的，个人认为django-guardian完全可以把和django-admin的整合做到开箱即用的效果，就像django自带的权限系统一样。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> guardian </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写HDFS文件失败的问题处理</title>
      <link href="/2018/10/27/%E5%86%99HDFS%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2018/10/27/%E5%86%99HDFS%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们的集群在用fluentd写入hdfs的时候经常会遇到写入失败的问题，失败的特点是写入失败的那个文件的备份数只有2个（我们集群设置的是3个），然后就再也不能成功的往这个文件写入任何内容了。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在集群负载比较高的时候，写hdfs文件有时会发生写入错误，写入错误的文件只有两个备份，该文件之后再也不能被写入了。</p><h4 id="临时解决"><a href="#临时解决" class="headerlink" title="临时解决"></a>临时解决</h4><p>之前还不知道产生这个问题的具体原因，但是出现了文件写入不进去的情况，又要及时的修复问题，我们的做法是先把该文件从hdfs上下载到本地，然后再把该文件从hdfs上删除，最后把本地的文件上传到hdfs中，这样就能把出问题的文件给修复好。<br>上述的解决方法，毕竟治标不治本，如果出错的文件比较少的话，还可以及时的修复，但是如果错误的文件数很多的话，那修复起来就非常的麻烦了。</p><h4 id="彻底解决"><a href="#彻底解决" class="headerlink" title="彻底解决"></a>彻底解决</h4><h5 id="产生该问题的原因"><a href="#产生该问题的原因" class="headerlink" title="产生该问题的原因"></a>产生该问题的原因</h5><p>之前还不知道具体是什么原因造成的写入失败，后面在研究了hdfs写入过程的时候发现一个问题：那就是我们集群的机器数量比较少，只有四台机器，在写入hdfs文件pipeline的时候，如果有一台机器出现问题了时候，这时候就会把这台机器排除掉，去寻找新的可用的机器，但是我们的集群只有四台机器，如果刚好有两台机器出现问题的话，这时候文件的备份数永远也到达不了3。</p><h5 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h5><p>解决问题的方法无非就下面几个：</p><ul><li>增加集群的机器数量。比如把集群的机器增加到10台，这样只有同时有8台机器出现问题的情况下，才会出现文件写入失败的问题。这样出现写入失败的问题的概率就会大大的减少。</li><li>减少文件备份的数量。这个方法对我们不适用，因为我们现在使用的只有3个备份，这个应该是hdfs最低的要求了。</li><li>修改配置，让写入的行为发生改变。dfs.client.block.write.replace-datanode-on-failure.enable配置默认是true，表示如果在写入的pipeline有datanode失败的时候是否要切换到新的机器，但是如果集群比较小的话，有两台机器失败的话，就没有其他机器可以切换了，所以把该配置设置成false后就能解决问题。</li></ul><h5 id="最后的解决方法"><a href="#最后的解决方法" class="headerlink" title="最后的解决方法"></a>最后的解决方法</h5><p>由于我们的集群不可能一下子就扩大，所以我们当前的解决方法是先把dfs.client.block.write.replace-datanode-on-failure.enable配置项设置成false，等后面集群变大后再把该配置项改成true。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>现在集群已经很久没有发生上述的错误了，说明配置的修改已经起到效果了。解决问题最重要的一步还是找到问题的原因，然后一次性解决掉，不然问题还是会时不时的光顾你的。</p>]]></content>
      
      
      <categories>
          
          <category> 错误处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hdfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fluentd性能优化实践</title>
      <link href="/2018/10/04/Fluentd%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/10/04/Fluentd%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们的日志收集系统使用的是Fluentd，使用Fluentd的原因大概是因为配置简单、插件比较多、而且能够比较容易的定制自己的插件。但是随着日志越来越多以后，Fluentd会出现性能上的问题，以下的文章将回顾我们进行Fluentd性能优化的操作。</p></blockquote><h4 id="Fluentd-性能问题的主要原因？"><a href="#Fluentd-性能问题的主要原因？" class="headerlink" title="Fluentd 性能问题的主要原因？"></a>Fluentd 性能问题的主要原因？</h4><p>抛开自己配置错误的一些原因，Fluentd性能问题的最主要原因是因为Fluentd是使用Ruby写的，而Ruby有全局锁(GIL)，因而在一个Ruby进程里面同时最多只有一个线程在运行。这样的话，Ruby的多线程对需要更多计算资源的操作显得无能为力，具体的体现可以用top查看进程的运行情况，如果Fluentd到达性能瓶颈的话，Fluentd的进程会一直占用100%左右的计算资源，再也不能提升，对于有四个核的计算机来说，最多也就使用的1/4的计算能力，这是极其浪费的。而且当Fluentd进程到达瓶颈后，数据会处理不完，导致数据收集的速度落后于数据产生的速度。</p><h4 id="Fluentd-多进程优化一"><a href="#Fluentd-多进程优化一" class="headerlink" title="Fluentd 多进程优化一"></a>Fluentd 多进程优化一</h4><p>既然已经知道了Fluentd性能瓶颈的问题主要是因为单进程不能使用多核的计算能力，那解决的方法也是很简单的，可以把收集的日志按照不同的类型来拆分成不同的进程，这样就能充分的利用多核的计算能力了。</p><h5 id="多进程架构"><a href="#多进程架构" class="headerlink" title="多进程架构"></a>多进程架构</h5><p><img src="/images/fluentd_multi_process_1.jpg" alt="Fluentd多进程架构一">如上图所示，之前单进程的架构可以改成如上的多进程架构，这样每个进程最多可以使用100%的cpu资源，理论上四核的机器起四个Fluentd进程就可以充分的利用机器的计算资源的了，但是实际上这个架构还有一些问题未能解决。</p><h5 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h5><p>这个多进程的架构相比于单进程的架构在性能上已经有很大的提升了，不过还有如下两个问题：</p><ol><li>该架构要求Log的拆分要比较均衡，这样每个进程都能合理的利用计算资源，不然会出现有些进程非常繁忙，但是有些进程却非常的空闲。然而Log的拆分是按照之前的经验来拆分的，不可能做到绝对的均衡，而且拆分完后是直接写到配置文件里面的，也不能进行实时调整。</li><li>即使是按照现在的架构进行日志拆分了，但是有些日志的计算任务比较繁重，有可能导致即使一个进程只处理一个类型的Log也会到达性能瓶颈。如上图的Process3只处理Log5，但是在top中却看到Process3的cpu使用率一直是100%，这说明Process3已经到达了性能瓶颈，但是Log5已经不能再进行拆分了。</li></ol><p>基于上面的这两个问题，这种多进程架构还是会遇到性能瓶颈，因此需要对架构再继续进行优化，接下来介绍新的架构来优化Fluentd的性能。</p><h4 id="Fluentd-多进程优化二"><a href="#Fluentd-多进程优化二" class="headerlink" title="Fluentd 多进程优化二"></a>Fluentd 多进程优化二</h4><p>上面的日志拆分架构其实在我们的系统中已经用过了一段时间了，但是我们发现有些Fluentd进程一直很繁忙，我们本来是想着怎么把日志拆分的更加均衡一些，但是无意中在Fluentd官网中看到了他们推荐的架构，觉得这才是真正正确的做法，之前走的是弯路。</p><h5 id="新的多进程架构"><a href="#新的多进程架构" class="headerlink" title="新的多进程架构"></a>新的多进程架构</h5><p><img src="/images/fluentd_multi_process_2.jpg" alt="Fluentd多进程架构二">这是Fluentd官网给出的多进程架构图，该架构采用两层的结构，前面的一层只负责数据的路由，把数据按照一定的比例路由到第二层，然后第二层才对数据进行处理。第二层可以根据机器的资源起不同个数的进程，甚至可以把第二层部署到不同的机器上去。这样就能解决旧的架构的分配不均和计算瓶颈的问题了，每种日志都能很均衡的使用机器的计算资源，甚至可以分布式扩展。同时也不用苦恼于怎么拆分Log来让进程的计算资源更加的均衡。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>新的架构虽然在理论上是非常好的架构，但是在配置的过程中需要注意一些问题：</p><ol><li>新架构第一层使用的是forward插件把log路由到第二层的，需要注意的是forward的插件也是需要把buffer_type配置成文件的，不然如果第二层的处理能力不够的话，就会导致第一层的buffer数据一直堆在内存里面，导致内存不够。还会造成在停Fluentd进程的时候，如果是第二层进程先停的话，那么第一层的数据会不能发送的到第二层，第一层的进程会一直停不掉。如果机器不小心关掉的话，还会造成数据丢失。</li><li>新架构第一层的flush_interval（推荐1秒）和buffer_chunk_size（推荐1M）要配置的尽量小，这样数据才能尽快的发送到第二层进行处理。其实如果配置的比较大的话，到时候第二层会有报警的。</li><li>新架构的缺点是同一种Log会有多个处理进程，这样的话就会导致一些只能单进程处理的操作变得不那么优美了。比如webhdfs插件，现在使用新的多进程架构后，因为每个hdfs文件只能由一个进程写入，所以现在同一种Log是由多个进程写入的，只能写入到多个不同的文件，这样会造成hdfs文件数量成倍的增加。</li></ol><h5 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h5><p>下面给出了一个比较简单的配置实例，该实例只适用于单机版本。如果数据比较多的话，还可以把out_fluent.x.conf的配置文件扩展到多台机器。</p><p>multiprocess.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type monitor_agent</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">  port 24220</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type multiprocess</span><br><span class="line">  &lt;process&gt;</span><br><span class="line">    cmdline -c in_fluentd.conf --log logs/in_fluentd.conf.log</span><br><span class="line">    sleep_before_start 1s</span><br><span class="line">    sleep_before_shutdown 5s</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;process&gt;</span><br><span class="line">    cmdline -c out_fluent.0.conf --log logs/out_fluent.0.conf.log</span><br><span class="line">    sleep_before_start 1s</span><br><span class="line">    sleep_before_shutdown 5s</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;process&gt;</span><br><span class="line">    cmdline -c out_fluent.1.conf --log logs/out_fluent.1.conf.log</span><br><span class="line">    sleep_before_start 1s</span><br><span class="line">    sleep_before_shutdown 5s</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure></p><p>in_fluentd.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type tail</span><br><span class="line">  @log_level warn</span><br><span class="line">  format tsv</span><br><span class="line">  keys source,version,event_time</span><br><span class="line">  time_key event_time</span><br><span class="line">  time_format %Y-%m-%d %H:%M:%S</span><br><span class="line">  path /data/*/rolelogout.*</span><br><span class="line">  pos_file logs/fluentd/pos/rolelogout.pos</span><br><span class="line">  refresh_interval 10s</span><br><span class="line">  read_from_head true</span><br><span class="line">  keep_time_key true</span><br><span class="line">  tag pro_role_logout</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match pro_role_logout&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  num_threads 4</span><br><span class="line">  buffer_type file</span><br><span class="line">  buffer_queue_limit 2048</span><br><span class="line">  buffer_chunk_limit 10m</span><br><span class="line">  flush_interval 10s</span><br><span class="line">  buffer_path logs/fluentd/buffer/in_pro_role_logout.buffer</span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    host 127.0.0.1</span><br><span class="line">    port 24000</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    host 127.0.0.1</span><br><span class="line">    port 24001</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><p>out_fluent.0.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  port 24000</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match pro_role_logout&gt;</span><br><span class="line">  @type forest</span><br><span class="line">  subtype webhdfs</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    username webuser</span><br><span class="line">    namenode tsh-hdp-namenode-001:50070</span><br><span class="line">    standby_namenode tsh-hdp-namenode-002:50070</span><br><span class="line">    path /raw_logs/dt=%Y-%m-%d/role_logout.$&#123;tag&#125;.%Y%m%d%H.VPROFLTDSG.0.log</span><br><span class="line">    flush_interval 10s</span><br><span class="line">    field_separator TAB</span><br><span class="line">    buffer_queue_limit 1024</span><br><span class="line">    buffer_chunk_limit 16m</span><br><span class="line">    buffer_type file</span><br><span class="line">    buffer_path logs/fluentd/buffer/webhdfs_role_logout.$&#123;tag&#125;.VPROFLTDSG.0.buffer</span><br><span class="line">    output_include_time false</span><br><span class="line">    output_include_tag false</span><br><span class="line">    output_data_type attr:version,event_time</span><br><span class="line">    flush_at_shutdown true</span><br><span class="line">    retry_wait 30s</span><br><span class="line">    num_threads 1</span><br><span class="line">    read_timeout 180</span><br><span class="line">    open_timeout 120</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><p>out_fluent.1.conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  port 24001</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match pro_role_logout&gt;</span><br><span class="line">  @type forest</span><br><span class="line">  subtype webhdfs</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    username webuser</span><br><span class="line">    namenode tsh-hdp-namenode-001:50070</span><br><span class="line">    standby_namenode tsh-hdp-namenode-002:50070</span><br><span class="line">    path /raw_logs/dt=%Y-%m-%d/rrole_logout.$&#123;tag&#125;.%Y%m%d%H.VPROFLTDSG.1.log</span><br><span class="line">    flush_interval 10s</span><br><span class="line">    field_separator TAB</span><br><span class="line">    buffer_queue_limit 1024</span><br><span class="line">    buffer_chunk_limit 16m</span><br><span class="line">    buffer_type file</span><br><span class="line">    buffer_path logs/fluentd/buffer/webhdfs_role_logout.$&#123;tag&#125;.VPROFLTDSG.0.buffer</span><br><span class="line">    output_include_time false</span><br><span class="line">    output_include_tag false</span><br><span class="line">    output_data_type attr:version,event_time</span><br><span class="line">    flush_at_shutdown true</span><br><span class="line">    retry_wait 30s</span><br><span class="line">    num_threads 1</span><br><span class="line">    read_timeout 180</span><br><span class="line">    open_timeout 120</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过这次架构的升级，Fluentd的性能已经得到了很大的提升，而且配置也变得更加简单了，好的架构往往能够事半功倍。</p>]]></content>
      
      
      <categories>
          
          <category> 日志收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python的Iterator不能当List用</title>
      <link href="/2018/09/09/Python%E7%9A%84Iterator%E4%B8%8D%E8%83%BD%E5%BD%93List%E7%94%A8/"/>
      <url>/2018/09/09/Python%E7%9A%84Iterator%E4%B8%8D%E8%83%BD%E5%BD%93List%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前在重构流处理框架的时候，把在每个模块里面处理的数据类型从List，变成了pyspark里面foreachPartition输入的函数的参数，其实就是一个Iterator类型的参数，用来遍历整个Partition的数据。但是后面发现有些模块没有执行，最后发现竟然是误用Iterator造成的bug。</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Iterator类型的数据只能遍历一次，但是List可以一直遍历，很简单的一段代码就可以说明这个问题：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">it = iter(lst)</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> lst])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> lst])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> it])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> it])</span><br></pre></td></tr></table></figure></p><p>这段代码的输出是：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>很简单的就可以看出Iterator和List的不同了，我项目中的问题就对Iterator遍历了两次，第二次遍历的代码等于没执行。这样说来Iterator是不是就都可以用List替换了，或者说Iterator就没有优势了？答案显然不是的。</p><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><h5 id="什么是Iterator"><a href="#什么是Iterator" class="headerlink" title="什么是Iterator"></a>什么是Iterator</h5><p>Iterator是访问集合元素的一种方式。Iterator对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。Iterator只能单向访问，且不能回退。</p><h5 id="Iterator的优势"><a href="#Iterator的优势" class="headerlink" title="Iterator的优势"></a>Iterator的优势</h5><p>我觉得Iterator的主要优势是延迟计算，他并不像List那样需要事先把所有的元素都放到List，而是访问到的时候才产生所需要的元素，访问之后的元素如果其他地方没有用到，其占用的内存也可以被回收掉，大大的减少了集合遍历所需的内存。想象一下，如果需要访问的集合是非常巨大的话，这样的话List就需要分配非常多的内存。下面的代码举个例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">1000000000</span>:</span><br><span class="line">        <span class="keyword">yield</span> random.random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rand <span class="keyword">in</span> gen():</span><br><span class="line">    print(rand)</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这篇文章主要了解了下List和Iterator的区别，不过在有些方法中不管你传的是Iterator还是List都会转成List类型，用List来求集合的长度，比如进程池的map函数。当集合比较小的时候不管是使用List还是Iterator，都行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fabric远程执行后台脚本卡住的问题</title>
      <link href="/2018/07/28/fabric%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2018/07/28/fabric%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近用fabric开发了一个简单的运维系统，该系统可以在远程机器上执行一些命令，在批量执行后台脚本的启动的时候，发现fabric会卡住，不能正常的返回。在fabric官方有给出一些解决方案<a href="http://www.fabfile.org/faq.html#why-can-t-i-run-programs-in-the-background-with-it-makes-fabric-hang" target="_blank" rel="noopener">Why can’t I run programs in the background with &amp;? It makes Fabric hang</a>，但是这些方案都要额外的工具，有些麻烦。接下来简单的介绍下fabric的机制和我的解决方案。</p></blockquote><h4 id="fabric是怎么在远程机器上执行命令的？"><a href="#fabric是怎么在远程机器上执行命令的？" class="headerlink" title="fabric是怎么在远程机器上执行命令的？"></a>fabric是怎么在远程机器上执行命令的？</h4><p>fabric是先用ssh连接到远程机器上，然后再执行相关的命令。</p><h4 id="fabric为什么会卡住不返回？"><a href="#fabric为什么会卡住不返回？" class="headerlink" title="fabric为什么会卡住不返回？"></a>fabric为什么会卡住不返回？</h4><p>ssh连接到远程机器上的时候会起一个session，fabric卡住不返回是因为这个session一直结束不掉，这个session之所以结束不掉是因为我们起的后台进程有输出是定向到这个session的。</p><h4 id="怎么解决？"><a href="#怎么解决？" class="headerlink" title="怎么解决？"></a>怎么解决？</h4><p>只要把后台进程的输出重定向到其他地方，fabric就可以正常返回。比如把后台脚本的启动方式改成<code>yourcommand &gt; /dev/null 2&gt;&amp;1 &amp;</code>，这样就会把yourcommand脚本的所有输出重定向到/dev/null，因此fabric就可以正常返回了。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>我之前后台脚本的启动方式是<code>yourcommand 2&gt;&amp;1 1&gt; /dev/null</code>，按照我本来的理解，应该是把stderr和stdout都重定向到/dev/null了，但是这个命令只是把stdout重定向到/dev/null，stderr还是没有被重定向。 </p><p>使用<code>yourcommand &amp;&gt; /dev/null</code>这种方式也可以把所有的输出重定向到/dev/null，这种方式的命令也更短一些。</p>]]></content>
      
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python标准开发环境</title>
      <link href="/2018/06/23/python%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/06/23/python%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多初学python的同学可能都知道pip，通过pip可以安装自己的需要的python第三方库。但是有很多同学可能不知道pipenv，在这篇文章我将介绍如何用pipenv来构建自己的开发环境，以及用pipenv快速部署生产环境</p></blockquote><h4 id="什么是pipenv？"><a href="#什么是pipenv？" class="headerlink" title="什么是pipenv？"></a>什么是pipenv？</h4><p>pipenv是一个把包管理工具和虚拟环境结合的工具，使用pipenv install和使用pip install一样，可以安装任何你想安装的第三方库，不同的是pipenv会记录你安装的库和使用的python版本，在部署生产环境的时候直接使用pipenv install就可以安装所有的依赖、甚至特定的python版本。<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv项目地址</a></p><h4 id="如何使用pipenv？"><a href="#如何使用pipenv？" class="headerlink" title="如何使用pipenv？"></a>如何使用pipenv？</h4><ol><li>开发环境使用<br>项目开发的时候使用pip install在项目的目录下面安装所需要的库，pipenv会自动在项目的根目录下面产生Pipfile，Pipfile.lock这两个文件，这两个文件记录了当前项目的使用第三方库和python版本的信息，同时pipenv会为这个项目构建一个虚拟环境(pipenv –venv可以查看虚拟环境的位置)。pipenv shell可以把当前的命令行环境切换到当前项目的虚拟环境下执行。要用虚拟环境运行一个python文件的话，则使用pipenv run python a.py。</li><li>生产环境使用<br>当项目开发完成以后，把项目上传到需要部署该项目的服务器。然后在项目的根目录下运行pipenv install，这时候pipenv会自动为该项目创建所依赖的python的版本的虚拟环境，同时在该虚拟环境下安装所有需要的第三方库。有一个问题需要注意的是：如果机器上没有安装项目所需要的python版本的话，这时候虚拟环境就会创建失败。要解决这个失败的话有两个办法：1.安装项目所依赖的python版本。2.安装pyenv，让pipenv在创建虚拟环境的时候使用pyenv自动安装所需要的python版本。</li></ol><h4 id="使用pyenv"><a href="#使用pyenv" class="headerlink" title="使用pyenv"></a>使用pyenv</h4><p>pyenv是一个python包管理工具，可以在一台机器上面安装多个python版本。我推荐至少在生产环境上面安装pyenv，这样在项目代码部署到生产环境的时候根据项目的实际需要安装不同的python版本。<a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">pyenv项目地址</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>python程序员在开发项目的时候推荐使用pipenv，这样在项目分享给别人或者部署的时候都可以无比的轻松。同时推荐使用pyenv，pipenv和pyenv配合使用不要太爽了。这篇文章只是简单的介绍pipenv和pyenv，具体的使用方法请查阅他们的官方文档。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Spark中使用Python单例的技巧</title>
      <link href="/2018/05/20/%E5%9C%A8Spark%E4%B8%AD%E4%BD%BF%E7%94%A8Python%E5%8D%95%E4%BE%8B%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/05/20/%E5%9C%A8Spark%E4%B8%AD%E4%BD%BF%E7%94%A8Python%E5%8D%95%E4%BE%8B%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用spark编程的时候，我们需要知道我们编写的某一段代码是在driver端执行，还是在executor端执行。如果是在executor端执行的话，就要注意这些代码是否是可以序列化发送到executor端执行，如果不行的话就会报错。接下来这篇文章主要讨论Python单例在使用Spark的时候解决的问题。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在使用spark的时候经常会用到map来对数据进行处理，在map函数里面的代码会被序列化，然后发送到executor端执行。但是并不是所有的代码都是可以被序列化的，比如一个mysql连接的实例就不能被序列化，然后发送到executor端执行。要解决这个问题很简单，如果一个mysql连接的实例不能被序列化发送的话，可以在executor端实例化一个mysql连接，然后使用这个连接。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(row)</span>:</span></span><br><span class="line">    connector = mysql.connector.connect(**mysql_conf)</span><br><span class="line">    <span class="comment"># Do something</span></span><br><span class="line">rdd.map(transform)</span><br></pre></td></tr></table></figure></p><p>上述的代码可以正确的运行，但是有一个比较严重的问题：map函数在每执行一次转换的时候都需要实例化一个mysql的实例，在实例化的时候要与mysql服务器建立连接，这个开销是比较大的，可想而知效率会非常的低。</p><p>要解决这个问题我们可以用mapPartitions接口来代替map，mapPartitions接口不是对每行数据进行操作的时候都执行一个mysql实例化操作，而是对一个partition的数据执行操作时候才执行一个mysql实例化操作，这样效率会大大的提升，上述的代码可以改成如下的代码。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(rows)</span>:</span></span><br><span class="line">    connector = mysql.connector.connect(**mysql_conf)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="comment"># Do something</span></span><br><span class="line">rdd.mapPartitions(transform)</span><br></pre></td></tr></table></figure></p><p>这样问题似乎已经解决了，但是解决的还不完全，或者说只解决rdd的问题，因为虽然spark的rdd支持mapPartitions操作，但是DataFrame并不支持mapPartitions的操作（对DataFrame执行map操作可以注册一个udf函数，然后调用这个udf函数）。有一个不太优美的做法是先把DataFrame转化成rdd进行mapPartitions，然后再把处理后的rdd转化成DataFrame。要在两种数据结构之间来回转化，这个操作实在是不够优美，而且效率低下。所以我们需要找到一个让mysql在map操作中只实例化一次的方法。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>要优美的解决上面提到的这个问题的话，我们就需要用到Python的单例了。Python的单例实现方式有很多种，这在边我只介绍最简单的一种。利用Python的import机制可以确保一个模块只被导入一次，如果在这个模块里面实例化一个mysql实例的话，那么即使被多次导入，也只会被实例化一次。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SingletonMysql.py</span></span><br><span class="line">connector = mysql.connector.connect(**mysql_conf)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(row)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> SingletonMysql <span class="keyword">import</span> connector</span><br><span class="line">    <span class="comment"># Do something</span></span><br><span class="line">rdd.map(transform)</span><br><span class="line">spark.udf.register(<span class="string">"transform"</span>, transform)</span><br><span class="line">spark.sql(<span class="string">"select transform(name) from table"</span>)</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们就可以在map函数里面使用mysql实例，而且能够保证它只会在第一次使用的时候被实例化。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在一些第三方库的接口已经确定的情况下，有时候我们必须使用一些语言的特性才能达到一些特定的目标。这个Python单例的使用只是其中的一个例子，如果Spark本身的接口支持在executor端进行一些初始化操作的话就不需要用到单例了。还有，比如map里面的函数只能是一个参数的函数，但是有时候我们需要一些额外的信息，所以这时候就要用匿名函数来达到这个目的了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> python </tag>
            
            <tag> 单例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark报错——java.lang.outofmemoryerror: java heap space问题处理</title>
      <link href="/2018/05/20/Spark%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94java-lang-outofmemoryerror-java-heap-space%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2018/05/20/Spark%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94java-lang-outofmemoryerror-java-heap-space%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在用spark处理数据的时候遇到内存不足的报错，主要的报错信息是在executor端的log中显示java.lang.outofmemoryerror: java heap space。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>具体的问题是spark在执行到最后一个stage后有一个task一直执行不成功，每次都是重试四次后失败。下面的两张图是具体失败的信息：<img src="/images/spark_outofmemory1.png" alt="四次task失败信息"><img src="/images/spark_outofmemory2.png" alt="具体失败的log"></p><p>task的失败的信息图中显示：失败的任务的Shffle Read Size是0，这个是不对的，因为这个信息在任务失败的时候都会被置零，实际上在任务在运行的时候这个值是六百多M，远远大于其他task的输入的20多M。</p><p>从上面失败的信息中我们可以看到失败的原因是有一个task的输入的数据量太大，以至于spark executor运行的时候需要的内存大大增加，这才导致了内存不足的异常。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><h5 id="解决尝试一"><a href="#解决尝试一" class="headerlink" title="解决尝试一"></a>解决尝试一</h5><p>最简单直接的解决方法是直接通过增大executor-memory的值来增加executor最大的内存使用量，由于yarn默认的每个executor的core是一个，如果本身启动的executor比较多的话，增加executor-memory的值的话，yarn集群就要多消耗executor的数量✖️增加的内存量的内存，内存的消耗会比较大。所以可以减少executor的数量，为每个executor分配多个core，这样需要的内存量就大大的减少了，但是每个executor可以使用的内存量又可以增加，这样的配置可以减少因为数据倾斜导致任务失败的概率。  </p><p>最终我们用这个方法把每个executor的executor-memory值增大到了12G，但是最后还是由于内存不够失败了。</p><h5 id="解决尝试二"><a href="#解决尝试二" class="headerlink" title="解决尝试二"></a>解决尝试二</h5><p>由于某个task需要的内存量非常的大，然而其他task的内存量都很小，这应该不是简单的数据倾斜。spark sql只是对玩家的登陆数据进行以device_id为key的group by操作，数据的倾斜不可能这么严重。</p><p>在重新观察了玩家的登陆数据后，我发现有很多数据的device_id为null。这下就很清楚的知道数据倾斜的原因了，接着对device_id为null的数据进行过滤后，问题就迎刃而解了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在处理数据倾斜问题的时候可以通过调整spark的参数来优化任务的执行。但是如果想更彻底的优化任务的执行的话，要观察数据，知道是什么原因造成的数据倾斜。这样才能进行更彻底的优化。</p>]]></content>
      
      
      <categories>
          
          <category> 错误处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用spark进行流处理</title>
      <link href="/2018/05/04/%E4%BD%BF%E7%94%A8spark%E8%BF%9B%E8%A1%8C%E6%B5%81%E5%A4%84%E7%90%86/"/>
      <url>/2018/05/04/%E4%BD%BF%E7%94%A8spark%E8%BF%9B%E8%A1%8C%E6%B5%81%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在做一个假量检测的项目，主要是用来检测是否有一些伪造的广告点击之类的，然后该项目使用了spark来做在线的流处理</p></blockquote><h4 id="spark的使用场景"><a href="#spark的使用场景" class="headerlink" title="spark的使用场景"></a>spark的使用场景</h4><p>spark主要用来读取kafka里面的一些点击、安装、登入和登出等数据，然后使用spark的流处理模块对这些数据进行处理，最后把处理完的数据存储到相应的数据库中，供后面的数据分析使用。</p><h4 id="使用的spark流处理模块"><a href="#使用的spark流处理模块" class="headerlink" title="使用的spark流处理模块"></a>使用的spark流处理模块</h4><p>spark的流处理模块有两个：</p><ul><li>Spark Streaming(Dstream) 老的接口</li><li>Structured Streaming 新的接口</li></ul><p>我们的项目使用了Dstream实现流处理，一个主要的原因是在新的Structured Streaming中我们不能获取到读取的kafka的offset，这样当我们有数据处理失败的时候就不能从相应的offset中恢复继续运行，虽然可以设置checkpoint来恢复失败的任务，但是checkpoint的恢复是基于任务的，不能对该任务进行修改，然后再重新运行。<br>对于怎么在Structured Streaming中获取offset，我查了一些资料，如果实在是想获取offset的话也可以通过读取checkpoint文件夹下面的offset文件夹来获取当前的offset，不过这种方法比较奇怪。还有一个方法是使用StreamingQueryListener类里面的onQueryProgress回调来获取当前执行的状态，其中包括offset的信息，但是非常遗憾这种方法只支持scala和java，而我们的开发语言是python。下面的链接是该问题的具体讨论：<a href="https://stackoverflow.com/questions/46153105/how-to-get-kafka-offsets-for-structured-query-for-manual-and-reliable-offset-man/46174353" target="_blank" rel="noopener">如何从Structed streaming中获取offset的问题。</a></p><h4 id="在一个流中处理多个topic"><a href="#在一个流中处理多个topic" class="headerlink" title="在一个流中处理多个topic"></a>在一个流中处理多个topic</h4><p>感觉spark的api设置的非常不友好，想要在一个流中处理多个topic也挺麻烦的，主要的问题如下：</p><ul><li>如果使用Dstream，在创建Dstream的时候可以传入多个topic，这样貌似可以解决读取多个topic的问题，但是有一个很严重的问题，读取到的内容你不知道是属于哪个topic，这样你就不能对不同的topic执行不同的处理了。</li><li>如果使用Structured Streaming，也可以在DataStreamReader中指定多个topic，而且传入的每行数据中也有相应的topic信息，是可以根据不同的topic来调用不同的处理方法的。但是如上面所说的，Structured Streaming不支持获取offset让我们放弃了它。</li></ul><p>最后我们的处理方法是在一个流中建立多个Dstream，在每个Dstream中拉取和处理同一个topic的数据，这样一个流就可以处理多个topic了，示例代码如下所示：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> topic <span class="keyword">in</span> topic_info:</span><br><span class="line">    from_offsets = restore_off_sets(topic)</span><br><span class="line">    DStream = KafkaUtils.createDirectStream(ssc, [topic], kafka_params, from_offsets)</span><br><span class="line">    DStream.transform((<span class="keyword">lambda</span> t: <span class="keyword">lambda</span> rdd: get_offset_ranges(t, rdd))(topic))\</span><br><span class="line">        .map(<span class="keyword">lambda</span> x: x[<span class="number">1</span>])\</span><br><span class="line">        .foreachRDD((<span class="keyword">lambda</span> t: <span class="keyword">lambda</span> rdd: process_rdd(t, rdd))(topic))</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次使用spark，感觉spark的接口设置不是很友好，而且文档写的也不是很友好。比如foreachRDD的回调函数如果是两个参数的函数的话，第一个参数就是时间，这个在文档中没有提及，一不注意就有奇怪的bug了。总之自己还是一个菜鸟，还要多多学习。</p>]]></content>
      
      
      <categories>
          
          <category> 流处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fluentd语法速记</title>
      <link href="/2018/05/01/fluentd%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/"/>
      <url>/2018/05/01/fluentd%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近开始转行做大数据，大数据中很重要的一部分是数据的收集，我们公司主要用的数据收集工具是Fluentd，由于Fluentd的配置比较多，有可能配置过一次后就会忘了。我这边在学习Fluentd配置的同时也对这些配置进行一些记录，方便后面再用到时可以快速的查找。</p></blockquote><h4 id="Fluentd简介"><a href="#Fluentd简介" class="headerlink" title="Fluentd简介"></a>Fluentd简介</h4><p>Fluentd是一款完全免费且完全开源的日志收集器，拥有“Log Everything”的体系结构，能够与125种以上的系统对接。</p><p><img src="/images/fluentd-architecture.png" alt="Fluentd-architecture"></p><h4 id="配置文件语法"><a href="#配置文件语法" class="headerlink" title="配置文件语法"></a>配置文件语法</h4><h5 id="Fluentd事件的生命周期"><a href="#Fluentd事件的生命周期" class="headerlink" title="Fluentd事件的生命周期"></a>Fluentd事件的生命周期</h5><ol><li>每个输入的事件会带有一个tag</li><li>Fluentd通过tag匹配output</li><li>Fluentd发送事件到匹配的output</li><li>Fluentd支持多个数据源和数据输出</li><li>通过过滤器，事件可以被重新触发</li></ol><h5 id="“source”-定义数据源"><a href="#“source”-定义数据源" class="headerlink" title="“source”: 定义数据源"></a>“source”: 定义数据源</h5><p>数据源可以在source指令中定义，比如我们可以定义http和forward的数据源。http数据源可以通过http协议来接收数据，forward可以通过tcp协议来接收数据。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Receive events from 24224/tcp</span></span><br><span class="line"><span class="section"># This is used by log forwarding and the fluent-cat command</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  port 24224</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line"><span class="section"># http://this.host:9880/myapp.access?json=&#123;"event":"data"&#125;</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 9880</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure></p><p>所有source指令中必须包含@type参数，该参数用来指定使用哪个输入插件，比如我们还可以用tail插件来读取文件的内容。 </p><h6 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h6><p>source指令把事件提交到Fluentd的路由引擎。一个事件由三个实体组成：tag、time和record。tag是由’.’分割的字符串组成，被内部路由引擎使用。time由input插件指定，必须是Unix时间戳格式。record是一个Json对象。</p><blockquote><p>强烈推荐使用小写字母、数字和下划线来命名tag，虽然其他的字符也是合法的。</p></blockquote><h5 id="“match”-定义数据的输出目标"><a href="#“match”-定义数据的输出目标" class="headerlink" title="“match”: 定义数据的输出目标"></a>“match”: 定义数据的输出目标</h5><p>match指令通过匹配tag字段来将事件输出到其他的系统。同样match指令也必须指定@type参数，该参数用来指定使用哪个输出插件。在下面的例子中，只有myapp.access的tag能够匹配到该输出插件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h6 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h6><p>下面的这些匹配模式可以在&lt;match&gt;中使用，用来匹配tag:  </p><ul><li>*用来匹配tag的一部分（比如：a.*可以匹配a.b，但是不能匹配a或者a.b.c）</li><li>**可以用来匹配tag的0个或多个部分（比如：a.**可以匹配a、a.b和a.b.c）</li><li>{X,Y,Z}匹配X,Y或者Z（比如：{a,b}可以匹配a和b，但是不能匹配c。他可以和*或者**结合起来一起使用。）</li><li>如果有多个匹配模式写在&lt;match&gt;里面，则可以用空格分开(比如：&lt;match a b&gt;能够匹配a和b。&lt;match a.** b.* &gt;能够匹配a,a.b,a.b.c和b.d。)</li></ul><h6 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h6><p>Fluentd是按顺序匹配的，先在配置文件里面出现的match会先匹配。下面的例子中myapp.access永远都不会被匹配到。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ** matches all tags. Bad :(</span></span><br><span class="line">&lt;match **&gt;</span><br><span class="line">  @type blackhole_plugin</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="“filter”：事件处理管道"><a href="#“filter”：事件处理管道" class="headerlink" title="“filter”：事件处理管道"></a>“filter”：事件处理管道</h5><p>“filter”指令的语法和”match”指令的语法相同，但是”filter”能够在管道中被连起来处理，如下所示：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Input -&gt; filter 1 -&gt; ... -&gt; filter N -&gt; Output</span><br></pre></td></tr></table></figure></p><p>下面的例子展示了record_transformer fliter的用法。source首先会接收到一个{“event”:”data”}的事件，然后该事件会首先被路由到filter，filter会增加一个host_param的字段到record中，然后再把该事件发送到match中。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># http://this.host:9880/myapp.access?json=&#123;"event":"data"&#125;</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 9880</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter myapp.access&gt;</span><br><span class="line">  @type record_transformer</span><br><span class="line">  &lt;record&gt;</span><br><span class="line"><span class="code">    host_param "#&#123;Socket.gethostname&#125;"</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="“system”：设置系统范围配置"><a href="#“system”：设置系统范围配置" class="headerlink" title="“system”：设置系统范围配置"></a>“system”：设置系统范围配置</h5><p>以下的配置能够由”system”指令指定。也可以通过Fluentd的配置选项设置相同的配置:</p><ul><li>log_level</li><li>suppress_repeated_stacktrace</li><li>emit_error_log_interval</li><li>suppress_config_dump</li><li>without_source</li><li>process_name (只能用”system”指令指定)</li></ul><p>下面是一些例子：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">  # 等价于-qq选项</span><br><span class="line">  log_level error</span><br><span class="line">  #等价于--without-source选项</span><br><span class="line">  without_source</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">  process_name fluentd1</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure><p>process_name用来指定Fluentd监控进程和工作进程的名字，通过ps可以看到<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% ps aux | grep fluentd1</span><br><span class="line">foo      45673   0.4  0.2  2523252  38620 s001  S+    7:04AM   0:00.44 worker:fluentd1</span><br><span class="line">foo      45647   0.0  0.1  2481260  23700 s001  S+    7:04AM   0:00.40 supervisor:fluentd1</span><br></pre></td></tr></table></figure></p><h5 id="“label”：用来组织filter和match"><a href="#“label”：用来组织filter和match" class="headerlink" title="“label”：用来组织filter和match"></a>“label”：用来组织filter和match</h5><p>“label”指令用来降低tag路由的复杂度，通过”label”指令可以用来组织filter和match的内部路由。下面是一个配置的例子，由于”label”是内建的插件，所以他的参数需要以@开头。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type tail</span><br><span class="line">  @label @SYSTEM</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter access.**&gt;</span><br><span class="line">  @type record_transformer</span><br><span class="line">  &lt;record&gt;</span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;match **&gt;</span><br><span class="line">  @type elasticsearch</span><br><span class="line">  # ...</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">&lt;label @SYSTEM&gt;</span><br><span class="line">  &lt;filter var.log.middleware.**&gt;</span><br><span class="line"><span class="code">    @type grep</span></span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;match **&gt;</span><br><span class="line"><span class="code">    @type s3</span></span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，forward的数据源的事件被路由到record_transformer filter和elasticsearch output中。tail数据源被路由到@system里面的grep filter和s3 output中。</p><h6 id="ERROR-label"><a href="#ERROR-label" class="headerlink" title="@ERROR label"></a>@ERROR label</h6><p>@ERROR label是内建的label，用来记录emit_error_event错误事件的。如果在配置文件里面设置了<label @error="">，当有相关的错误发生（比如：缓冲区已满或无效记录）的话，该错误事件就会被发送到&lt; label @ERROR &gt;。</label></p><h5 id="“-include”：重用配置"><a href="#“-include”：重用配置" class="headerlink" title="“@include”：重用配置"></a>“@include”：重用配置</h5><p>可以通过”@include”来导入其他的配置文件，配置文件是按顺序导入的。如果使用模式匹配的话，文件是按字母顺序导入的。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># If you have a.conf,b.conf,...,z.conf and a.conf / z.conf are important...</span></span><br><span class="line"><span class="section"># This is bad</span></span><br><span class="line">@include *.conf</span><br><span class="line"></span><br><span class="line"><span class="section"># This is good</span></span><br><span class="line">@include a.conf</span><br><span class="line">@include config.d/*.conf</span><br><span class="line">@include z.conf</span><br></pre></td></tr></table></figure></p><p>如果导入的文件有顺序的要求的话，最好自己主动写导入的语句，模式匹配导入容易出错。</p><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><p>每个插件都需要一些参数。例如：in_tail插件有rotate_wait和pos_file这两个参数。每个参数都有对应的类型与其关联。下面是这些类型的定义：</p><ul><li>string 类型：该类型被解析成一个字符串。string类型可以有三种形式：不带引号的字符串、带单引号的字符串和带双引号的字符串。</li><li>integer 类型：该类型被解析成一个整数。</li><li>float 类型：该类型被解析成一个浮点数。</li><li>size 类型：该类型用来解析成有多少个字节。可以在整数后面加上k/K、m/M、g/G、t/T，对应的是计算机学科的度量单位。比如：12k表示为12*1024后的数值。</li><li>time 类型：该类型被解析成时间。可以在浮点数后面加上s、m、h和d分别表示为秒、分、小时、天。可以用0.1表示100ms。</li><li>array 类型：该类型被解析成JSON数组。这种类型还支持缩写，比如：[“key1”, “key2”]可以缩写成key1,key2。</li><li>hash 类型：该类型被解析成JSON对象。这种类型也支持缩写，比如：{“key1”:”value1”, “key2”:”value2”}可以缩写成key1:value1,key2:value2。</li></ul><h4 id="常见的插件参数"><a href="#常见的插件参数" class="headerlink" title="常见的插件参数"></a>常见的插件参数</h4><p>这些参数是系统保留的并且带有@前缀。</p><ul><li>@type: 指定插件的类型。</li><li>@id: 指定插件的id。</li><li>@label：用来指定标签。</li><li>@log_level：用来指定每个插件的log级别。</li></ul><h4 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h4><p>通过–dry-run选项，可以在不启动插件的情况下检查配置文件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fluentd --dry-run -c fluent.conf</span><br></pre></td></tr></table></figure></p><h4 id="格式建议"><a href="#格式建议" class="headerlink" title="格式建议"></a>格式建议</h4><h5 id="双引号包起来的字符串、数组和哈希类型支持多行"><a href="#双引号包起来的字符串、数组和哈希类型支持多行" class="headerlink" title="双引号包起来的字符串、数组和哈希类型支持多行"></a>双引号包起来的字符串、数组和哈希类型支持多行</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str_param "foo  # This line is converted to "foo\nbar". NL is kept in the parameter</span><br><span class="line">bar"</span><br><span class="line">array_param [</span><br><span class="line">  "a", "b"</span><br><span class="line">]</span><br><span class="line">hash_param &#123;</span><br><span class="line">  "k":"v",</span><br><span class="line">  "k1":10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让[或者{开头的字符串不被解析成数组或者对象，则需要用’或者“把该字符串包起来。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;match **&gt;</span><br><span class="line">  @type mail</span><br><span class="line">  subject "[CRITICAL] foo's alert system"</span><br><span class="line">&lt;/match&gt;</span><br><span class="line">&lt;match tag&gt;</span><br><span class="line">  @type map</span><br><span class="line">  map '[["code." + tag, time, &#123; "code" =&gt; record["code"].to<span class="emphasis">_i&#125;], ["time." + tag, time, &#123; "time" =&gt; record["time"].to_</span>i&#125;]]'</span><br><span class="line">  multi true</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="嵌入Ruby代码"><a href="#嵌入Ruby代码" class="headerlink" title="嵌入Ruby代码"></a>嵌入Ruby代码</h5><p>可以在”包住的#{}里面执行Ruby代码，这可以用来获取一些机器的信息，比如hostname。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host_param "#&#123;hostname&#125;"  # This is same with Socket.gethostname</span><br><span class="line">@id "out<span class="emphasis">_foo#&#123;worker_</span>id&#125;" # This is same with ENV["SERVERENGINE<span class="emphasis">_WORKER_</span>ID"]</span><br></pre></td></tr></table></figure></p><h5 id="在双引号字符串中，-是转义字符"><a href="#在双引号字符串中，-是转义字符" class="headerlink" title="在双引号字符串中，\是转义字符"></a>在双引号字符串中，\是转义字符</h5><p>\被解释为转义字符。你需要用\来设置”，\r，\n，\t，\或双引号字符串中的多个字符。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_param "foo\nbar" # \n is interpreted as actual LF character</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 日志收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片转像素风实现</title>
      <link href="/2018/03/30/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%83%8F%E7%B4%A0%E9%A3%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/03/30/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%83%8F%E7%B4%A0%E9%A3%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python用来写各种小工具简直是神器，昨天晚上花了点时间实现了一个图片转像素风的小工具，下面附上图片Demo和代码</p></blockquote><p><div style="width: 400px"><img src="/images/pixel_demo.png" alt=""></div>下面是实现的具体代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  </span><br><span class="line"><span class="keyword">import</span> argparse  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 命令行输入参数处理  </span></span><br><span class="line">parser = argparse.ArgumentParser()  </span><br><span class="line">  </span><br><span class="line">parser.add_argument(<span class="string">'file'</span>)     <span class="comment"># 输入文件  </span></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--output'</span>)   <span class="comment"># 输出文件  </span></span><br><span class="line">parser.add_argument(<span class="string">'--maxlen'</span>, type=int, default=<span class="number">150</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取参数  </span></span><br><span class="line">args = parser.parse_args()  </span><br><span class="line">  </span><br><span class="line">IMG = args.file  </span><br><span class="line">MAXLEN = args.maxlen  </span><br><span class="line">OUTPUT = args.output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize_image</span><span class="params">(im)</span>:</span></span><br><span class="line">    (width, height) = im.size</span><br><span class="line">    max_len = max(width, height)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> max_len &lt;= MAXLEN:</span><br><span class="line">        <span class="keyword">return</span> im</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        scale = max_len / MAXLEN</span><br><span class="line">        size = (int(width//scale), int(height//scale))</span><br><span class="line">        <span class="keyword">return</span>  im.resize(size, Image.NEAREST) </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line"></span><br><span class="line">    im = Image.open(IMG)  </span><br><span class="line">    im = resize_image(im) </span><br><span class="line">  </span><br><span class="line">    txt = <span class="string">""</span>  </span><br><span class="line">    (width, height) = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(height):  </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(width):  </span><br><span class="line">            (r, b, g) = im.getpixel((j, i))</span><br><span class="line">            txt += <span class="string">"&lt;font style='background:rgb(&#123;&#125;,&#123;&#125;,&#123;&#125;);display:inline-block;width:3px;height:3px;margin:1px;'&gt;&lt;/font&gt;"</span>.format(r, b, g)</span><br><span class="line">        txt += <span class="string">'&lt;/br&gt;'</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> OUTPUT:</span><br><span class="line">        OUTPUT =  <span class="string">"output.txt"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(OUTPUT,<span class="string">'w'</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        f.write(txt)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用erlang:get_stacktrace注意避开的坑</title>
      <link href="/2018/03/29/%E4%BD%BF%E7%94%A8erlang-get-stacktrace%E6%B3%A8%E6%84%8F%E9%81%BF%E5%BC%80%E7%9A%84%E5%9D%91/"/>
      <url>/2018/03/29/%E4%BD%BF%E7%94%A8erlang-get-stacktrace%E6%B3%A8%E6%84%8F%E9%81%BF%E5%BC%80%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>之前在使用erlang:get_stacktrace()函数的时候发现不能正确的获取发生异常的栈内容，但是错误类型和原因却是正常，感觉非常奇怪，下面是具体的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dispatch_cmd</span><span class="params">(User, Mod, Msg)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">try</span> Mod:req(User, Msg) <span class="keyword">of</span></span><br><span class="line">    Result -&gt;</span><br><span class="line">      Result</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    Class:Reason -&gt;</span><br><span class="line">      monitor:notify(ws_dispatch_crash, io_lib:format(<span class="string">"&lt;error-info: ~p:req ~p:~p&gt;"</span>, [Mod, Class, Reason])),</span><br><span class="line">      ?ERROR(<span class="string">"Req Msg: ~p.~nStacktrace: ~s"</span>, [?PR(Msg), ?PR_ST(erlang:get_stacktrace(), &#123;Class, Reason&#125;)]),</span><br><span class="line">      ?ERR_AT_DISPATCH_CMD</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p><strong>上面的代码有什么问题呢？</strong>主要的问题是在调用erlang:get_stacktrace()之前执行了其他有可能会有异常捕获的语句，而在io_lib:format里面会有catch函数，如果io_lib:format函数里面的catch被调用的话，erlang:get_stacktrace()返回的就不是我们想要打印的异常栈，而是io_lib:format里面的异常栈。<strong>如何解决？</strong>在catch之后里面立马调用erlang:get_stacktrace()<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dispatch_cmd</span><span class="params">(User, Mod, Msg)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">try</span> Mod:req(User, Msg) <span class="keyword">of</span></span><br><span class="line">    Result -&gt;</span><br><span class="line">      Result</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    Class:Reason -&gt;</span><br><span class="line">      Stacktrace = erlang:get_stacktrace(),</span><br><span class="line">      monitor:notify(ws_dispatch_crash, io_lib:format(<span class="string">"&lt;error-info: ~p:req ~p:~p&gt;"</span>, [Mod, Class, Reason])),</span><br><span class="line">      ?ERROR(<span class="string">"Req Msg: ~p.~nStacktrace: ~s"</span>, [?PR(Msg), ?PR_ST(Stacktrace, &#123;Class, Reason&#125;)]),</span><br><span class="line">      ?ERR_AT_DISPATCH_CMD</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>据说erlang的开发团队也认为erlang:get_stacktrace()是一个不好的东西，会在OTP 21中把它废弃掉，有一位叫@peterdmv的开发人员是这样说的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">erlang:get_stacktrace/0 is deprecated in OTP 21, you can use the following expression instead:</span><br><span class="line"></span><br><span class="line">try Expr</span><br><span class="line">catch</span><br><span class="line">  Class:Reason:Stacktrace -&gt;</span><br><span class="line">   &#123;Class,Reason,Stacktrace&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>我试了下这个新语法，在OTP 20.3上面还不行，应该在接下来的OTP 21中能够使用它吧~</p>]]></content>
      
      
      <categories>
          
          <category> Erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git远程推送时记住用户名和密码</title>
      <link href="/2018/03/11/Git%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81%E6%97%B6%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/"/>
      <url>/2018/03/11/Git%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81%E6%97%B6%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>当使用HTTPS协议推送代码到Git仓库时，发现每次都需要输入密码，操作起来非常麻烦。下面介绍几种免去输入密码的方法。</p><a id="more"></a><h3 id="HTTPS协议推送"><a href="#HTTPS协议推送" class="headerlink" title="HTTPS协议推送"></a>HTTPS协议推送</h3><p>使用HTTPS协议，有一种简单粗暴的方式是在远程地址中带上密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote set-url origin http://yourname:password@bitbucket.org/yourname/project.git</span><br></pre></td></tr></table></figure><p>还有一种方法，是创建文件存储Git用户名和密码。</p><p>以Windows环境为例，在%USERPROFILE%目录中（一般为C:\Users\yourname)，打开Git Bash命令行，创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; touch .git-credentials</span><br></pre></td></tr></table></figure><p>在文件中输入仓库域名，这里使用了<code>bitbucket.org</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourname:password@bitbucket.org</span><br></pre></td></tr></table></figure><p>在CMD终端中设置在全局Git环境中，长期存储密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global credential.helper store</span><br></pre></td></tr></table></figure><blockquote><p>其他设置密码方式记住密码（默认15分钟）：<code>git config --global credential.helper cache</code>自定义存储时间：<code>git config credential.helper &#39;cache --timeout=3600&#39;</code></p></blockquote><h3 id="SSH协议推送"><a href="#SSH协议推送" class="headerlink" title="SSH协议推送"></a>SSH协议推送</h3><p>如果原来的推送地址协议是HTTPS，可以通过换成SSH协议，在远程仓库添加SSH Key来实现推送时免账户密码输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote -v             // 查看远程地址</span><br><span class="line">&gt; git remote rm origin      // 删除原有的推送地址</span><br><span class="line">&gt; git remote add origin git@github.com:&lt;用户名&gt;/版本库名</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote -v</span><br><span class="line">&gt; git remote set-url origin git@github.com:&lt;用户名&gt;/版本库名</span><br></pre></td></tr></table></figure><p>执行推送。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git push -u origin master</span><br></pre></td></tr></table></figure></p><p>发现提示权限不够。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;bitbucket.org (104.192.143.1)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:zzXQOXSRBEiUtuE8AikJYKwbHaxvSc0ojez9YXaGp1A.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;bitbucket.org,104.192.143.1&apos; (RSA) to the list of kn</span><br><span class="line">own hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></p><p>需要在本地创建该帐号的RSA Key。可以参考以下两篇文章：<a href="/2018/03/11/Windows下配置SSH连接Github/" title="Windows下配置SSH连接Github">Windows下配置SSH连接Github</a><a href="/2018/03/11/Git如何在本地生成多个SSH-key/" title="Git如何在本地生成多个SSH key">Git如何在本地生成多个SSH key</a></p><p>然后再执行推送。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git push -u origin master</span><br></pre></td></tr></table></figure></p><p>就可以推送成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git如何在本地生成多个ssh key</title>
      <link href="/2018/03/11/Git%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AASSH-key/"/>
      <url>/2018/03/11/Git%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AASSH-key/</url>
      
        <content type="html"><![CDATA[<p>在本地上传Git项目到远程时，本地需要对应的Git账户信息和允许连接的SSH key信息，远程才会允许上传。</p><a id="more"></a><p><a href="">Windows下配置SSH连接Github</a>介绍了如何生成SSH key。但当遇到需要有多个Git账户信息时怎么办呢，如果删除密钥重新创建，那每次切换账户时都要重复这样的操作，太过繁琐。</p><p>这个问题我们可以通过在<code>~/.ssh</code>目录下增加<code>config</code>文件来解决。</p><h3 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h3><p>生成SSH key，并指定文件名，避免覆盖原有的默认<code>id_rsa</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.another -C &lt;Git注册邮箱&gt;</span><br></pre></td></tr></table></figure><blockquote><p>windows用户打开Git Bash来执行ssh-keygen命令。</p></blockquote><h3 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h3><p>在<code>~/.ssh</code>下添加config文件，如果已经存在，就直接打开修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch ~/.ssh/config   // 创建</span><br></pre></td></tr></table></figure><p>在config文件中添加如下信息。其中Host后面添加远程Git仓库域名，IdentityFile填写对应的id_rsa文件，User添加Git用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa.another</span><br><span class="line">    User anotherUser</span><br></pre></td></tr></table></figure><h3 id="上传SSH-key"><a href="#上传SSH-key" class="headerlink" title="上传SSH key"></a>上传SSH key</h3><p>在远程Git账号中添加SSH key，将id_rsa.another.pub中的内容全部粘贴进去。</p><blockquote><p>pub信息一般以ssh-rsa开头</p></blockquote><h3 id="测试SSH-key"><a href="#测试SSH-key" class="headerlink" title="测试SSH key"></a>测试SSH key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.com  // 或者其他域名地址</span><br></pre></td></tr></table></figure><p>弹出成功信息，则表示SSH key添加成功，接下来就可以推送代码到远程了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows下配置SSH连接Github</title>
      <link href="/2018/03/11/Windows%E4%B8%8B%E9%85%8D%E7%BD%AESSH%E8%BF%9E%E6%8E%A5Github/"/>
      <url>/2018/03/11/Windows%E4%B8%8B%E9%85%8D%E7%BD%AESSH%E8%BF%9E%E6%8E%A5Github/</url>
      
        <content type="html"><![CDATA[<p>当使用git协议推送本地代码到远程时，需要配置ssh连接到GitHub。</p><a id="more"></a><h2 id="设置账户"><a href="#设置账户" class="headerlink" title="设置账户"></a>设置账户</h2><p>打开系统cmd。设置Git的user name和email。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global user.name &quot;username&quot;</span><br><span class="line">&gt; git config --global user.email &quot;username@domain.com&quot;</span><br></pre></td></tr></table></figure><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><ul><li>查看ssh密钥</li></ul><p>查看是否已经有了ssh密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; C:</span><br><span class="line">&gt; cd %USERPROFILE%/.ssh</span><br></pre></td></tr></table></figure><p>默认.ssh文件夹会在用户文件夹中生成。可以前往该路径查看。如果没有该文件夹，终端会提示<code>系统找不到指定的路径</code>,有的话可以备份删除。</p><blockquote><p>%USERPROFILE%是环境变量，表示当前用户文件夹路径。</p></blockquote><blockquote><p>因为%USERPROFILE%一般在C盘，从其他盘无法直接cd到该路径，所以需要先切换到c盘。</p></blockquote><ul><li>生成密钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh-keygen -t rsa -C &quot;username@domain.com&quot;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;username@domain.com&quot; -f %USERPROFILE%/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</span><br></pre></td></tr></table></figure><p>产生如下交互提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/username/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/c/Users/username/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/username/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:ggjGi2UqwYTJR9TP6fdpqsY+COeMdeTPL+IW0mo4eUI username@domain.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|oooo.            |</span><br><span class="line">|*. . .           |</span><br><span class="line">|o++   o .        |</span><br><span class="line">|o*.. . =         |</span><br><span class="line">|+.. . * S        |</span><br><span class="line">|.  E + B .       |</span><br><span class="line">|  . X * = . .    |</span><br><span class="line">|   * B * + +     |</span><br><span class="line">|    = =++.=.     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>命令生成两个文件，默认名称是id_rsa和id_rsa.pub。复制id_rsa.pub中的内容到远程GitHub账号中就行了。</p><blockquote><p>默认下，cmd无法识别ssh-keygen命令。可以打开git bash 执行上述命令。</p></blockquote><blockquote><p>如何找到<a href="http://github.com上的ssh设置：右上角图标（view" target="_blank" rel="noopener">http://github.com上的ssh设置：右上角图标（view</a> profile and more）=》Settings =》 SSH and GPG keys，在Key输入框中输入公钥。公钥内容形如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD2cauWf8lNjbED9RvLBWoEXB3Lq5NRLWqVYSaFcTmZ1Qsak2LdR/9bkdTVMsTyqVxnB+bDMlVJlvPP6Zv5dDwEdcdytALUGCSdOXAmRtgxHZPEnKl8Hyl5wZdSNi0mwXYbjpUZ7HEw3vU8K/5whVVCbIzkqnlLAs9nXdORNkidOZRnyt+ETQzU/F1KVUb9HoMbB1Cw0zLvWTRIOHRXa2mKjNHS7W9HJiPEWQaeEXwh1CoredCxs0K7+KBfMkdgNYnDudtz2/AmH7qHnaVsdYNkg1V4XvWJ8Yn7Pkw1SpvTkaXXCiyA5wsPGgLFWSB+dgNroGwqw4X96/ZUfFHDtD/t yanyinhong@baidu.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于erlang-mysql-driver timeout的bug分析</title>
      <link href="/2018/03/10/timeout%E7%9A%84bug%E5%88%86%E6%9E%90/"/>
      <url>/2018/03/10/timeout%E7%9A%84bug%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们游戏之前使用的是erlang-mysql-driver来连接数据库，经常会碰到一些timeout和一条纪录被重复插入多次的bug，后面把erlang-mysql-driver替换成emysql就没有问题了。研究了下erlang-mysql-driver的源代码才知道具体的问题出在哪里，下面就简单的介绍下这个问题，同时介绍下emysql是如何避免这个问题的</p></blockquote><h4 id="erlang-mysql-driver-用法"><a href="#erlang-mysql-driver-用法" class="headerlink" title="erlang-mysql-driver 用法"></a>erlang-mysql-driver 用法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql:start_link(DB, Pool, Server, Port, User, Passwd, DBName, <span class="keyword">fun</span> mysql_log/<span class="number">4</span>, utf8),</span><br><span class="line">[mysql:connect(DB, Pool, Server, Port, User, Passwd, DBName, utf8, <span class="literal">true</span>, <span class="literal">true</span>) </span><br><span class="line">|| _ &lt;- lists:seq(<span class="number">1</span>, PoolCount)]</span><br></pre></td></tr></table></figure><p>使用erlang-mysql-driver的时候首先要用mysql:start_link来建立一个连接池，然后再自己调用mysql:connect来建立多个连接。对应的erlang-mysql-driver库里面会创建一个名为DB的连接池gen_server，然后再建立多个mysql数据库的连接，每个连接会有一个进程来接管，并把这些进程和连接信息放入连接池gen_server中。按道理我们建立了多个数据库的连接，在进行数据库操作的时候应该能够并发访问数据库的，确实erlang-mysql-driver实现也是多进程访问数据库的，但是由于连接池gen_server的单点瓶颈，会导致一些事实上成功的操作被认为是失败的。</p><h4 id="erlang-mysql-driver-的sql执行过程"><a href="#erlang-mysql-driver-的sql执行过程" class="headerlink" title="erlang-mysql-driver 的sql执行过程"></a>erlang-mysql-driver 的sql执行过程</h4><p>在我们执行一个mysql:execute的函数的时候，具体的执行过程如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% mysql.erl 文件中的代码</span></span><br><span class="line"><span class="function"><span class="title">execute</span><span class="params">(SvrName, PoolId, Name, Params, Timeout)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">case</span> get(?STATE_VAR) <span class="keyword">of</span></span><br><span class="line">    undefined -&gt;</span><br><span class="line">      call_server(SvrName, &#123;execute, SvrName, PoolId, Name, Params&#125;, Timeout);</span><br><span class="line">    State -&gt;</span><br><span class="line">      <span class="keyword">case</span> mysql_conn:execute_local(SvrName, State, Name, Params) <span class="keyword">of</span></span><br><span class="line">        &#123;ok, Res, NewState&#125; -&gt;</span><br><span class="line">          put(?STATE_VAR, NewState),</span><br><span class="line">          Res;</span><br><span class="line">        Err -&gt;</span><br><span class="line">          Err</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">handle_call</span><span class="params">(&#123;execute, SvrName, PoolId, Name, Params&#125;, From, State)</span> -&gt;</span></span><br><span class="line">  with_next_conn(PoolId, State,</span><br><span class="line">    <span class="keyword">fun</span>(Conn, State1) -&gt;</span><br><span class="line">      <span class="keyword">case</span> gb_trees:lookup(Name, State1#state.prepares) <span class="keyword">of</span></span><br><span class="line">        none -&gt;</span><br><span class="line">          &#123;reply, &#123;error, &#123;no_such_statement, Name&#125;&#125;, State1&#125;;</span><br><span class="line">        &#123;value, &#123;_Stmt, Version&#125;&#125; -&gt;</span><br><span class="line">          mysql_conn:execute(SvrName, Conn#conn.pid, Name,</span><br><span class="line">            Version, Params, From),</span><br><span class="line">          &#123;noreply, State1&#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% mysql_conn的代码</span></span><br><span class="line"><span class="function"><span class="title">execute</span><span class="params">(SvrName, Pid, Name, Version, Params, From, Timeout)</span> -&gt;</span></span><br><span class="line">    send_msg(Pid, &#123;execute, SvrName, Name, Version, Params, From&#125;, From, Timeout).</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(State)</span> -&gt;</span></span><br><span class="line">    RecvPid = State#state.recv_pid,</span><br><span class="line">    LogFun = State#state.log_fun,</span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">    ....</span><br><span class="line">    &#123;execute, SvrName, Name, Version, Params, From&#125; -&gt;</span><br><span class="line">        State1 =</span><br><span class="line">        <span class="keyword">case</span> do_execute(State, SvrName, Name, Params, Version) <span class="keyword">of</span></span><br><span class="line">            &#123;error, _&#125; = Err -&gt;</span><br><span class="line">            send_reply(From, Err),</span><br><span class="line">            State;</span><br><span class="line">            &#123;ok, Result, NewState&#125; -&gt;</span><br><span class="line">            send_reply(From, Result),</span><br><span class="line">            NewState</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        loop(State1);</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="title">send_reply</span><span class="params">(GenSrvFrom, Res)</span> -&gt;</span></span><br><span class="line">    gen_server:reply(GenSrvFrom, Res).</span><br></pre></td></tr></table></figure><p>mysql:execute在执行的过程中首先调用名为DB的连接池gen_server，该gen_server会执行with_next_conn选择一个持有数据库连接的进程（进程x），然后通过mysql_conn中的send_msg函数向进程x发送需要执行的sql语句，sql语句发送成功后gen_server会返回noreply，这时调用mysql:execute的进程会一直阻塞，直到进程x执行gen_server:reply来返回结果。</p><p>通过上面的执行过程我们可以知道以下两点：</p><ol><li>mysql:execute的timeout为gen_server:call调用的timeout时间</li><li>连接池gen_server只要把sql语句发送给进程x，进程x就会去执行（可能执行的比较慢，但是已经加入进程x的信箱）</li></ol><p>现在我们可以知道mysql:execute返回timeout的情况有两种：</p><ol><li>连接池gen_server太过繁忙，mysql:execute的请求还没执行，mysql:execute就已经timeout</li><li>连接池gen_server已经成功执行请求，返回noreply，mysql:execute的执行进程一直在等待进程x的返回，而进程x一直不返回，这时mysql:execute触发timeout</li></ol><p>不管是上述那种timeout情况，只要是mysql数据库没有问题，sql语句都能够执行成功（可能会执行的慢点）。mysql:execute的调用者在发现mysql:execute返回timeout的情况下，肯定会认为sql语句没有执行成功，这时候会重新调用mysql:execute，导致一条相同的记录被多次插入。</p><h4 id="emysql-的sql执行过程"><a href="#emysql-的sql执行过程" class="headerlink" title="emysql 的sql执行过程"></a>emysql 的sql执行过程</h4><p>emysql的连接池也会有一个gen_server进行管理，emysql:execute在执行的过程中是去向该gen_server申请一个可用的连接，然后再spawn一个进程来执行sql语句，而不是委托该gen_server来执行sql语句，从而避免了这个timeout的bug。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过上面的分析，我觉得erlang-mysql-driver会写出这个bug的原因主要是对gen_server noreply的误用。所以以后如果有需要用noreply的话，要注意避免该问题。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang-mysql-driver </tag>
            
            <tag> emysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency-guide:进程</title>
      <link href="/2017/10/15/efficiency-guide-%E8%BF%9B%E7%A8%8B/"/>
      <url>/2017/10/15/efficiency-guide-%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍进程的堆大小的优化，以及模块内的常量池，如果之前没有看过的，值得一看。</p></blockquote><h4 id="创建一个进程"><a href="#创建一个进程" class="headerlink" title="创建一个进程"></a>创建一个进程</h4><p>与操作系统中的线程和进程相比，Erlang进程是轻量级的。新创建的Erlang进程在非SMP和非HiPE模式下中使用309个字的内存。（SMP和HiPE支持会增加一些内存）进程占用的内存大小可以通过以下方式得到：</p><blockquote><p>Erlang (BEAM) emulator version 5.6 [async-threads:0] [kernel-poll:false]Eshell V5.6  (abort with ^G)1&gt; Fun = fun() -&gt; receive after infinity -&gt; ok end end.</p></blockquote><p>#Fun&lt;…&gt;2&gt; {_,Bytes} = process_info(spawn(Fun), memory).{memory,1232}3&gt; Bytes div erlang:system_info(wordsize).309</p><p>此大小包括堆区域（包括堆栈）的233个字。垃圾收集器根据需要增加堆。进程的主（外）循环必须是尾递归的。否则，堆栈会一直增长直到进程终止。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 不要这样做</span></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span> </span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">     &#123;sys, Msg&#125; -&gt;</span><br><span class="line">         handle_sys_msg(Msg),</span><br><span class="line">         loop();</span><br><span class="line">     &#123;From, Msg&#125; -&gt;</span><br><span class="line">          Reply = handle_msg(Msg),</span><br><span class="line">          From ! Reply,</span><br><span class="line">          loop()</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  io:format(<span class="string">"Message is processed~n"</span>, []).</span><br></pre></td></tr></table></figure></p><p>对io:format/2的调用永远不会被执行，但是每次loop/0被递归调用时，返回地址仍然被推送到堆栈。该函数的正确尾递归版本如下所示：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span> </span><br><span class="line">   <span class="keyword">receive</span></span><br><span class="line">      &#123;sys, Msg&#125; -&gt;</span><br><span class="line">         handle_sys_msg(Msg),</span><br><span class="line">         loop();</span><br><span class="line">      &#123;From, Msg&#125; -&gt;</span><br><span class="line">         Reply = handle_msg(Msg),</span><br><span class="line">         From ! Reply,</span><br><span class="line">         loop()</span><br><span class="line"> <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><h5 id="初始堆大小"><a href="#初始堆大小" class="headerlink" title="初始堆大小"></a>初始堆大小</h5><p>对于具有数十万甚至数百万个进程的Erlang系统，默认的初始堆大小为233个字节是相当保守的。垃圾收集器根据需要增加和收缩堆。在使用相对较少进程的系统中，可以通过使用erl的+h选项或使用spawn_opt/4的min_heap_size选项在每个进程的基础上增加最小堆大小来提高性能。主要有以下两个好处：</p><ul><li>虽然垃圾收集器可以逐步增长堆的大小，但这比生成进程时直接建立更大的堆来的低效。</li><li>垃圾收集器还可以收缩堆，如果它比存储在其上的数据量大得多;设置最小堆大小可以防止这种情况发生。<blockquote><p>注意：由于虚拟机可以使用更多的内存，则内存回收的次数将减少，因此Binary可以被保存的更久才进行内存回收</p></blockquote></li></ul><p>在具有许多进程的系统中，运行时间很短的计算任务可以生成具有更大最小堆大小的新进程。当进程完成后，它将计算结果发送到另一个进程并终止。如果正确计算最小堆大小，则该过程可能根本不需要执行任何垃圾回收。<strong>如果没有进行适当的测量，则不进行此优化。</strong></p><h4 id="进程消息"><a href="#进程消息" class="headerlink" title="进程消息"></a>进程消息</h4><p>除了在同一个Erlang节点上的refc binary，Erlang进程之间的所有消息都会被复制。当消息发送到另一个Erlang节点上的进程时，它首先被编码为Erlang外部格式，然后通过TCP/IP套接字发送。接收的Erlang节点解码消息并将其分发到相应的进程。</p><h5 id="常量池（Constant-Pool）"><a href="#常量池（Constant-Pool）" class="headerlink" title="常量池（Constant Pool）"></a>常量池（Constant Pool）</h5><p>Erlang常量（也称为文字(literals)）保存在常量池中;每个加载的模块都有自己的池。以下函数不会在每次调用时构建元组（仅在下次运行垃圾回收时丢弃它），因为元组位于模块的常量池中：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">days_in_month</span><span class="params">(M)</span> -&gt;</span></span><br><span class="line">    element(M, &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;).</span><br></pre></td></tr></table></figure></p><p>但是如果一个常量被发送到另一个进程（或存储在一个Ets表中），那么它将被复制。原因是运行时系统必须能够跟踪所有对常量的引用，以正确卸载包含常量的代码。（当代码被卸载时，这些常量被复制到引用它们的进程的堆中。）复制常量可能在将来的Erlang/OTP版本中被删除。</p><h5 id="共享丢失"><a href="#共享丢失" class="headerlink" title="共享丢失"></a>共享丢失</h5><p>在以下情况下，共享不会保留：</p><ul><li>当一个共享变量被发送到另一个进程 </li><li>当一个共享变量作为spawn调用中的初始进程参数传递时</li><li>当共享变量被存储在Ets表中时</li></ul><p>这是一个优化。大多数应用不发送带有共享变量的消息。以下示例显示如何创建共享变量：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    kilo_byte(<span class="number">10</span>, [<span class="number">42</span>]).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">(<span class="number">0</span>, Acc)</span> -&gt;</span></span><br><span class="line">    Acc;</span><br><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">(N, Acc)</span> -&gt;</span></span><br><span class="line">    kilo_byte(N-<span class="number">1</span>, [Acc|Acc]).</span><br></pre></td></tr></table></figure></p><p>kilo_byte/1创建一个嵌套列表。如果调用list_to_binary/1，则可以将嵌套列表转换为1024字节的Binary：</p><blockquote><p>1&gt; byte_size(list_to_binary(efficiency_guide:kilo_byte())).1024</p></blockquote><p>使用erts_debug:size/1 BIF，可以看出嵌套列表只需要22个字的堆空间：</p><blockquote><p>2&gt; erts_debug:size(efficiency_guide:kilo_byte()).22</p></blockquote><p>使用erts_debug:flat_size/1 BIF，可以忽略共享来计算嵌套列表的大小。当它被发送到另一个进程或存储在Ets表中时，它将成为列表的实际大小：</p><blockquote><p>3&gt; erts_debug:flat_size(efficiency_guide:kilo_byte()).4094</p></blockquote><p>将数据插入到Ets表中，则可以确认共享丢失：</p><blockquote><p>4&gt; T = ets:new(tab, []).</p></blockquote><p>#Ref&lt;0.1662103692.2407923716.214181&gt;5&gt; ets:insert(T, {key,efficiency_guide:kilo_byte()}).true6&gt; erts_debug:size(element(2, hd(ets:lookup(T, key)))).40947&gt; erts_debug:flat_size(element(2, hd(ets:lookup(T, key)))).4094</p><p>当数据被插入到Ets表时，erts_debug:size/1和erts_debug:flat_size/1返回相同的值。共享已经丢失。在未来的Erlang/OTP版本中，可能会实现一种方式（可选）保留共享。</p><h4 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h4><p>SMP模式（在R11B中引入）通过运行多个Erlang调度器线程（通常与内核数相同）来利用多核计算机的性能。每个调度器线程以与非SMP模式中的Erlang调度器相同的方式调度Erlang进程。</p><p>为了通过使用SMP模式获得更多的性能提升，应用程序<strong>大多数时候都必须有多个可运行的Erlang进程</strong>。否则，Erlang虚拟机仍然只能运行一个Erlang进程，但是仍然必须增加锁的开销。尽管Erlang/OTP尝试尽可能减少锁开销，但它永远不会变为零。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency-guide:表和数据库</title>
      <link href="/2017/10/15/efficiency-guide-%E8%A1%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2017/10/15/efficiency-guide-%E8%A1%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文件主要讲一些简单的Erlang数据库注意要点，干货好像没那么多，可以快速浏览下。</p></blockquote><h4 id="Ets、Dets、Mnesia"><a href="#Ets、Dets、Mnesia" class="headerlink" title="Ets、Dets、Mnesia"></a>Ets、Dets、Mnesia</h4><p>每个Ets的例子都有一个与之对应的Mnesia的例子。一般来说，所有Ets示例也适用于Dets表。</p><h5 id="Select-Match操作"><a href="#Select-Match操作" class="headerlink" title="Select/Match操作"></a>Select/Match操作</h5><p>在Ets和Mnesia表上的Select/Match操作是非常低效的。他们通常需要扫描整个表。需要优化数据的结构来减少对Select/Match操作的使用。但是，如果确实需要Select/Match操作，它仍然比使用tab2list更有效率。函数ets:select/2和mnesia:select/3是优于ets:match/2、ets:match_object/2和mnesia:match_object/3的。在某些情况下，Select/Match操作是不需要扫描整张表的。例如，在ordered_set的表中搜索，或者搜索的Mnesia表的字段是有建立索引的。当创建要在Select/Match操作中使用的记录时，如果希望大多数字段具有值“_”。最简单和最快捷的方法如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#person&#123;age = <span class="number">42</span>, _ = '_'&#125;.</span><br></pre></td></tr></table></figure></p><h5 id="删除一个元素"><a href="#删除一个元素" class="headerlink" title="删除一个元素"></a>删除一个元素</h5><p>如果元素不存在于表中，则删除操作被认为是成功的。因此，在删除之前，所有尝试检查元素是否存在于Ets / Mnesia表中都是不必要的。以下是Ets表的示例：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 直接删就可以了</span></span><br><span class="line">...</span><br><span class="line">ets:delete(Tab, Key),</span><br><span class="line">...</span><br><span class="line"><span class="comment">%% 这样做，效率低而且没有意义</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> ets:lookup(Tab, Key) <span class="keyword">of</span></span><br><span class="line">    [] -&gt;</span><br><span class="line">        ok;</span><br><span class="line">    [_|_] -&gt;</span><br><span class="line">        ets:delete(Tab, Key)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h5 id="非持久数据库存储"><a href="#非持久数据库存储" class="headerlink" title="非持久数据库存储"></a>非持久数据库存储</h5><p>对于非持久数据库存储，优先考虑Ets表，而不是Mnesia local_content表。与Ets写入相比，即使是Mnesia dirty_write操作具有常量的开销。 Mnesia也必须检查表是否被复制或具有索引，这涉及每个dirty_write至少一次Ets查找。因此，Ets总是比Mnesia写的快。</p><h5 id="tab2list"><a href="#tab2list" class="headerlink" title="tab2list"></a>tab2list</h5><p>简单的说tab2list肯定不要用，除非是需要返回所有的Ets数据。如果需要选择一部分的数据可以用Select/Match操作，因为获取Ets的数据是需要拷贝的，tab2list返回所有的数据，需要大量的拷贝，效率非常低。</p><h5 id="ordered-set表"><a href="#ordered-set表" class="headerlink" title="ordered_set表"></a>ordered_set表</h5><p>ordered_set仅保证按Key的顺序处理对象。即使Key不包含在结果中，也可以按Key顺序显示ets:select/2等函数的结果（还有select,match_object,foldl,first,next等函数）。</p><h4 id="优化掉Select-Match操作"><a href="#优化掉Select-Match操作" class="headerlink" title="优化掉Select/Match操作"></a>优化掉Select/Match操作</h4><h5 id="Ets"><a href="#Ets" class="headerlink" title="Ets"></a>Ets</h5><p>由于Ets用Key来Lookup获取数据是可以在常量的时间内完成的（使用哈希和树结构），所以如果要优化掉Select操作，可以再建一个要Select的字段到先前的Ets的Key的新的Ets表就可以了，这样通过两次lookup就可以取得想要的数据了。</p><h5 id="Mnesia"><a href="#Mnesia" class="headerlink" title="Mnesia"></a>Mnesia</h5><p>在Mnesia中只要多建立一些想要Select字段的索引就可以，这样就不用扫描整张表了。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency-guide:函数</title>
      <link href="/2017/10/15/efficiency-guide-%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/15/efficiency-guide-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章主要介绍函数的模式匹配和调用，函数的模式匹配优化还是有必要了解一下的。</p></blockquote><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>在函数的头部以及case和receive子句中的模式匹配都会被编译器优化。但是有一些例外，重新排列匹配子句没有什么好处。Binary的模式匹配就是一个例外。编译器不重新排列与Binary相匹配的子句。最后放置与空Binary匹配的子句通常比放置在第一个的子句执行的更快。下面是另一种例外的例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>.</span><br></pre></td></tr></table></figure></p><p>问题在于带有变量Int的子句。由于变量可以匹配任何内容，包括原子four、five、six，后续的子句也匹配，所以编译器必须生成次优代码，执行如下：</p><ul><li>首先，将输入值与one、two、three（使用二分查找，即使有很多值也非常有效）来选择要执行的前三个子句中的哪一个（如果有的话）。 </li><li>如果前三个子句中没有一个匹配，则第四个子句匹配变量的话会始终匹配。 </li><li>如果测试is_integer(Int)成功，则执行第四个子句。</li><li>如果测试失败，则将输入值与four、five、six进行比较，并选择适当的子句。 （如果没有匹配成功，则会产生一个function_clause异常。）</li></ul><p>如果想让匹配代码更加高效，则上面的代码可以重写成：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int.</span><br></pre></td></tr></table></figure></p><p>或者:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>.</span><br></pre></td></tr></table></figure></p><p>还有下面的例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(_Map, [], Ys)</span> -&gt;</span></span><br><span class="line">    Ys;</span><br><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(_Map, Xs, [] )</span> -&gt;</span></span><br><span class="line">    Xs;</span><br><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(Map, [X|Xs], [Y|Ys])</span> -&gt;</span></span><br><span class="line">    [Map(X, Y)|map_pairs1(Map, Xs, Ys)].</span><br></pre></td></tr></table></figure></p><p>第一个参数没有问题。它是在所有匹配子句都有的一个变量。有问题的是第二个参数在第二个匹配子句的变量Xs。因为Xs变量可以匹配任何东西，所以编译器不能重新排列匹配子句，而是必须按照上述代码的顺序生成与它们匹配的代码。 如果函数按如下方式重写，编译器就可以自由地重新排列子句：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(_Map, [], Ys)</span> -&gt;</span></span><br><span class="line">    Ys;</span><br><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(_Map, [_|_]=Xs, [] )</span> -&gt;</span></span><br><span class="line">    Xs;</span><br><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(Map, [X|Xs], [Y|Ys])</span> -&gt;</span></span><br><span class="line">    [Map(X, Y)|map_pairs2(Map, Xs, Ys)].</span><br></pre></td></tr></table></figure></p><p>编译器将生成与此类似的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">explicit_map_pairs</span><span class="params">(Map, Xs0, Ys0)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Xs0 <span class="keyword">of</span></span><br><span class="line">    [X|Xs] -&gt;</span><br><span class="line">        <span class="keyword">case</span> Ys0 <span class="keyword">of</span></span><br><span class="line">        [Y|Ys] -&gt;</span><br><span class="line">            [Map(X, Y)|explicit_map_pairs(Map, Xs, Ys)];</span><br><span class="line">        [] -&gt;</span><br><span class="line">            Xs0</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">    [] -&gt;</span><br><span class="line">        Ys0</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>这可能是最常见的情况，输入列表不是空或非常短。（另一个优点是Dialyzer可以为Xs变量推导出更准确的类型。）</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>以下是对不同函数调用类型的代价的粗略的估计。它是在Solaris/Sparc上运行测试出来的基准数据：</p><ul><li>调用本地或外部函数（foo()，m:foo()）是最快的。</li><li>调用或者apply调用一个匿名函数（Fun(),apply(Fun, [])）的大概时间花费差不多是调用一个本地函数的三倍。</li><li>Apply调用一个被导出的函数(Mod:Name(),apply(Mod, Name, [])),大概的时间花费差不多是调用匿名函数的两倍，也就是本地函数调用的六倍</li></ul><h5 id="注释和实现细节"><a href="#注释和实现细节" class="headerlink" title="注释和实现细节"></a>注释和实现细节</h5><p>调用和apply一个匿名函数不涉及任何的哈希表查找。一个匿名函数变量包含一个（间接的）指向匿名函数实现的函数的指针。apply/3必须在哈希表中查找执行的函数的代码。因此，总是比直接调用或匿名函数调用来的慢。它不再重要（从性能的角度来看）是否写成：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module:Function(Arg1, Arg2)</span><br></pre></td></tr></table></figure></p><p>或者：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">apply</span><span class="params">(Module, Function, [Arg1,Arg2])</span></span></span><br></pre></td></tr></table></figure></p><p>编译器会将后一种代码重写为前一种的方式。以下代码会稍微慢一点，因为参数的个数在编译时是未知的。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">apply</span><span class="params">(Module, Function, Arguments)</span></span></span><br></pre></td></tr></table></figure></p><h4 id="递归的内存使用"><a href="#递归的内存使用" class="headerlink" title="递归的内存使用"></a>递归的内存使用</h4><p>当编写递归函数时，最好使用尾递归的方式，以便它们可以在恒定的内存空间中执行：最好这样写：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">list_length</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    list_length(List, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([], AccLen)</span> -&gt;</span> </span><br><span class="line">    AccLen; <span class="comment">% Base case</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([_|Tail], AccLen)</span> -&gt;</span></span><br><span class="line">    list_length(Tail, AccLen + <span class="number">1</span>). <span class="comment">% Tail-recursive</span></span><br></pre></td></tr></table></figure></p><p>而不要这样写：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([])</span> -&gt;</span></span><br><span class="line">    <span class="number">0</span>. <span class="comment">% Base case</span></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([_ | Tail])</span> -&gt;</span></span><br><span class="line">    list_length(Tail) + <span class="number">1</span>. <span class="comment">% Not tail-recursive</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency-guide:List处理</title>
      <link href="/2017/10/14/efficiency-guide-List%E5%A4%84%E7%90%86/"/>
      <url>/2017/10/14/efficiency-guide-List%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于列表的处理，大多懂得Erlang的同学都差不多知道列表要怎么用，但是关于列表嵌套和拉伸的优化点还是值得一看的。</p></blockquote><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><p>不能使用如下代码创建列表，因为每次迭代都会创建一个新的列表:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(N)</span> -&gt;</span></span><br><span class="line">    bad_fib(N, <span class="number">0</span>, <span class="number">1</span>, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(<span class="number">0</span>, _Current, _Next, Fibs)</span> -&gt;</span></span><br><span class="line">    Fibs;</span><br><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(N, Current, Next, Fibs)</span> -&gt;</span> </span><br><span class="line">    bad_fib(N - <span class="number">1</span>, Next, Current + Next, Fibs ++ [Current]).</span><br></pre></td></tr></table></figure></p><p>应该使用如下的代码创建列表:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(N)</span> -&gt;</span></span><br><span class="line">    tail_recursive_fib(N, <span class="number">0</span>, <span class="number">1</span>, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(<span class="number">0</span>, _Current, _Next, Fibs)</span> -&gt;</span></span><br><span class="line">    lists:reverse(Fibs);</span><br><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(N, Current, Next, Fibs)</span> -&gt;</span> </span><br><span class="line">    tail_recursive_fib(N - <span class="number">1</span>, Next, Current + Next, [Current|Fibs]).</span><br></pre></td></tr></table></figure></p><h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><p>列表推导现在仍然被认为是缓慢的。他们过去常常使用funs来实现，而funs过去很慢。以下的列表推导：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Expr(E) || E &lt;- List]</span><br></pre></td></tr></table></figure></p><p>会被转换成本地的函数实现：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">'lc^<span class="number">0</span>'([E|Tail], Expr) -&gt;</span><br><span class="line">    [Expr(E)|'lc^<span class="number">0</span>'(Tail, Expr)];</span><br><span class="line">'lc^<span class="number">0</span>'([], _Expr) -&gt; [].</span><br></pre></td></tr></table></figure></p><p>如果列表推导的结果不会被使用，则不会构造列表。如下的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[io:put_chars(E) || E &lt;- List],</span><br><span class="line">ok.</span><br><span class="line"><span class="comment">%% 或者</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> Var <span class="keyword">of</span></span><br><span class="line">    ... -&gt;</span><br><span class="line">        [io:put_chars(E) || E &lt;- List];</span><br><span class="line">    ... -&gt;</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="function"><span class="title">some_function</span><span class="params">(...)</span>,</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><p>上述的代码不会构造列表，所以转换成以下的本地函数实现：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'lc^<span class="number">0</span>'([E|Tail], Expr) -&gt;</span><br><span class="line">    Expr(E),</span><br><span class="line">    'lc^<span class="number">0</span>'(Tail, Expr);</span><br><span class="line">'lc^<span class="number">0</span>'([], _Expr) -&gt; [].</span><br></pre></td></tr></table></figure></p><p>编译器知道分配给’_’意味着该值不会被使用。因此，以下示例中的代码也将进行优化：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = [io:put_chars(E) || E &lt;- List],</span><br><span class="line">ok.</span><br></pre></td></tr></table></figure></p><h4 id="嵌套和拉伸列表-Deep-and-Flat-Lists"><a href="#嵌套和拉伸列表-Deep-and-Flat-Lists" class="headerlink" title="嵌套和拉伸列表(Deep and Flat Lists)"></a>嵌套和拉伸列表(Deep and Flat Lists)</h4><p>lists:flatten/1比++操作更加的低效，在下述的情况中，可以很简单的避免使用lists:flatten/1:</p><ul><li>向端口发送数据时。端口了解嵌套列表，所以没有理由在将列表发送到端口之前拉伸列表。</li><li>当调用接受嵌套列表的BIF时，例如list_to_binary/1或iolist_to_binary/1。</li><li>当知道列表只有一级嵌套时，可以使用list:append/1。</li></ul><h5 id="端口例子"><a href="#端口例子" class="headerlink" title="端口例子"></a>端口例子</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, DeepList)</span> %% DO</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, lists:flatten(DeepList))</span> %% DO NOT</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><p>通常会这样向端口发送一个以0为结尾的字符串：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">TerminatedStr = String ++ [<span class="number">0</span>], <span class="comment">% String="foo" =&gt; [$f, $o, $o, 0]</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, TerminatedStr)</span></span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><p>上述效率比较低，应该用下述方式代替：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">TerminatedStr = [String, <span class="number">0</span>], <span class="comment">% String="foo" =&gt; [[$f, $o, $o], 0]</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, TerminatedStr)</span> </span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><h5 id="Append例子"><a href="#Append例子" class="headerlink" title="Append例子"></a>Append例子</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lists:append([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]). <span class="comment">%% DO</span></span><br><span class="line"></span><br><span class="line">lists:flatten([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]). <span class="comment">%% DO NOT</span></span><br></pre></td></tr></table></figure><h4 id="递归列表函数"><a href="#递归列表函数" class="headerlink" title="递归列表函数"></a>递归列表函数</h4><p>普通递归列表函数和尾部递归函数在结束的时候反转列表之间通常没有太大差异。因此，专注于编写好看的代码，并忘记了列表功能的性能。在代码的性能关键部分（仅在那里），用比较高效的写法就行了。</p><blockquote><p>这部分是关于构造列表的列表函数。不构造列表的尾递归函数运行在常量空间中，而相应的普通递归函数使用与列表长度成比例的堆栈空间。</p></blockquote><p>例如，一个将整数列表相加的函数不能写成如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">recursive_sum</span><span class="params">([H|T])</span> -&gt;</span> H+recursive_sum(T);</span><br><span class="line"><span class="function"><span class="title">recursive_sum</span><span class="params">([])</span>    -&gt;</span> <span class="number">0</span>.</span><br></pre></td></tr></table></figure></p><p>应该写成:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(L)</span> -&gt;</span> sum(L, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([H|T], Sum)</span> -&gt;</span> sum(T, Sum + H);</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([], Sum)</span>    -&gt;</span> Sum.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency-guide:Binary的构建和匹配</title>
      <link href="/2017/10/14/efficiency-guide-Binary%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8C%B9%E9%85%8D/"/>
      <url>/2017/10/14/efficiency-guide-Binary%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章非常详细的介绍了Binary是怎么样构造和匹配的，同时介绍了一些优化的技巧，没看过的一定要仔细看下。</p></blockquote><p>以下代码可以高效的构建Binary(有点奇怪，和List不一样，下面构造Binary的段落会有解释):<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">my_list_to_binary</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    my_list_to_binary(List, &lt;&lt;&gt;&gt;).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">my_list_to_binary</span><span class="params">([H|T], Acc)</span> -&gt;</span></span><br><span class="line">    my_list_to_binary(T, &lt;&lt;Acc/binary,H&gt;&gt;);</span><br><span class="line"><span class="function"><span class="title">my_list_to_binary</span><span class="params">([], Acc)</span> -&gt;</span></span><br><span class="line">    Acc.</span><br></pre></td></tr></table></figure></p><p>以下代码可以高效的匹配Binary:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">my_binary_to_list</span><span class="params">(&lt;&lt;H,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    [H|my_binary_to_list(T)];</span><br><span class="line"><span class="function"><span class="title">my_binary_to_list</span><span class="params">(&lt;&lt;&gt;&gt;)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><h4 id="Binary类型是怎么实现的"><a href="#Binary类型是怎么实现的" class="headerlink" title="Binary类型是怎么实现的?"></a>Binary类型是怎么实现的?</h4><p>Binary和Bitstring在虚拟机的内部实现是一样的。在虚拟机的源代码中都叫做Binary。Binary类型在虚拟机内部由四种Binary对象实现:</p><ul><li><p><strong>Refc Binaries</strong>Refc Binaries由两部分组成：</p><ul><li>存储在进程堆上的对象，称为ProcBin </li><li>Binary对象本身,它存储在所有进程堆之外 </li></ul><p>Binary对象可以由任意数量的进程引用任意数量的ProcBin。该对象包含一个引用计数器，用于跟踪引用数量，以便在最后一个引用消失时可以将其删除。进程中的所有ProcBin对象都是链表的一部分，因此当ProcBin消失时，垃圾回收器可以跟踪它们并减少二进制中的引用计数器。当构建的Binary大于64Byte的时候就会使用这种类型，此时进程之间发送Binary只是发送一个ProcBin。</p></li><li><strong>Heap Binaries</strong>Heap binaries是小型Binary，最多64Byte，并直接存储在进程堆中。当Heap Binary被进程垃圾回收或者是作为消息发送时，都需要被复制。垃圾收集器不需要特殊处理。</li><li><strong>Sub Binaries</strong>Sub Binaries和match contexts对象能引用refc binary和heap binary对象的部分内容。Sub Binary是由split_binary/2创建的。一个Sub Binary引用另一个Binary的部分内容（只能引用Refc和Heap Binary，不能引用另一个Sub Binary）。因此，匹配一个Binary类型是比较高效的，因为实际的Binary数据是不会被复制的。</li><li><strong>Match Context</strong>Match context和Sub binary比较类似，但是Match context专门为Binary匹配优化。（原文比较拗口，这里不做解释了，我也没太看懂）</li></ul><h4 id="构建Binary"><a href="#构建Binary" class="headerlink" title="构建Binary"></a>构建Binary</h4><p>Binary和Bitstring的append操作是被运行时系统特别优化的，只有在极少数的情况下优化是不起作用的。如下代码可以解释优化是如何起作用的:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Bin0 = &lt;&lt;<span class="number">0</span>&gt;&gt;,</span><br><span class="line">Bin1 = &lt;&lt;Bin0/binary,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt;&gt;,</span><br><span class="line">Bin2 = &lt;&lt;Bin1/binary,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&gt;&gt;,</span><br><span class="line">Bin3 = &lt;&lt;Bin2/binary,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&gt;&gt;,</span><br><span class="line">Bin4 = &lt;&lt;Bin1/binary,<span class="number">17</span>&gt;&gt;,</span><br><span class="line">&#123;Bin4,Bin3&#125;</span><br></pre></td></tr></table></figure></p><ul><li>第1行分配一个Heap Binary给Bin0变量</li><li>第2行是append操作。由于Bin0没有涉及append操作，所以创建一个新的Refc Binary，并将Bin0的内容复制到其中。Refc Binary的ProcBin部分存有Binary对象的数据大小，而Binary对象还分配了额外的空间。Binary对象的大小是Bin1或256的大小的两倍，以较大者为准。在这个例子中是256。</li><li>第3行更有意思。Bin1已被用于append操作，最后有252字节的未使用内存，因此3个新的字节会被存储在这些空闲的内存中。</li><li>第4行。和第3行一样。剩下249个字节，所以存储另外3个新字节没有问题。</li><li>第5行。有趣的事情发生。请注意，Bin4是用Bin1来append值17。Bin4将被赋值为&lt;&lt;0,1,2,3,17&gt;&gt;。Bin3将保留其价值&lt;&lt;0,1,2,3,4,5,6,7,8,9&gt;&gt;。显然，运行时系统不能将字节17写入上述的Refc Binary中，因为这会将Bin3的值更改为&lt;&lt;0,1,2,3,4,17,6,7,8,9&gt;&gt;。运行时系统知道Bin1是先前append操作的结果，所以它将Bin1的内容复制到一个新的Binary，预留额外的存储空间等等类似上面的操作。（这里没有解释为什么运行时系统知道不能写入到Bin1中，如果有兴趣的话可以阅读erl_bits.c源代码）</li></ul><h5 id="强制拷贝的情况"><a href="#强制拷贝的情况" class="headerlink" title="强制拷贝的情况"></a>强制拷贝的情况</h5><p>Binary的append操作优化要求对于Binary:只有一个ProcBin指向一个Refc Binary的Binary对象。原因是优化需要在append操作期间移动（重新分配）Binary对象，并且同时更新ProcBin中的指针。如果有多个ProcBin指向Binary对象，则无法找到并更新它们。因此，对Binary的某些操作会被做标记，以便在将来做append操作的时候知道是否要强制拷贝Binary。在大多数情况下，Binary额外分配的空间也会在这个时候也被回收掉。如果将Binary作为消息发送到其他进程或端口，则binary对象会缩小，任何进一步的append操作都会将Binary数据复制到新的Binary中。例如，在下面的代码，第3行的Bin1将会被复制：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bin1 = &lt;&lt;Bin0,...&gt;&gt;,</span><br><span class="line">PortOrPid ! Bin1,</span><br><span class="line">Bin = &lt;&lt;Bin1,...&gt;&gt;  <span class="comment">%% Bin1 will be COPIED</span></span><br></pre></td></tr></table></figure></p><p>同样的情况一样会发生，如果将Binary插入到Ets表中、使用erlangport_command/2将其发送到端口、或者将其传递给NIF中的enif_inspect_binary。匹配Binary也会导致其缩小，下一个append操作将会复制Binary数据：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bin1 = &lt;&lt;Bin0,...&gt;&gt;,</span><br><span class="line">&lt;&lt;X,Y,Z,T/binary&gt;&gt; = Bin1,</span><br><span class="line">Bin = &lt;&lt;Bin1,...&gt;&gt;  <span class="comment">%% Bin1 will be COPIED</span></span><br></pre></td></tr></table></figure></p><p>原因是match context包含直接指向二进制数据的指针。如果一个进程简单地保留Binary（在“循环数据”或进程字典中），垃圾回收器最终可以收缩这个Binary。如果只保留一个这样的Binary，则不会收缩。如果该进程后续append到已收缩的Binary中，则Binary对象将被重新分配，以使数据被加上。</p><h4 id="匹配Binary"><a href="#匹配Binary" class="headerlink" title="匹配Binary"></a>匹配Binary</h4><p>重新看下文章开头的匹配例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">my_binary_to_list</span><span class="params">(&lt;&lt;H,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    [H|my_binary_to_list(T)];</span><br><span class="line"><span class="function"><span class="title">my_binary_to_list</span><span class="params">(&lt;&lt;&gt;&gt;)</span> -&gt;</span> [].</span><br></pre></td></tr></table></figure></p><p>第一次调用my_binary_to_list/1时，会创建match context。match context指向Binary的第一个字节。匹配1个字节，并更新match context以指向Binary的第二个字节。在此时，创建一个sub binary似乎是有意义的，但是在这个特定的例子中编译器知道每次匹配后会马上调用一个函数（在这个例子中，是my_binary_to_list/1本身），这会导致要创建一个新的match context然后丢弃sub binary。因此，my_binary_to_list/1使用match context而不是使用sub binary调用自身。初始化匹配操作的指令当它看到它被传递给match context而不是sub binary时基本上什么都不做。当到达Binary的末尾并且第二个子句匹配时，match context将被简单地丢弃（在下一个垃圾回收中被移除，因为不再有任何引用）。总而言之，my_binary_to_list/1只需要创建一个match context，而不需要sub binary。注意，当遍历完整个Binary后，my_binary_to_list/1中的match context被丢弃。如果迭代在Binary结束之前停止，会发生什么？优化还会生效吗？<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;<span class="number">0</span>,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    T;</span><br><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;_,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    after_zero(T);</span><br><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    &lt;&lt;&gt;&gt;.</span><br></pre></td></tr></table></figure></p><p>答案是依然生效，编译器将在第二个子句中删除sub binary的构建：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;_,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    after_zero(T);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>但是它会生成在第一个子句中构建sub binary的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;<span class="number">0</span>,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    T;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>因此，after_zero/1将构建一个match context和一个sub binary（如果它传进一个包含0的binary）。以下代码也将进行优化：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">all_but_zeroes_to_list</span><span class="params">(Buffer, Acc, <span class="number">0</span>)</span> -&gt;</span></span><br><span class="line">    &#123;lists:reverse(Acc),Buffer&#125;;</span><br><span class="line"><span class="function"><span class="title">all_but_zeroes_to_list</span><span class="params">(&lt;&lt;<span class="number">0</span>,T/binary&gt;&gt;, Acc, Remaining)</span> -&gt;</span></span><br><span class="line">    all_but_zeroes_to_list(T, Acc, Remaining-<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="title">all_but_zeroes_to_list</span><span class="params">(&lt;&lt;Byte,T/binary&gt;&gt;, Acc, Remaining)</span> -&gt;</span></span><br><span class="line">    all_but_zeroes_to_list(T, [Byte|Acc], Remaining-<span class="number">1</span>).</span><br></pre></td></tr></table></figure></p><p>编译器将删除第二和第三个子句中的sub binary的构建，并向第一个子句添加一个指令，该指令将Buffer从match context转换成sub binary（如果Buffer已经是binary，则不执行任何操作）。在开始认为编译器可以优化任何Binary模式匹配之前，以下函数不能由编译器进行优化（至少当前是这样的）：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([H|T1], &lt;&lt;H,T2/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    non_opt_eq(T1, T2);</span><br><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([_|_], &lt;&lt;_,_/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([], &lt;&lt;&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    <span class="literal">true</span>.</span><br></pre></td></tr></table></figure></p><p>之前提到，如果编译器知道Binary不会被共享，则会延迟创建sub binary。在当前的这种情况下，编译器无法知道。很快，下面的章节将解释如何重写non_opt_eq/2，以便可以应用延迟sub binary的优化，更重要的是，还能发现你的代码是否可以优化。</p><h5 id="bin-opt-info选项"><a href="#bin-opt-info选项" class="headerlink" title="bin_opt_info选项"></a>bin_opt_info选项</h5><p>使用bin_opt_info选项可以让编译器打印大量有关二进制优化的信息。</p><blockquote><p>erlc +bin_opt_info Mod.erl</p></blockquote><p>请注意，bin_opt_info不能是能永久添加到Makefile中的选项，因为它生成的所有信息都不能被删除。因此，通过环境选择在大多数情况下是最实际的方法。为了更准确地说明警告所引用的代码，以下示例中的警告将作为注释引用到它们所引用的子句之后插入，例如：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;<span class="number">0</span>,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">         <span class="comment">%% NOT OPTIMIZED: sub binary is used or returned</span></span><br><span class="line">    T;</span><br><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;_,T/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">         <span class="comment">%% OPTIMIZED: creation of sub binary delayed</span></span><br><span class="line">    after_zero(T);</span><br><span class="line"><span class="function"><span class="title">after_zero</span><span class="params">(&lt;&lt;&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    &lt;&lt;&gt;&gt;.</span><br></pre></td></tr></table></figure></p><p>上述代码说明第一个匹配没有优化，第二个匹配会被优化。让我们重新回顾一下无法优化的代码的例子，并找出原因：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([H|T1], &lt;&lt;H,T2/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">        <span class="comment">%% INFO: matching anything else but a plain variable to</span></span><br><span class="line">    <span class="comment">%%    the left of binary pattern will prevent delayed </span></span><br><span class="line">    <span class="comment">%%    sub binary optimization;</span></span><br><span class="line">    <span class="comment">%%    SUGGEST changing argument order</span></span><br><span class="line">        <span class="comment">%% NOT OPTIMIZED: called function non_opt_eq/2 does not</span></span><br><span class="line">    <span class="comment">%%    begin with a suitable binary matching instruction</span></span><br><span class="line">    non_opt_eq(T1, T2);</span><br><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([_|_], &lt;&lt;_,_/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="title">non_opt_eq</span><span class="params">([], &lt;&lt;&gt;&gt;)</span> -&gt;</span></span><br><span class="line">    <span class="literal">true</span>.</span><br></pre></td></tr></table></figure></p><p>编译器发出两个警告。INFO警告指的是函数non_opt_eq/2作为被调用者，表示任何调用non_opt_eq/2的函数都不能进行延迟sub binary优化。还有一个建议来改变参数顺序。第二个警告（恰好是指同一行）是指sub binary本身的构造。下面的另一个例子将显示INFO和NOT OPTIMIZED警告之间的区别，这些警告有些清晰，但是让我们先来试一下改变参数顺序的建议：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">opt_eq</span><span class="params">(&lt;&lt;H,T1/binary&gt;&gt;, [H|T2])</span> -&gt;</span></span><br><span class="line">        <span class="comment">%% OPTIMIZED: creation of sub binary delayed</span></span><br><span class="line">    opt_eq(T1, T2);</span><br><span class="line"><span class="function"><span class="title">opt_eq</span><span class="params">(&lt;&lt;_,_/binary&gt;&gt;, [_|_])</span> -&gt;</span></span><br><span class="line">    <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="title">opt_eq</span><span class="params">(&lt;&lt;&gt;&gt;, [])</span> -&gt;</span></span><br><span class="line">    <span class="literal">true</span>.</span><br></pre></td></tr></table></figure></p><p>编译器给出以下代码片段的警告：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">match_body</span><span class="params">([<span class="number">0</span>|_], &lt;&lt;H,_/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">        <span class="comment">%% INFO: matching anything else but a plain variable to</span></span><br><span class="line">    <span class="comment">%%    the left of binary pattern will prevent delayed </span></span><br><span class="line">    <span class="comment">%%    sub binary optimization;</span></span><br><span class="line">    <span class="comment">%%    SUGGEST changing argument order</span></span><br><span class="line">    done;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这个警告意味着如果有一个对match_body/2的调用（来自match_body/2中的另一个子句或另一个函数），那么延迟的子二进制优化是不可能的。在二进制匹配结束处的任何地方将发生更多警告，并作为match_body/2的第二个参数传递，例如：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">match_head</span><span class="params">(List, &lt;&lt;_:<span class="number">10</span>,Data/binary&gt;&gt;)</span> -&gt;</span></span><br><span class="line">        <span class="comment">%% NOT OPTIMIZED: called function match_body/2 does not</span></span><br><span class="line">    <span class="comment">%%     begin with a suitable binary matching instruction</span></span><br><span class="line">    match_body(List, Data).</span><br></pre></td></tr></table></figure></p><h5 id="未使用的变量"><a href="#未使用的变量" class="headerlink" title="未使用的变量"></a>未使用的变量</h5><p>编译器能够算出一个变量是否未被使用。然后为以下每个功能生成相同的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">count1</span><span class="params">(&lt;&lt;_,T/binary&gt;&gt;, Count)</span> -&gt;</span> count1(T, Count+<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="title">count1</span><span class="params">(&lt;&lt;&gt;&gt;, Count)</span> -&gt;</span> Count.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count2</span><span class="params">(&lt;&lt;H,T/binary&gt;&gt;, Count)</span> -&gt;</span> count2(T, Count+<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="title">count2</span><span class="params">(&lt;&lt;&gt;&gt;, Count)</span> -&gt;</span> Count.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count3</span><span class="params">(&lt;&lt;_H,T/binary&gt;&gt;, Count)</span> -&gt;</span> count3(T, Count+<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="title">count3</span><span class="params">(&lt;&lt;&gt;&gt;, Count)</span> -&gt;</span> Count.</span><br></pre></td></tr></table></figure></p><p>在每次迭代中，二进制中的前8位将被跳过，不匹配。</p><h4 id="历史笔记"><a href="#历史笔记" class="headerlink" title="历史笔记"></a>历史笔记</h4><p>R12的Binary处理显着改善。因此R11B中执行高效的代码在R12B中可能不是那么高效，反之亦然，此efficiency-guide的较早版本包含了有关R11B中二进制处理的一些信息。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency_guide:需要注意的模块和BIF</title>
      <link href="/2017/10/14/efficiency-guide-%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%A8%A1%E5%9D%97%E5%92%8CBIF/"/>
      <url>/2017/10/14/efficiency-guide-%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%A8%A1%E5%9D%97%E5%92%8CBIF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下就是要注意的模块和BIF，这些内容之前大多数知道，就setelement/3和size/1的使用优化是不知道的，值得一读</p></blockquote><h4 id="Timer模块"><a href="#Timer模块" class="headerlink" title="Timer模块"></a>Timer模块</h4><p>使用erlang:send_after/3和erlang:start_timer/3创建定时器比使用Timer模块更有效率。Timer模块使用单独的进程来管理定时器。如果许多进程在同时创建和取消定时器，这个进程很容易成为瓶颈。此外Timer模块的有些函数是不通过单一的进程实现的（如定时器：tc/3或定时器：sleep/1），因此这些函数是可以放心使用的。</p><h4 id="list-to-atom-1"><a href="#list-to-atom-1" class="headerlink" title="list_to_atom/1"></a>list_to_atom/1</h4><p>Atom是不进行内存回收的，一旦一个Atom被创建，它永远不会被移除。如果Atom的数量到达虚拟机的上限（默认1,048,576）的话，虚拟机将会奔溃。因此，在一个连续运行的系统中，将任意输入字符串转换成Atom是危险的。如果只允许某些定义好的原子作为输入，使用list_to_existing_atom/1可以用来防范拒绝服务攻击。使用list_to_atom/1构建一个可以被传入apply/3函数的atom，效率是比较低的，不推荐在需要运行很快的代码中使用:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">apply</span><span class="params">(list_to_atom(“some_prefix”+ + Var), foo, Args)</span></span></span><br></pre></td></tr></table></figure></p><h4 id="length-1"><a href="#length-1" class="headerlink" title="length/1"></a>length/1</h4><p>与tuple_size/1、byte_size/1和bit_size/1的O(1)时间复杂度不同，length/1执行的时间与List的长度成正比为O(n)。通常，没有必要担心length/1的速度，因为它是用C语言很高效的实现的，但是如果List很长，为了避免O(n)的时间复杂度。在一些使用场景中length/1可以被模式匹配来代替,如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span><span class="params">(L)</span> <span class="title">when</span> <span class="title">length</span><span class="params">(L)</span> &gt;= 3 -&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>  可以被写成模式匹配的方式<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span><span class="params">([_,_,_|_]=L)</span> -&gt;</span></span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p><p>  上面两段代码的区别是：如果L不是的列表，length(L)将会出错，而第二段代码中将不能正确匹配。</p><h4 id="setelement-3"><a href="#setelement-3" class="headerlink" title="setelement/3"></a>setelement/3</h4><p>setelement/3会复制其修改的tuple。因此，使用setelement/3循环更新一个tuple的不同字段，会每次创建一个tuple的新副本。有一种情况是可以例外的，如果编译器清楚地知道，破坏性地更新tuple会产生tuple复制相同的结果，那么对setelement/3的调用将被替换为一个特殊的破坏性设置指令。在以下代码中，第一个setelement/3调用复制该tuple并修改第9个元素：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">multiple_setelement</span><span class="params">(T0)</span> -&gt;</span></span><br><span class="line">    T1 = setelement(<span class="number">9</span>, T0, bar),</span><br><span class="line">    T2 = setelement(<span class="number">7</span>, T1, foobar),</span><br><span class="line">    setelement(<span class="number">5</span>, T2, new_value).</span><br></pre></td></tr></table></figure></p><p>  后面两个setelement/3调用将该复制的tuple的d第7和第5个元素也修改了，不再复制新的tuple。要实现上述的优化，必须满足以下条件：</p><ul><li>索引必须是整数文字，而不是变量或表达式。</li><li>索引必须按降序给出。 </li><li>在连续的setelement/3调用之间不能有任何其他函数调用。 </li><li><p>从一个setelement/3调用返回的元组只能在随后的setelement/3调用中使用。</p><p>如果代码不能像multi_setelement/1示例中那样被构造，那么修改大元组中的多个元素的最好方法是将元组转换为列表，修改列表，并将其转换回元组。</p></li></ul><h4 id="size-1"><a href="#size-1" class="headerlink" title="size/1"></a>size/1</h4><p>size/1可以用来返回tuple和binary的大小。但是如果使用tuple_size/1和byte_size/1的话，能为编译器和运行时系统提供了更多优化机会。另一个优点是能给了Dialyzer提供更多的类型信息。</p><h4 id="split-binary-2"><a href="#split-binary-2" class="headerlink" title="split_binary/2"></a>split_binary/2</h4><p>使用模式匹配而不是调用split_binary/2函数来分割二进制通常更有效率。此外，混合使用比特语法匹配和split_binary/2会使比特语法匹配的一些优化失效。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;Bin1:Num/binary,Bin2/binary&gt;&gt; = Bin <span class="comment">%% 推荐</span></span><br><span class="line">&#123;Bin1,Bin2&#125; = split_binary(Bin, Num) <span class="comment">%% 不推荐</span></span><br></pre></td></tr></table></figure></p><h4 id="运算符-“-“"><a href="#运算符-“-“" class="headerlink" title="运算符 “- -“"></a>运算符 “- -“</h4><p>“- -“ 运算符具有与其操作数长度乘积成比例的时间复杂度（O(m*n)）。这意味着如果该操作符的两个操作数都是长列表，那么操作者非常慢：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HugeList1 -- HugeList2</span><br><span class="line"><span class="comment">%% 上述操作应该被替换成下面的操作</span></span><br><span class="line">HugeSet1 = ordsets:from_list(HugeList1),</span><br><span class="line">HugeSet2 = ordsets:from_list(HugeList2),</span><br><span class="line">ordsets:subtract(HugeSet1, HugeSet2)</span><br><span class="line"><span class="comment">%% 如果在意列表的原始顺序的话，可以退换成如下的操作</span></span><br><span class="line">Set = gb_sets:from_list(HugeList2),</span><br><span class="line">[E || E &lt;- HugeList1, <span class="keyword">not</span> gb_sets:is_element(E, Set)]</span><br></pre></td></tr></table></figure></p><p>  注意：如果列表包含重复的元素(HugeList2中出现一个元素在HugeList1中删除了所有出现的元素)，则该代码的行为与“- -”不同。另外，这个代码比较了使用“==”运算符的列表元素，而“- -”使用“=:=”运算符。如果这个区别很重要，那么可以使用set代替gb_set，但是在长列表中set:from_list/1比gb_sets:from_list/1慢得多。使用“- -”运算符从列表中删除一个元素不会有性能问题：HugeList1 – [Element] 。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>efficiency_guide:七个Erlang性能的误区</title>
      <link href="/2017/10/14/efficiency-guide-%E4%B8%83%E4%B8%AAErlang%E6%80%A7%E8%83%BD%E7%9A%84%E8%AF%AF%E5%8C%BA/"/>
      <url>/2017/10/14/efficiency-guide-%E4%B8%83%E4%B8%AAErlang%E6%80%A7%E8%83%BD%E7%9A%84%E8%AF%AF%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这些内容是有些是由于Erlang版本变化做的一些优化，和之前的有些要点有些出入，快速的扫一下即可</p></blockquote><h4 id="尾递归总是比普通递归来的快"><a href="#尾递归总是比普通递归来的快" class="headerlink" title="尾递归总是比普通递归来的快"></a>尾递归总是比普通递归来的快</h4><p>这个说法在R12B之前是真的。在R7B之前更是如此。但是现在普通递归通常使用与尾递归相同的内存量，通常不可能预测尾递归或身体递归版本是否更快。因此，使用使代码更清洁的版本就可以了（通常是普通递归的版本）。但是死循环还是要使用尾递归，防止内存耗尽。</p><h4 id="“-”-操作总是不好的"><a href="#“-”-操作总是不好的" class="headerlink" title="“++” 操作总是不好的"></a>“++” 操作总是不好的</h4><p>如果是这样[H] ++ Tail 使用 “++” 操作的话，没有什么不好的，编译器会自动把该操作转换成[H| Tail]。</p><h4 id="字符串操作很慢"><a href="#字符串操作很慢" class="headerlink" title="字符串操作很慢"></a>字符串操作很慢</h4><p>如果不正确地使用字符串，字符串操作速度可能很慢。在Erlang中，需要更多地思考如何使用字符串并选择适当的字符表示。如果使用正则表达式，请使用STDLIB中的re模块，而不是过时的regexp模块。</p><h4 id="修复Dets文件非常慢"><a href="#修复Dets文件非常慢" class="headerlink" title="修复Dets文件非常慢"></a>修复Dets文件非常慢</h4><p>Dets文件的修复时间与文件中的记录数成正比，虽然Dets文件修复以前很慢，但是Dets的实现已被大量改写和改进。</p><h4 id="BEAM是一个基于堆栈的字节码虚拟机（因此比较慢）"><a href="#BEAM是一个基于堆栈的字节码虚拟机（因此比较慢）" class="headerlink" title="BEAM是一个基于堆栈的字节码虚拟机（因此比较慢）"></a>BEAM是一个基于堆栈的字节码虚拟机（因此比较慢）</h4><p>BEAM是一个基于寄存器的虚拟机。它有1024个虚拟寄存器，用于保存临时值，并在调用函数时传递参数。需要在函数调用中使用的变量将保存到堆栈中。BEAM是一个线程代码解释器。每个指令是直接指向可执行C代码的字，使得指令调度非常快。</p><h4 id="当变量不被使用时，使用“-”来加快程序速度"><a href="#当变量不被使用时，使用“-”来加快程序速度" class="headerlink" title="当变量不被使用时，使用“_”来加快程序速度"></a>当变量不被使用时，使用“_”来加快程序速度</h4><p>这个在R6B版本之前是这样的，但是在这个版本之后，编译器能够自动识别不使用的变量，所以用不用“_”都一样。</p><h4 id="NIF总是能使你的程序更快"><a href="#NIF总是能使你的程序更快" class="headerlink" title="NIF总是能使你的程序更快"></a>NIF总是能使你的程序更快</h4><p>将Erlang代码重写为NIF以使其更快，应该被视为最后的手段。使用NIF肯定有风险，但是不能保证程序能更快。在每个NIF调用中进行太多的工作会降低VM的响应能力。做太少的工作可能意味着NIF中更快处理的优势被调用NIF并检查参数的开销所抵消了。所以在写NIF之前，请务必阅读 <a href="http://erlang.org/doc/man/erl_nif.html#lengthy_work" target="_blank" rel="noopener">Long-running NIFs</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang文档的efficiency_guide总结</title>
      <link href="/2017/10/13/Erlang%E6%96%87%E6%A1%A3%E7%9A%84efficiency-guide%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/13/Erlang%E6%96%87%E6%A1%A3%E7%9A%84efficiency-guide%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前刚开始学习的Erlang的时候稍微看过这个教程，但是没有看全，发现这个教程还涵盖了挺多的信息的，今天把这个教程看完，顺便做一下总结，<a href="http://erlang.org/doc/efficiency_guide/introduction.html" target="_blank" rel="noopener">教程原版地址</a></p></blockquote><p>本来是想把所有的总结写在一篇文章里面的，但是由于篇幅比较大，所以就把所有的总结分为以下几篇文章：</p><ul><li><a href="/2017/10/14/efficiency-guide-七个Erlang性能的误区/" title="efficiency_guide:七个Erlang性能的误区">efficiency_guide:七个Erlang性能的误区</a></li><li><a href="/2017/10/14/efficiency-guide-需要注意的模块和BIF/" title="efficiency_guide:需要注意的模块和BIF">efficiency_guide:需要注意的模块和BIF</a></li><li><a href="/2017/10/14/efficiency-guide-Binary的构建和匹配/" title="efficiency-guide:Binary的构建和匹配">efficiency-guide:Binary的构建和匹配</a></li><li><a href="/2017/10/14/efficiency-guide-List处理/" title="efficiency-guide:List处理">efficiency-guide:List处理</a></li><li><a href="/2017/10/15/efficiency-guide-函数/" title="efficiency-guide:函数">efficiency-guide:函数</a></li><li><a href="/2017/10/15/efficiency-guide-表和数据库/" title="efficiency-guide:表和数据库">efficiency-guide:表和数据库</a></li><li><a href="/2017/10/15/efficiency-guide-进程/" title="efficiency-guide:进程">efficiency-guide:进程</a></li></ul><p>最后再提两个误区：</p><ul><li>匿名函数很慢匿名函数过去很慢，慢于apply/3。最初，使用编译器技巧，普通元组，apply/​3和大量的精巧方法实现了匿名函数。但那是历史。匿名函数在R6B中给出了自己的数据类型，并在R7B中进一步优化。现在，一个匿名函数的调用开销大概在调用本地函数和apply/3的开销之间。</li><li>列表推导很慢以前通过匿名函数实现列表推导，而在过去匿名函数确实很慢。 如今，编译器将列表推导重写成一个普通的递归函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Erlang Efficiency Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>怎么实现一个Sublime的自动补全插件</title>
      <link href="/2017/09/03/%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AASublime%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2017/09/03/%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AASublime%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用Erlang开发了快三年的游戏了，一直使用的是Sublime编辑器，也就这样没有自动补全的情况下使用了三年，本来打算切换到有Erlang自动补全的Ide的，但是在Sublime上面开发了那么久，切换到其他的编辑器觉得很不习惯，所以就自己写了一个Erlang的自动补全的插件，<a href="https://github.com/lintingbin2009/Erl-AutoCompletion" target="_blank" rel="noopener">点这里可以看到我的插件</a></p></blockquote><p>Sublime插件是用Python写的，所以打算开发Sublime插件的话要稍微去学习下Python，不用学的很深入，懂得基本的语法就可以愉快的开始开发插件了。我之前的入门教程看的是<a href="https://cnpagency.com/blog/creating-sublime-text-3-plugins-part-1/" target="_blank" rel="noopener">creating-sublime-text-3-plugins-part-1</a>，如果打算开发Sublime插件的话，看这篇文章就可以写一个简单的Sublime插件的Demo。这个网址<a href="http://www.sublimetext.com/docs/3/api_reference.html" target="_blank" rel="noopener">api_reference</a>可以查看开发Sublime插件所提供的各种API。</p><p>我写Erlang自动补全代码和自动跳转的原理是在打开Sublime的时候，扫描所有Erlang的源代码和Sublime中已经打开的所有的Erlang代码，然后利用正则表达式匹配来找出所有函数和模块所在的文件和位置，把这些信息都写入到Sqlite数据库中，然后在用户在编写Erlang源代码的时候提供补全的函数和模块。当用户把鼠标指向某个函数的时候，在Sqlite数据库中查询相应的函数所在的文件和位置，当用户选中的时候打开该文件并且定位到文件的相应的位置。具体的代码可以在<a href="https://github.com/lintingbin2009/Erl-AutoCompletion" target="_blank" rel="noopener">点这里可以看到我的插件</a>这里查看。当写好一个插件后我们最好能把插件放到Package Control中，这样用户安装和升级插件就会非常的方便，通过这个<a href="https://packagecontrol.io/docs/submitting_a_package" target="_blank" rel="noopener">submitting_a_package</a>教程能够顺利的提交自己的插件到Package Control中。</p><p>自己写一个小插件有时候还是可以学到一点东西的，通过这次编写自动补全的插件，让我对正则表达式稍微熟悉了一点。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mochiweb的x-forwarded-for实现引发的线上掉单</title>
      <link href="/2017/08/18/mochiweb%E7%9A%84x-forwarded-for%E5%AE%9E%E7%8E%B0%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E6%8E%89%E5%8D%95/"/>
      <url>/2017/08/18/mochiweb%E7%9A%84x-forwarded-for%E5%AE%9E%E7%8E%B0%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E6%8E%89%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一次线上充值服的掉单问题，同时学习下什么是x-forwarded-for</p></blockquote><h4 id="掉单原因？"><a href="#掉单原因？" class="headerlink" title="掉单原因？"></a>掉单原因？</h4><p>因为充值服都设有白名单，如果充值请求的机器的IP不在白名单里面的话会被视为非法IP，在掉单期间，线上的充值服发现有大量的100.116.<em> .</em> 的非法IP的访问，之后在网上一查，原来100.64.0.0/10也是属于内网IP的。我们的充值服务器使用了负载均衡，所以100.116.<em>.</em>的IP应该是负载均衡机器的内网IP，同时由于我们充值服务器使用的是mochiweb的服务器，所以第一时间查看了下mochiweb获取IP的源代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get</span><span class="params">(peer, &#123;?MODULE, [Socket, _Opts, _Method, _RawPath, _Version, _Headers]&#125;=THIS)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> mochiweb_socket:peername(Socket) <span class="keyword">of</span></span><br><span class="line">        &#123;ok, &#123;Addr=&#123;<span class="number">10</span>, _, _, _&#125;, _Port&#125;&#125; -&gt;</span><br><span class="line">            <span class="keyword">case</span> get_header_value(<span class="string">"x-forwarded-for"</span>, THIS) <span class="keyword">of</span></span><br><span class="line">                undefined -&gt;</span><br><span class="line">                    inet_parse:ntoa(Addr);</span><br><span class="line">                Hosts -&gt;</span><br><span class="line">                    string:strip(lists:last(string:tokens(Hosts, <span class="string">","</span>)))</span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        <span class="comment">%% Copied this syntax from webmachine contributor Steve Vinoski</span></span><br><span class="line">        &#123;ok, &#123;Addr=&#123;<span class="number">172</span>, Second, _, _&#125;, _Port&#125;&#125; <span class="keyword">when</span> (Second &gt; <span class="number">15</span>) <span class="keyword">andalso</span> (Second &lt; <span class="number">32</span>) -&gt;</span><br><span class="line">            <span class="keyword">case</span> get_header_value(<span class="string">"x-forwarded-for"</span>, THIS) <span class="keyword">of</span></span><br><span class="line">                undefined -&gt;</span><br><span class="line">                    inet_parse:ntoa(Addr);</span><br><span class="line">                Hosts -&gt;</span><br><span class="line">                    string:strip(lists:last(string:tokens(Hosts, <span class="string">","</span>)))</span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        &#123;ok, &#123;Addr=&#123;<span class="number">192</span>, <span class="number">168</span>, _, _&#125;, _Port&#125;&#125; -&gt;</span><br><span class="line">            <span class="keyword">case</span> get_header_value(<span class="string">"x-forwarded-for"</span>, THIS) <span class="keyword">of</span></span><br><span class="line">                undefined -&gt;</span><br><span class="line">                    inet_parse:ntoa(Addr);</span><br><span class="line">                Hosts -&gt;</span><br><span class="line">                    string:strip(lists:last(string:tokens(Hosts, <span class="string">","</span>)))</span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        &#123;ok, &#123;&#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, _Port&#125;&#125; -&gt;</span><br><span class="line">            <span class="keyword">case</span> get_header_value(<span class="string">"x-forwarded-for"</span>, THIS) <span class="keyword">of</span></span><br><span class="line">                undefined -&gt;</span><br><span class="line">                    <span class="string">"127.0.0.1"</span>;</span><br><span class="line">                Hosts -&gt;</span><br><span class="line">                    string:strip(lists:last(string:tokens(Hosts, <span class="string">","</span>)))</span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        &#123;ok, &#123;Addr, _Port&#125;&#125; -&gt;</span><br><span class="line">            inet_parse:ntoa(Addr);</span><br><span class="line">        &#123;error, enotconn&#125; -&gt;</span><br><span class="line">            exit(normal)</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p><p>从上面的代码可以看出，如果在服务器内网里面使用了代理服务器之后，mochiweb是能够自动获取原始的访问IP。但是仅限内网代理服务器的IP是一些常见的内网IP，100.64.0.0/10段的IP地址并不包括在里面，所以这时候获取的IP就不是原始IP，而是负载均衡机器的内网IP。</p><h4 id="内网IP段有哪些？"><a href="#内网IP段有哪些？" class="headerlink" title="内网IP段有哪些？"></a>内网IP段有哪些？</h4><p>10.0.0.0/8<br>10.0.0.0 - 10.255.255.255 </p><p>172.16.0.0/12<br>172.16.0.0 - 172.31.255.255  </p><p>192.168.0.0/16<br>192.168.0.0 - 192.168.255.255  </p><p>以上三个网段分别属于A、B、C三类IP地址</p><p>100.64.0.0/10<br>100.64.0.0 - 100.127.255.255<br>由运营商使用的私网IP段，随着IPv4地址池的耗光，会有更多用户被分配到这个网段。我们的线上掉单问题就是因为阿里云把内网IP切换到这个网段造成的。</p><h4 id="http协议头标：x-forwarded-for"><a href="#http协议头标：x-forwarded-for" class="headerlink" title="http协议头标：x-forwarded-for"></a>http协议头标：x-forwarded-for</h4><p>X-Forwarded-For(XFF)是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。 Squid 缓存代理服务器的开发人员最早引入了这一HTTP头字段，并由IETF在Forwarded-For HTTP头字段标准化草案中正式提出。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这次的掉单问题算起来应该算是一个不太能够发现的坑，主要是依赖第三方库的实现，我们这边相关的同事已经把修复代码提交pull request到mochiweb的github主页了，防止有更多的人碰到这个坑。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mochiweb </tag>
            
            <tag> x-forwarded-for </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Erlang的全区服分数竞技场的设计的优化</title>
      <link href="/2017/07/13/%E5%9F%BA%E4%BA%8EErlang%E7%9A%84%E5%85%A8%E5%8C%BA%E6%9C%8D%E5%88%86%E6%95%B0%E7%AB%9E%E6%8A%80%E5%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/2017/07/13/%E5%9F%BA%E4%BA%8EErlang%E7%9A%84%E5%85%A8%E5%8C%BA%E6%9C%8D%E5%88%86%E6%95%B0%E7%AB%9E%E6%8A%80%E5%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上一篇文章<a href="/2017/05/01/Erlang动态代码载入小实验/" title="Erlang动态代码载入小实验">Erlang动态代码载入小实验</a>中，我提到的竞技场设计中存在一些性能问题，这篇文章主要是针对上一篇文章提到的性能问题在整体设计方案不进行大改的情况下进行优化。</p></blockquote><h4 id="主要性能问题"><a href="#主要性能问题" class="headerlink" title="主要性能问题"></a>主要性能问题</h4><p>回顾上一篇文章，我们知道之前的设计方案的主要问题是：频繁的在分数ETS中拿取和更新新的玩家List，而且该List的大小有可能是几十万的级别的，主要的性能问题是ETS和排行榜进程之间的数据拷贝。</p><p>在同一分数段的所有玩家都用List来存储的话，每次在一个分数中增加一个玩家的代价是，先从ets中lookup拿出所有这一分数的玩家，然后在这个列表中增加新的玩家，最后再把新的玩家列表更新回去，删除也是如此。如果每个分数的玩家列表都不是很大的话，这个应该问题也不会很大，但是由于同一分数段的玩家比较多，所以这个方案的性能就很差了。</p><h4 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h4><p>既然主要的性能问题出在List的更新和删除的操作，所以这个优化方案的主要方法是把List替换成ETS，当List的长度大于N(N可以自己设置，比如100、200之类)时，同一分数的所有玩家都存储在ETS中，这样在一个分数的玩家列表中增加一个玩家也只是在ETS中增加一个玩家ID而已，删除一个玩家的话，也只是在ETS中删除一个玩家ID，这两个操作都非常的快。</p><p>经过这一次的优化，竞技场玩家已经可以在正式环境中上线，但是在游戏最高峰的时间段，玩家还是会有点卡，此时游戏服务器（16核）的cpu几乎全部跑满，所以还需要进一步的优化。</p><h4 id="优化二"><a href="#优化二" class="headerlink" title="优化二"></a>优化二</h4><p>通过上一次优化我们知道，服务器在高峰的时候几乎把cpu全部跑满。这时候我就开始怀疑寻找对手的算法是否有问题，之前寻找对手都是现算的，把玩家的对手的排名算出来，然后在分数的ETS里面开始从头到尾遍历所有分数，找出符合对手排名的玩家。这样子寻找一个玩家的三个对手，大概要遍历分数ETS一千多次，在平时的时候还是非常快的，下面是我用eprof测量的在平时寻找一次对手的一些关键操作的开销：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">legend_arena_global_rank:query_apprentice_rank/<span class="number">7</span>              <span class="number">389</span>   <span class="number">4.25</span>   <span class="number">290</span>  [      <span class="number">0.75</span>]</span><br><span class="line">legend_arena_global_rank:query_apprentice_key/<span class="number">3</span>              <span class="number">1076</span>   <span class="number">7.45</span>   <span class="number">508</span>  [      <span class="number">0.47</span>]</span><br><span class="line">ets:lookup_element/<span class="number">3</span>                                         <span class="number">1465</span>  <span class="number">34.31</span>  <span class="number">2340</span>  [      <span class="number">1.60</span>]</span><br><span class="line">ets:prev/<span class="number">2</span>                                                   <span class="number">1459</span>  <span class="number">45.52</span>  <span class="number">3105</span>  [      <span class="number">2.13</span>]</span><br></pre></td></tr></table></figure></p><p>再下面的是我用eprof测试的在小高峰期寻找一次对手的一些关键操作的开销：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">legend_arena_global_rank:query_apprentice_rank/<span class="number">7</span>              <span class="number">386</span>   <span class="number">1.16</span>    <span class="number">216</span>  [      <span class="number">0.56</span>]</span><br><span class="line">legend_arena_global_rank:query_apprentice_key/<span class="number">3</span>              <span class="number">1029</span>   <span class="number">2.95</span>    <span class="number">551</span>  [      <span class="number">0.54</span>]</span><br><span class="line">ets:lookup_element/<span class="number">3</span>                                         <span class="number">1415</span>  <span class="number">39.47</span>   <span class="number">7371</span>  [      <span class="number">5.21</span>]</span><br><span class="line">ets:prev/<span class="number">2</span>                                                   <span class="number">1409</span>  <span class="number">54.38</span>  <span class="number">10157</span>  [      <span class="number">7.21</span>]</span><br></pre></td></tr></table></figure></p><p>通过上面两次的测量可以看到：分数ETS在大量访问的时候出现了性能下降，本来ets:prev/2操作只需要2.13us，在高峰期居然需要7.21us；本来ets:lookup_element/3操作只需要1.6us，在高峰期居然需要5.21us。</p><p>所以这次的主要优化方法是把对分数ETS的访问次数降下来，建立一些排名的缓存，当一个玩家寻找对手的时候直接在缓存中寻找，同时每秒钟刷新一次缓存（确保排名比较正确）。这样不管是在高峰期还是平时，分数ETS都不会有非常明显的访问量的提升。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过这次的优化，我认为不管用什么语言来实现一个系统，都要了解这个语言的优势和劣势，这样才能找出一个合理的解决方案来解决一些比较棘手的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 算法设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设置Shell脚本执行错误自动退出</title>
      <link href="/2017/07/06/%E8%AE%BE%E7%BD%AEShell%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/"/>
      <url>/2017/07/06/%E8%AE%BE%E7%BD%AEShell%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一篇备忘记录，以后再写Shell脚本的时候需要注意！</p></blockquote><p>之前项目使用Jenkins打包的时候，有时候因为一些错误的提交，导致出包的时候编译失败，从而导致打包出来的包里面只有部分的代码，这是因为我们写的Shell脚本没有对每条Shell命令的结果进行检查，不管执行结果是否成功都会继续往下执行。所以即使我们在编译环节有错误产生，打包的脚本还是会继续执行后面的打包指令。所以必须让脚本在某条命令执行失败的时候停止执行后续的指令。<br>在Shell脚本中加入：</p><p>#!/bin/bash -e或者set -e</p><p>就能够让脚本在有错误的时候退出。下面是网上查的拓展：</p><h4 id="使用set-e"><a href="#使用set-e" class="headerlink" title="使用set -e"></a>使用set -e</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">你写的每一个脚本的开始都应该包含set -e。这告诉bash一但有任何一个语句返回非真的值，则退出bash。 </span><br><span class="line"></span><br><span class="line">使用-e的好处是避免错误滚雪球般的变成严重错误，能尽早的捕获错误。更加可读的版本：set -o errexit </span><br><span class="line"></span><br><span class="line">使用-e把你从检查错误中解放出来。如果你忘记了检查，bash会替你做这件事。</span><br><span class="line"></span><br><span class="line">不过你也没有办法使用$? 来获取命令执行状态了，因为bash无法获得任何非0的返回值。</span><br><span class="line"></span><br><span class="line">你可以使用另一种结构，使用command</span><br></pre></td></tr></table></figure><h4 id="使用command"><a href="#使用command" class="headerlink" title="使用command"></a>使用command</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if [ "$?"-ne 0]; then echo "command failed"; exit 1; fi "</span><br><span class="line"></span><br><span class="line">可以替换成： </span><br><span class="line"></span><br><span class="line">command ||  echo "command failed"; exit 1; （这种写法并不严谨，我当时的场景是执行ssh "commond"，</span><br><span class="line">所以可以返回退出码后面通过[ #？ -eq 0 ]来做判断，如果是在shell中无论成功还是失败都会exit）</span><br><span class="line"></span><br><span class="line">修改如下（谢谢评论的朋友指正）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">command ||  （echo "command failed"; exit 1） ; </span><br><span class="line"></span><br><span class="line">或者使用： </span><br><span class="line"></span><br><span class="line">if ! command; then echo "command failed"; exit 1; fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Erlang的全区服分数竞技场的设计</title>
      <link href="/2017/06/19/%E5%9F%BA%E4%BA%8EErlang%E7%9A%84%E5%85%A8%E5%8C%BA%E6%9C%8D%E5%88%86%E6%95%B0%E7%AB%9E%E6%8A%80%E5%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2017/06/19/%E5%9F%BA%E4%BA%8EErlang%E7%9A%84%E5%85%A8%E5%8C%BA%E6%9C%8D%E5%88%86%E6%95%B0%E7%AB%9E%E6%8A%80%E5%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍我之前开发的一个基于Erlang的全区服分数竞技场的设计思路，同时会给出该设计的在现实项目中出现的问题，并且在后续的几篇文章中优化设计。</p></blockquote><h4 id="关键需求"><a href="#关键需求" class="headerlink" title="关键需求"></a>关键需求</h4><p>该分数竞技场的实际需求比较多，这边只列举对我们设计有影响的几个关键需求，以下是该分数竞技场的关键需求：</p><ul><li>每个玩家拥有一个分数，该分数大概是6000以内的数字。</li><li>玩家要实时知道自己的分数和排名。</li><li>玩家可以手动刷新自己的对手，玩家的对手由于玩家的排名乘以30%、60%、90%左右的排名的玩家随机出来。比如一个1000名的玩家，他的对手可能是由278、632、945名次的玩家组成。</li><li>玩家挑战对手，如果战胜，则玩家自己加分，对手扣分，反之亦然。</li><li>该竞技场每天在某一时间点进行结算发奖。</li></ul><h4 id="玩家数量级"><a href="#玩家数量级" class="headerlink" title="玩家数量级"></a>玩家数量级</h4><p>玩家的数量级有两个，分别是测试环境和正式环境：</p><ul><li>测试环境的玩家帐号有几十万，日活是2万左右。</li><li>正式环境的玩家帐号有几百万，日活是60万左右。</li></ul><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>下面介绍该分数竞技场的具体设计思路:</p><ul><li>由于该竞技场是采用分数来排名，而且分数的区间比较小，所以我想到了使用桶排序来对玩家分数排名。</li><li>由于该竞技场是所有玩家共同访问的，所以打算用ETS来实现这个桶排序。</li><li>由于分数需要是有序存储的，所以该ETS为ordered_set类型，而且Key为分数，Value有两个字段：<ul><li>list——存储该分数的所有玩家的key</li><li>cnt——存储该分数的玩家总数</li></ul></li><li>玩家的排名为：从该分数ETS分数最大的元素开始遍历，遍历到玩家所在的分数的前一个分数，在遍历的同时累加遍历到的cnt值，玩家的排名为累加值加1，同一分数玩家的排名一致。例如：玩家分数为5000分，在5000分之前有100个5020分，1个5500分，则玩家为第102名。</li><li>当玩家进行一场挑战的时候，把玩家key从他原来的分数list里面移除，并且该分数的cnt-1；同时把玩家key加入到新的分数的list，并且该新分数的cnt+1；对手的分数改变也是进行同样的操作；这些操作在gen_server中进行，确保数据不会被脏写。</li></ul><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><ul><li>该设计在测试环境中测试通过了，而且没有发现什么异常。</li><li>在正式环境中，只有少量玩家访问的情况下，访问时间到达几秒的级别，只能暂时关闭该功能进行优化。</li></ul><h4 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h4><p>这边列举两个比较严重的问题：</p><ul><li>同一分数的玩家数量很多，同一分数最多的玩家有50万人,使用list来存储玩家的key，每次对这个list增删代价巨大。</li><li>由于ETS是另外一个单独的进程，每次从ETS中拿一个50万人的list，然后再把新的list更新回去，代价同样巨大。</li></ul><h4 id="主要优化目标"><a href="#主要优化目标" class="headerlink" title="主要优化目标"></a>主要优化目标</h4><p>由于留给优化的时间比较短，所以要在原有的设计思路下对该分数竞技场进行优化，达到能够上线的标准。</p>]]></content>
      
      
      <categories>
          
          <category> 算法设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown语法速记</title>
      <link href="/2017/06/17/Markdown%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/"/>
      <url>/2017/06/17/Markdown%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候自己也会忘记Markdown的语法，在这边做一个备忘，以后找起来比较方便，这边记录的是最基本的Markdown语法。</p></blockquote><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_下划线是斜体_</span><br></pre></td></tr></table></figure><p><em>下划线是斜体</em> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**两个星是粗体**</span><br></pre></td></tr></table></figure></p><p><strong>两个星是粗体</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**_粗体斜体一起用_**</span><br></pre></td></tr></table></figure></p><p><strong><em>粗体斜体一起用</em></strong></p><h4 id="六种标题"><a href="#六种标题" class="headerlink" title="六种标题"></a>六种标题</h4><p>几个#号代表标题几,#号后面有空格<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br><span class="line">#### 标题4</span><br><span class="line">##### 标题5</span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这是一个 [普通的链接方式](https://www.github.com)</span><br><span class="line">这是一个 [引用的链接方式][another place].</span><br><span class="line">这还是一个 [引用的链接方式][another-link].</span><br><span class="line"></span><br><span class="line">[another place]: https://www.github.com</span><br><span class="line">[another-link]: https://www.google.com</span><br></pre></td></tr></table></figure><p>这是一个 <a href="https://www.github.com" target="_blank" rel="noopener">普通的链接方式</a>这是一个 <a href="https://www.github.com" target="_blank" rel="noopener">引用的链接方式</a>.这还是一个 <a href="https://www.google.com" target="_blank" rel="noopener">引用的链接方式</a>.</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![我的头像](https://lintingbin2009.github.io/img/avatar.jpg)</span><br><span class="line">![又是一个头像][other]</span><br><span class="line"></span><br><span class="line">[other]: https://lintingbin2009.github.io/img/avatar.jpg</span><br></pre></td></tr></table></figure><p><img src="https://lintingbin2009.github.io/img/avatar.jpg" alt="我的头像"><img src="https://lintingbin2009.github.io/img/avatar.jpg" alt="又是一个头像"></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;在要被引用的段落或者行前面加大括号</span><br><span class="line">&gt;</span><br><span class="line">&gt;即使是空行也要加一下，保持一致</span><br></pre></td></tr></table></figure><blockquote><p>在要被引用的段落或者行前面加大括号</p><p>即使是空行也要加一下，保持一致</p></blockquote><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 有序用数字</span><br><span class="line"> 继续保持缩进,只需加空格</span><br><span class="line">2. 有序用数字</span><br><span class="line"> * 无序用星号</span><br><span class="line">    * 还可再缩进,只需再加空格</span><br></pre></td></tr></table></figure><ol><li>有序用数字继续保持缩进,只需加空格</li><li>有序用数字<ul><li>无序用星号<ul><li>还可再缩进,只需再加空格</li></ul></li></ul></li></ol><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我在逗号后加了两个空格,  </span><br><span class="line">所以不在一行</span><br></pre></td></tr></table></figure><p>我在逗号后加了两个空格,<br>所以不在一行</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang中由rpc:cast错误引起的对error_logger的研究</title>
      <link href="/2017/06/15/Erlang%E4%B8%AD%E7%94%B1rpc-cast%E9%94%99%E8%AF%AF%E5%BC%95%E8%B5%B7%E7%9A%84%E5%AF%B9error-logger%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
      <url>/2017/06/15/Erlang%E4%B8%AD%E7%94%B1rpc-cast%E9%94%99%E8%AF%AF%E5%BC%95%E8%B5%B7%E7%9A%84%E5%AF%B9error-logger%E7%9A%84%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之所以会写这篇文章，是因为rpc:cast函数的使用超出了我的理解范围，本来我的理解是：如果rpc:cast执行失败的话，是不会有任何报错的。但是由于最近的线上存在两个版本的代码进行的互相调用引发了一些报警，让我好奇rpc:cast和error_logger是怎么工作的。</p></blockquote><h4 id="rpc-cast-是怎么工作的？"><a href="#rpc-cast-是怎么工作的？" class="headerlink" title="rpc:cast 是怎么工作的？"></a>rpc:cast 是怎么工作的？</h4><p>我们在查阅rpc的源代码的时候可以发现以下代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-define</span><span class="params">(NAME, rex)</span>.</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">handle_cast</span><span class="params">(&#123;cast, Mod, Fun, Args, Gleader&#125;, S)</span> -&gt;</span></span><br><span class="line">    spawn(<span class="keyword">fun</span>() -&gt;</span><br><span class="line">  set_group_leader(Gleader),</span><br><span class="line">  apply(Mod, Fun, Args)</span><br><span class="line">  <span class="keyword">end</span>),</span><br><span class="line">    &#123;noreply, S&#125;;</span><br><span class="line">...</span><br><span class="line">cast(Node, Mod, Fun, Args) when Node =:= node() -&gt;</span><br><span class="line">    <span class="keyword">catch</span> spawn(Mod, Fun, Args),</span><br><span class="line">    <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="title">cast</span><span class="params">(Node, Mod, Fun, Args)</span> -&gt;</span></span><br><span class="line">    gen_server:cast(&#123;?NAME,Node&#125;, &#123;cast,Mod,Fun,Args,group_leader()&#125;),</span><br><span class="line">    <span class="literal">true</span>.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>从上面的代码我们可以看到，rpc:cast的时候如果目标node和本地node一样的话就会直接spawn一个进程处理，如果是远程的话，则会调用一个名字为rex的gen_server到远程的服务器上执行，远程的服务器同样也是spawn一个进程来处理。如果一个服务器是为其他服务器提供服务的（通过rpc模块），那么这个服务器的rex应该会是最繁忙的。通过上面的分析我们知道rpc:cast的错误是spawn函数通知error_logger的。</p><h4 id="spawn出来的进程执行遇到错误怎么处理？"><a href="#spawn出来的进程执行遇到错误怎么处理？" class="headerlink" title="spawn出来的进程执行遇到错误怎么处理？"></a>spawn出来的进程执行遇到错误怎么处理？</h4><p>我自己试验了下，比如我自己在shell里面执行spawn(fun() -&gt; 1 = 2 end).语句的话，error_logger就会收到如下的一个错误事件：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;error,&lt;<span class="number">113291.32</span>.<span class="number">0</span>&gt;,</span><br><span class="line">  &#123;emulator,<span class="string">"~s~n"</span>,</span><br><span class="line">  [<span class="string">"Error in process &lt;0.13313.2075&gt; on node 'all_in_one_33000@192.168.1.102' with exit value: &#123;&#123;badmatch,2&#125;,[&#123;erl_eval,expr,3,[]&#125;]&#125;\n"</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>为了明白上述的情况为什么会发生，我在Erlang邮件列表里面找到两个类似的问题，可以解答我的疑问：</p><p><a href="http://erlang.org/pipermail/erlang-questions/2013-October/075867.html" target="_blank" rel="noopener">[erlang-questions] An answer: how does SASL know that a process    died?</a></p><p><a href="http://erlang.org/pipermail/erlang-questions/2014-April/078792.html" target="_blank" rel="noopener">[erlang-questions] error_logger events sent by emulator</a></p><p>简单的总结上面的两个问题，spawn执行的程序遇到异常的话，是由虚拟机的C语言代码向error_logger发送的错误事件。</p><h4 id="error-logger-是怎么工作的？"><a href="#error-logger-是怎么工作的？" class="headerlink" title="error_logger 是怎么工作的？"></a>error_logger 是怎么工作的？</h4><p><a href="http://erlang.org/doc/man/error_logger.html" target="_blank" rel="noopener">error_logger</a>是Erlang的错误记录器，由<a href="http://erlang.org/doc/man/gen_event.html" target="_blank" rel="noopener">gen_event</a>实现，在Erlang系统中会有一个注册名为error_logger的事件管理器(event manager)，可以在事件管理器中加入各种处理模块来处理事件。默认的系统中会加入以下两个错误处理模块：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ erl</span><br><span class="line">Erlang R16B03 (erts-<span class="number">5.10</span>.<span class="number">4</span>) [source] [<span class="number">64</span>-bit] [smp:<span class="number">12</span>:<span class="number">12</span>] </span><br><span class="line">[async-threads:<span class="number">10</span>] [hipe] [kernel-poll:<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Eshell V5.<span class="number">10.4</span>  (abort with ^G)</span><br><span class="line"><span class="number">1</span>&gt; gen_event:which_handlers(error_logger).</span><br><span class="line">[error_logger,error_logger_tty_h]</span><br></pre></td></tr></table></figure></p><p>简单的说下这两个错误处理模块，首先是error_logger模块，以下是该模块的处理事件的部分代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle_event</span><span class="params">(&#123;Type, GL, Msg&#125;, State)</span> <span class="title">when</span> <span class="title">node</span><span class="params">(GL)</span> =/= <span class="title">node</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    gen_event:notify(&#123;error_logger, node(GL)&#125;,&#123;Type, GL, Msg&#125;),</span><br><span class="line">    <span class="comment">%% handle_event2(&#123;Type, GL, Msg&#125;, State);  %% Shall we do something</span></span><br><span class="line">    &#123;ok, State&#125;;                               <span class="comment">%% at this node too ???</span></span><br><span class="line"><span class="function"><span class="title">handle_event</span><span class="params">(&#123;info_report, _, &#123;_, Type, _&#125;&#125;, State)</span> <span class="title">when</span> T<span class="title">ype</span> =/= <span class="title">std_info</span> -&gt;</span></span><br><span class="line">    &#123;ok, State&#125;;   <span class="comment">%% Ignore other info reports here</span></span><br><span class="line"><span class="function"><span class="title">handle_event</span><span class="params">(Event, State)</span> -&gt;</span></span><br><span class="line">    handle_event2(Event, State).</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">handle_event2</span><span class="params">(Event, &#123;<span class="number">1</span>, Lost, Buff&#125;)</span> -&gt;</span></span><br><span class="line">    display(tag_event(Event)),</span><br><span class="line">    &#123;ok, &#123;<span class="number">1</span>, Lost+<span class="number">1</span>, Buff&#125;&#125;;</span><br><span class="line"><span class="function"><span class="title">handle_event2</span><span class="params">(Event, &#123;N, Lost, Buff&#125;)</span> -&gt;</span></span><br><span class="line">    Tagged = tag_event(Event),</span><br><span class="line">    display(Tagged),</span><br><span class="line">    &#123;ok, &#123;N-<span class="number">1</span>, Lost, [Tagged|Buff]&#125;&#125;;</span><br><span class="line"><span class="function"><span class="title">handle_event2</span><span class="params">(_, State)</span> -&gt;</span></span><br><span class="line">    &#123;ok, State&#125;.</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">display2</span><span class="params">(Tag,F,A)</span> -&gt;</span></span><br><span class="line">    erlang:display(&#123;error_logger,Tag,F,A&#125;).</span><br></pre></td></tr></table></figure></p><p>该模块把是本node产生的事件调用erlang:display()输出，把不是本node产生的事件发送到目标node上面，由目标node的error_logger进行处理。</p><p>接着是error_logger_tty_h模块，以下是该模块的处理事件的部分代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle_event</span><span class="params">(&#123;_Type, GL, _Msg&#125;, State)</span> <span class="title">when</span> <span class="title">node</span><span class="params">(GL)</span> =/= <span class="title">node</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    &#123;ok, State&#125;;</span><br><span class="line"><span class="function"><span class="title">handle_event</span><span class="params">(Event, State)</span> -&gt;</span></span><br><span class="line">    write_event(tag_event(Event),io),</span><br><span class="line">    &#123;ok, State&#125;.</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">write_event</span><span class="params">(&#123;Time, &#123;error, _GL, &#123;Pid, Format, Args&#125;&#125;&#125;,IOMod)</span> -&gt;</span></span><br><span class="line">    T = write_time(maybe_utc(Time)),</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">catch</span> io_lib:format(add_node(Format,Pid), Args) <span class="keyword">of</span></span><br><span class="line">S <span class="keyword">when</span> is_list(S) -&gt;</span><br><span class="line">    format(IOMod, T ++ S);</span><br><span class="line">_ -&gt;</span><br><span class="line">    F = add_node(<span class="string">"ERROR: ~p - ~p~n"</span>, Pid),</span><br><span class="line">    format(IOMod, T ++ F, [Format,Args])</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">format</span><span class="params">(IOMod, String)</span>       -&gt;</span> format(IOMod, String, []).</span><br><span class="line"><span class="function"><span class="title">format</span><span class="params">(io_lib, String, Args)</span> -&gt;</span> io_lib:format(String, Args);</span><br><span class="line"><span class="function"><span class="title">format</span><span class="params">(io, String, Args)</span> -&gt;</span> io:format(user, String, Args).</span><br></pre></td></tr></table></figure></p><p>该模块把不是该node的事件直接忽略，然后把本node的事件调用io:format输出到终端上面。</p><p>除了这两个处理模块，Erlang的<a href="http://erlang.org/doc/man/sasl_app.html" target="_blank" rel="noopener">sasl</a>应用还提供了三个模块：sasl_report_tty_h、sasl_report_file_h、log_mf_h。log_mf_h模块的功能最为强大，能够把错误写入指定个数的文件中，当文件用完后会自动删除最老的事件以腾出空间记录最新的事件。但是log_mf_h的缺点是记录的是二进制的格式，要查看记录的事件的话，还需要使用sasl提供的rb模块来解析，颇为繁琐。而且该模块没有对单事件的最大上限做保护，如果有超大的事件写入的话，就会导致文件错乱，看不了事件（这个可以自己写代码做保护，我们项目之前就是这样做的）。</p><p>当然除了官方提供的处理模块，也可以使用第三方提供的模块。现在我们项目就把所有官方提供的模块都删除掉了，只使用lager提供的error_logger_lager_h模块来处理事件，然后自己编写了一个alarm_handle_error模块用来发送报警。error_logger_lager_h使用文本的方式来记录事件，查看起来比较方便，而且对Erlang内部一些比较难以理解的错误进行翻译，比较容易理解；但是由于使用文本的方式进行记录，没有对事件消息进行格式化，如果消息比较大的话，读起来比较费劲。</p><h4 id="error-logger-添加处理模块的注意事项"><a href="#error-logger-添加处理模块的注意事项" class="headerlink" title="error_logger 添加处理模块的注意事项"></a>error_logger 添加处理模块的注意事项</h4><p>当使用sasl提供的log_mf_h处理模块的时候不能删除系统提供的error_logger模块，不然像rpc:cast通知的事件就不能正常的捕获了，原因如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 当NodeA执行以下函数的时候，在NodeB会接收到一个错误，</span></span><br><span class="line"><span class="comment">%% 由于NodeB只有log_mf_h模块，log_mf_h模块会对接收的事件使用sasl:pred/1函数进行过滤</span></span><br><span class="line"><span class="comment">%% sasl:pred/1会过滤不是本node的产生的事件，因此该错误被过滤</span></span><br><span class="line"><span class="comment">%% 如果这时候NodeB有error_logger模块的话，error_logger模块就会将事件通知NodeA</span></span><br><span class="line"><span class="comment">%% 然后NodeA就能使用log_mf_h模块正确记录该错误，该错误记录在NodeA的机器上</span></span><br><span class="line">NodeA: rpc:cast(NodeB, M, ErrorFun, []).</span><br></pre></td></tr></table></figure></p><p>lager的error_logger_lager_h模块默认会记录所有的事件，不管该事件是属于哪个Node的，如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 当NodeA执行以下函数的时候，在NodeB会接收到一个错误，</span></span><br><span class="line"><span class="comment">%% error_logger_lager_h直接记录错误在NodeB的机器上</span></span><br><span class="line">NodeA: rpc:cast(NodeB, M, ErrorFun, []).</span><br></pre></td></tr></table></figure></p><h4 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h4><p>之前项目使用log_mf_h模块处理事件的配置文件如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&#123;sasl, [</span><br><span class="line">          &#123;sasl_error_logger, false&#125;,</span><br><span class="line">          &#123;errlog_type, error&#125;,</span><br><span class="line">          &#123;error_logger_mf_dir, <span class="string">"logs"</span>&#125;,</span><br><span class="line">          &#123;error_logger_mf_maxbytes, <span class="number">1073741824</span>&#125;, <span class="comment">% 1GB</span></span><br><span class="line">          &#123;error_logger_mf_maxfiles, <span class="number">10</span>&#125;</span><br><span class="line">    ]&#125;].</span><br></pre></td></tr></table></figure></p><p>之前一直觉得errlog_type是控制log_mf_h模块的处理事件级别的参数，这边设置的参数是error，为什么info的信息还会记录下来呢？后面看了下sasl.erl模块的代码，errlog_type和log_mf_h模块根本没有关系，然后回头再看了一下sasl的文档:</p><p>log_mf_h</p><p>This error logger writes <strong>all</strong> events sent to the error logger to disk. Multiple files and log rotation are used. For efficiency reasons, each event is written as a binary. For more information about this handler, see the STDLIB Reference Manual.</p><p>To activate this event handler, three SASL configuration parameters must be set, error_logger_mf_dir, error_logger_mf_maxbytes, and error_logger_mf_maxfiles. The next section provides more information about the configuration parameters.</p><p>文档中<strong>all</strong>已经加黑了，我居然没看到，以后还得好好认真看文档！</p>]]></content>
      
      
      <categories>
          
          <category> Erlang深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用lager为什么要加入编译选项{parse_transform,lager_transform}</title>
      <link href="/2017/05/30/%E4%BD%BF%E7%94%A8lager%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0%E5%85%A5%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9-parse-transform-lager-transform/"/>
      <url>/2017/05/30/%E4%BD%BF%E7%94%A8lager%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0%E5%85%A5%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9-parse-transform-lager-transform/</url>
      
        <content type="html"><![CDATA[<p>在使用的lager的时候我们需要加入一行编译选项——{parse_transform,lager_transform}，或者是在每个使用lager的文件模块的头部加入一行-compile([{parse_transform, lager_transform}]).，这通常会让我们感觉非常的麻烦，但是大家有没有觉得好奇，为什么使用这个参数呢？</p><p>首先我们看下Erlang文档，在compile模块中有parse_transform参数的相关说明：</p><blockquote><p><strong>{parse_transform,Module}</strong>Causes the parse transformation function Module:parse_transform/2 to be applied to the parsed code before the code is checked for errors.</p></blockquote><p>通过上面的文档我们知道，在编译的时候使用{parse_transform,Module}参数，会使用Module:parse_transform/2函数对代码进行一次解析转换。接下来我们在lager的源代码目录下可以看到lager_transform.erl的代码文件，里面也有一个parse_transform/2的函数。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">parse_transform</span><span class="params">(AST, Options)</span> -&gt;</span></span><br><span class="line">    TruncSize = proplists:get_value(lager_truncation_size, Options, ?DEFAULT_TRUNCATION),</span><br><span class="line">    Enable = proplists:get_value(lager_print_records_flag, Options, true),</span><br><span class="line">    Sinks = [lager] ++ proplists:get_value(lager_extra_sinks, Options, []),</span><br><span class="line">    put(print_records_flag, Enable),</span><br><span class="line">    put(truncation_size, TruncSize),</span><br><span class="line">    put(sinks, Sinks),</span><br><span class="line">    erlang:put(records, []),</span><br><span class="line">    <span class="comment">%% .app file should either be in the outdir, or the same dir as the source file</span></span><br><span class="line">    guess_application(proplists:get_value(outdir, Options), hd(AST)),</span><br><span class="line">    walk_ast([], AST).</span><br></pre></td></tr></table></figure></p><p>parse_transform/2函数的第一个参数是AST，这个是代码在被编译成二进制前的一种格式<a href="http://erlang.org/doc/apps/erts/absform.html" target="_blank" rel="noopener">The Abstract Format</a>,第二个参数是在编译的时候传入的编译参数，比如要加入一个sink的话不单单要在配置文件里面加入配置，还要在编译参数里面加入{lager_extra_sinks, [audit]}，这样parse_transform/2函数才能在proplists:get_value(lager_extra_sinks, Options, [])的时候获得audit这个sink。</p><p>顺着代码往下走，我们看到只有调用的函数的模块名是Sinks中之一的才会被解析转换（lists:member(Module, Sinks)），比如lager:info、lager:error、audit:info、audit:error等函数（audit为我们配置的sink）。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">walk_body</span><span class="params">(Acc, [])</span> -&gt;</span></span><br><span class="line">    lists:reverse(Acc);</span><br><span class="line"><span class="function"><span class="title">walk_body</span><span class="params">(Acc, [H|T])</span> -&gt;</span></span><br><span class="line">    walk_body([transform_statement(H, get(sinks))|Acc], T).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">transform_statement</span><span class="params">(&#123;call, Line, &#123;remote, _Line1, &#123;atom, _Line2, Module&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  &#123;atom, _Line3, Function&#125;&#125;, Arguments0&#125; = Stmt,</span></span></span><br><span class="line"><span class="function"><span class="params">                    Sinks)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> lists:member(Module, Sinks) <span class="keyword">of</span></span><br><span class="line">        <span class="literal">true</span> -&gt;</span><br><span class="line">            <span class="keyword">case</span> lists:member(Function, ?LEVELS) <span class="keyword">of</span></span><br><span class="line">                <span class="literal">true</span> -&gt;</span><br><span class="line">                    SinkName = lager_util:make_internal_sink_name(Module),</span><br><span class="line">                    do_transform(Line, SinkName, Function, Arguments0);</span><br><span class="line">                <span class="literal">false</span> -&gt;</span><br><span class="line">                    <span class="keyword">case</span> lists:keyfind(Function, <span class="number">1</span>, ?LEVELS_UNSAFE) <span class="keyword">of</span></span><br><span class="line">                        &#123;Function, Severity&#125; -&gt;</span><br><span class="line">                            SinkName = lager_util:make_internal_sink_name(Module),</span><br><span class="line">                            do_transform(Line, SinkName, Severity, Arguments0, unsafe);</span><br><span class="line">                        <span class="literal">false</span> -&gt;</span><br><span class="line">                            Stmt</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span>;</span><br><span class="line">        <span class="literal">false</span> -&gt;</span><br><span class="line">            list_to_tuple(transform_statement(tuple_to_list(Stmt), Sinks))</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p><p>最后来到解析转换真正起作用的地方，这边的注释写的很清楚，下面的解析转换等于就是lager:dispatch_log/6里面的内容，如果直接调用lager:dispatch_log/6函数的话，是不需要这样的解析转换的，我对此特地问了下lager的开发者，这样做的话能够提高多少的性能，对方给的答复是能快一倍（图 1-1），因为在log不需要输出的情况下就不需要拷贝内容到外部的函数了，个人觉得一次外部函数调用应该费不了多少时间吧。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% Wrap the call to lager:dispatch_log/6 in case that will avoid doing any work if this message is not elegible for logging</span></span><br><span class="line"><span class="comment">%% See lager.erl (lines 89-100) for lager:dispatch_log/6</span></span><br><span class="line"><span class="comment">%% case &#123;whereis(Sink), whereis(?DEFAULT_SINK), lager_config:get(&#123;Sink, loglevel&#125;, &#123;?LOG_NONE, []&#125;)&#125; of</span></span><br><span class="line">&#123;'<span class="keyword">case</span>',Line,</span><br><span class="line">     &#123;tuple,Line,</span><br><span class="line">            [&#123;call,Line,&#123;atom,Line,whereis&#125;,[&#123;atom,Line,SinkName&#125;]&#125;,</span><br><span class="line">             &#123;call,Line,&#123;atom,Line,whereis&#125;,[&#123;atom,Line,?DEFAULT_SINK&#125;]&#125;, </span><br><span class="line">             &#123;call,Line,</span><br><span class="line">                   &#123;remote,Line,&#123;atom,Line,lager_config&#125;,&#123;atom,Line,get&#125;&#125;,</span><br><span class="line">                   [&#123;tuple,Line,[&#123;atom,Line,SinkName&#125;,&#123;atom,Line,loglevel&#125;]&#125;,</span><br><span class="line">                    &#123;tuple,Line,[&#123;integer,Line,0&#125;,&#123;nil,Line&#125;]&#125;]&#125;]&#125;,</span><br><span class="line">     %% &#123;undefined, undefined, _&#125; -&gt; &#123;error, lager_not_running&#125;;</span><br><span class="line">     [&#123;clause,Line,</span><br><span class="line">              [&#123;tuple,Line,</span><br><span class="line">                      [&#123;atom,Line,undefined&#125;,&#123;atom,Line,undefined&#125;,&#123;var,Line,'_'&#125;]&#125;],</span><br><span class="line">              [],</span><br><span class="line">              %% trick the linter into avoiding a 'term constructed but <span class="keyword">not</span> used' error:</span><br><span class="line">              %% (fun() -&gt; &#123;error, lager_not_running&#125; end)()</span><br><span class="line">              [&#123;call, Line, &#123;'<span class="keyword">fun</span>', Line, &#123;clauses, [&#123;clause, Line, [],[], [&#123;tuple, Line, [&#123;atom, Line, error&#125;,&#123;atom, Line, lager_not_running&#125;]&#125;]&#125;]&#125;&#125;, []&#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      %% &#123;undefined, _, _&#125; -&gt; &#123;error, &#123;sink_not_configured, Sink&#125;&#125;;</span><br><span class="line">      &#123;clause,Line,</span><br><span class="line">              [&#123;tuple,Line,</span><br><span class="line">                      [&#123;atom,Line,undefined&#125;,&#123;var,Line,'_'&#125;,&#123;var,Line,'_'&#125;]&#125;],</span><br><span class="line">              [],</span><br><span class="line">              %% same trick as above to avoid linter error</span><br><span class="line">              [&#123;call, Line, &#123;'<span class="keyword">fun</span>', Line, &#123;clauses, [&#123;clause, Line, [],[], [&#123;tuple,Line, [&#123;atom,Line,error&#125;, &#123;tuple,Line,[&#123;atom,Line,sink_not_configured&#125;,&#123;atom,Line,SinkName&#125;]&#125;]&#125;]&#125;]&#125;&#125;, []&#125;] </span><br><span class="line">      &#125;,</span><br><span class="line">      %% &#123;SinkPid, _, &#123;Level, Traces&#125;&#125; when ... -&gt; lager:do_log/9;</span><br></pre></td></tr></table></figure></p><p><img src="/images/lager_issue.png" alt="图 1-1"></p><p>总结一下，我们平时在用Erlang编程的时候应该不会涉及到自己编写parse_transform函数的需求，这个函数的功能非常强大，可以理解成是一个功能非常强大的宏，但是我觉得编写这个函数的话也会非常容易出错的，看下lager_transform.erl文件里面的代码就知道了。其实不单单lager使用了parse_transform函数的功能，ets也使用了这个功能，由于ets的select和match匹配的可读性实在太差了，所以可以使用ets:fun2ms/1模拟函数的写法来写匹配规则（当然不是真正的函数了，写起来有很多限制的），然后在编译的时候转化成select和match的匹配格式。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
            <tag> Lager </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang垃圾回收</title>
      <link href="/2017/05/21/Erlang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2017/05/21/Erlang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于Erlang的官方文档并没有介绍垃圾回收机制，本文参考一些论文和博客试着来解释下Erlang的内存回收机制，如果有存在错误，欢迎指正。</p></blockquote><p>要解释Erlang的垃圾回收机制必须先知道Erlang的内存管理，在Erlang中存在三种架构来实现不同的内存管理方式，在之前的很长一段时间内用的都是process-centric的架构，现在不知道有没有改成Hybrid，没有找到相关的说明文档。接下来分别介绍下这三种架构：<img src="/images/hybrid_architecture.png" alt="图1 Hybrid架构内存组织"></p><ul><li>Process-centric在该架构中，进程间通信需要复制消息，因此是O(n)操作，其中n是消息大小。内存碎片通常比较多。预计垃圾回收的时间和次数预计会很小（因为根集只需要堆叠的进程需要收集），并且在进程终止之后，其分配的内存区域可以在不间断的时间内被回收。在图1中相当于没有Shared Heap区域。</li><li>Communal这种架构的最大的优点是非常快（O(1)）的通信，只需将指针传递给接收进程，由于消息共享，所以内存的需求也比较小，并且分散性低。缺点在于，必须将所有进程的堆栈作为根集的一部分（导致增加GC延迟），并且由于进程的数据在共享堆上交错而导致可能的缓存性能差。此外，这种架构不能很好地扩展到多线程或多处理器实现，因为需要锁定以便以并行设置分配和收集共享存储器区域。简单的说所有的消息都是共享的，进程内只存了指针。</li><li>Hybrid这是一种尝试结合上述两个架构的优点的架构：进程间通信可能很快，并且进程本地堆的频繁收集的GC延迟预计会很小。对进程本地堆的垃圾收集不需要锁定，并且减少了共享堆上的压力，因此它不需要经常进行垃圾回收。而且，像Process-centric架构一样，当一个进程终止时，它的本地内存可以通过简单地将其附加到自由列表（free-list）来回收。图1是该架构的内存组织图。</li></ul><p>由于之前Erlang里面默认采用的是Process-centric的架构，所以我们这边介绍Process-centric架构的内存回收方式，如果想要了解Hybrid的内存回收方式可以参考《Message Analysis-Guided Allocation and Low-Pause》这篇论文。</p><p>Process-centric架构由于没有Shared Heap，所以内存回收只涉及到进程的内存回收和Shared Area for Binaries的内存回收。</p><h4 id="进程内存回收"><a href="#进程内存回收" class="headerlink" title="进程内存回收"></a>进程内存回收</h4><p>如图1所示，Erlang的进程和Linux的进程非常的像，由进程控制块（PCB）、堆（Stack）和栈（Heap）组成。</p><ul><li><strong> 进程控制块：</strong>进程控制模块会保存一些关于进程的信息比如它在进程表中的标识符（PID）、当前状态（运行、等待）、它的注册名、初始和当前调用，同时PCB也会保存一些指向传入消息的指针，这些传入消息是存储在堆中连接表中的。</li><li><strong> 栈：</strong>它是一个向下增长的存储区，这个存储区保存输入和输出参数、返回地址、本地变量和用于执行表达式的临时空间。</li><li><strong> 堆：</strong>它是一个向上增长的存储区，这个存储区保存进程邮箱的物理消息，像列表、元组和Binaries这种的复合项以及比像浮点数这种一个机器字更大的对象。超过64机器字的二进制项不会存储在进程私有堆里，而是被存在图1的Shared Area for Binaries里面，进程堆维护一个列表（remembered list），该列表存储该进程指向Shared Area for Binaries区域的所有指针。</li></ul><p>进程的内存回收机制采用的是分代标记清除(<a href="http://erlang.org/faq/academic.html#idp33117520" target="_blank" rel="noopener">“stop the world” generational mark-sweep collector</a>)的回收机制，通过这种机制把进程堆划分为了一个老年代（Old Generation）和新生代（Young Generation），使用minor collection对新生代进行垃圾回收，major collection进行整个堆的垃圾回收。进程垃圾回收的时候该进程会卡住，但是由于进程堆的大小一般都比较小所以回收的很快，而且这时候其他进程也在运行，所以垃圾回收不太会影响系统的响应能力。进程创建后的首次垃圾回收会使用major collection，后面在进程运行的过程中如果发现内存不够用的话会先使用minor collection进行回收，如果还是不能释放出足够的空间的话则会使用major collection进行回收，然后如果major collection还是不能释放出足够的空间的话，则会增加进程堆的大小。进程默认的min_heap_size的大小是233个字，进程堆大小的增长策略首先是<a href="https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L199-L208" target="_blank" rel="noopener">斐波纳契序列</a>增长，当堆的大小到达1.3M个字的时候堆每次只<a href="https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L215-L227" target="_blank" rel="noopener">增长20%</a>。</p><h4 id="Shared-Area-for-Binaries内存回收"><a href="#Shared-Area-for-Binaries内存回收" class="headerlink" title="Shared Area for Binaries内存回收"></a>Shared Area for Binaries内存回收</h4><p>这个区域的内存回收采用的是标记清除的方法，在每个Binary的头部上会有一个数字，记录着这个Binary被引用了几次。在进程结束之后，进程堆中的remembered list的指针指向的Binary的引用次数会被相应的减1，同样在进程垃圾回收的时候如果发现remembered list中有可以被回收的指针，该指针所指向的Binary的引用次数也会被相应的减1，当一个Bianry的引用次数为0时，这个Binary就可以被回收。</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>通过了解Erlang垃圾回收的原理，可以在垃圾回收方面对系统进行一些调优，以及减少系统的内存使用量，以下是我总结的一些建议：</p><ul><li>进程默认的min_heap_size的大小是233个字，如果能提前知道进程大概需要多少空间的话，在进程创建的时候指定min_heap_size的大小可以减少内存回收的次数。</li><li><p>由于进程内存回收是每个进程单独进行的，所以有些进程在申请了很多空间之后，很久没有运行，但是上次申请的空间其实有些已经没用了，如果进程一直不运行或者不触发回收，这部分内存就一直回收不了，这时候就需要手动的进行内存回收。建议可以定时执行以下代码进行内存回收：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[erlang:garbage_collect(P) || P &lt;- erlang:processes(),</span><br><span class="line">    &#123;status, waiting&#125; =:= erlang:process_info(P, status)],</span><br></pre></td></tr></table></figure><p>我所在的项目在每次启动的时候都会进行大量的初始化，在项目启动成功后对所有进程一次手动回收也可以节省很多内存。</p></li><li>对一些重量级的操作可以spawn一个进程出来处理，当进程结束后该部分空间就能被完全回收了，比在原进程上面执行应该会好些。</li><li>之前看到一个开源项目在处理完一个请求后就对该进程进行一次手动回收，这个好像也是一个优化，因为一个请求过后再上来一个请求的话，可能需要秒的级别，进程在这段空闲时间进行一次回收不会影响系统的响应而且还能节省内存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Erlang深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编程语言的垃圾回收机制简介</title>
      <link href="/2017/05/09/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/05/09/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>现在的编程语言中大多都包括了垃圾回收（Garbage Collection）机制，垃圾回收机制是一种自动的内存管理机制，当计算机内存中的一个对象不再需要被使用时，就会自动的让出这块内存。在早期的C/C++编程语言中，程序员需要自己手动申请和释放内存，而因在编程的过程中往往会经常忘记释放那些不再使用的内存，进而造成内存泄漏。垃圾回收机制可以大大减轻程序员的负担，减少程序员犯错的机会。垃圾回收机制最早起源于LISP语言，目前的大多数高级语言都支持内存回收机制，比如：PHP、Java、C#、Erlang等等。</p><h4 id="垃圾回收算法的原理："><a href="#垃圾回收算法的原理：" class="headerlink" title="垃圾回收算法的原理："></a>垃圾回收算法的原理：</h4><ul><li>推算出某个对象在未来的程序运行中将不再会被访问。</li><li>将这些对象占用的内存回收。</li></ul><h4 id="收集器实现"><a href="#收集器实现" class="headerlink" title="收集器实现"></a>收集器实现</h4><ul><li>引用计数收集器最早期的垃圾回收实现方法，通过对数据存储的物理空间附加多一个计数器空间，当有其他数据与其相关时则加一，反之相关解除时减一，定期检查各储存对象的计数器，为零的话则认为已经被抛弃而将其所占物理空间回收。是最简单的实现，但存在无法回收循环引用的存储对象的缺陷。</li><li>跟踪收集器近现代的垃圾回收实现方法，通过定期对若干根储存对象开始遍历，对整个程序所拥有的储存空间查找与之相关的存储对象和没相关的存储对象进行标记，然后将没相关的存储对象所占物理空间回收。</li></ul><h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><p>主要的回收算法可以分为以下几类：</p><ul><li>标记－清除先暂停整个程序的全部运行线程，让回收线程以单线程进行扫描标记，并进行直接清除回收，然后回收完成，恢复运行线程。会导致大量零碎的空闲空间碎片，导致大容量对象不容易获得连续的内存空间，而造成空间浪费。</li><li>标记－压缩和“标记－清除”相似，不同的是，回收期间同时会将保留的存储对象搬运汇集到连续的内存空间。从而集成空闲空间。</li><li>复制需要程序将所拥有的内存空间分成两个部分。程序运行所需的存储对象先存储在其中一个分区（定义为“分区0”）。同样暂停整个程序的全部运行线程后，进行标记后，回收期间将保留的存储对象搬运汇集到另一个分区（定义为“分区1”），完成回收，程序在本次回收后将接下来产生的存储对象会存储到“分区1”。在下一次回收时，两个分区的角色对调。</li><li>增量回收器需要程序将所拥有的内存空间分成若干分区。程序运行所需的存储对象会分布在这些分区中，每次只对其中一个分区进行回收操作，从而避免程序全部运行线程暂停来进行回收，允许部分线程在不影响回收行为而保持运行，并且降低回收时间，增加程序响应速度。</li><li>分代由于“复制”算法对于存活时间长，大容量的储存对象需要耗费更多的移动时间，和存在储存对象的存活时间的差异。需要程序将所拥有的内存空间分成若干分区，并标记为年轻代空间和年老代空间。程序运行所需的存储对象会先存放在年轻代分区，年轻代分区会较为频密进行较为激进垃圾回收行为，每次回收完成幸存的存储对象内的寿命计数器加一。当年轻代分区存储对象的寿命计数器达到一定阈值或存储对象的占用空间超过一定阈值时，则被移动到年老代空间，年老代空间会较少运行垃圾回收行为。一般情况下，还有永久代的空间，用于涉及程序整个运行生命周期的对象存储，例如运行代码、数据常量等，该空间通常不进行垃圾回收的操作。通过分代，存活在局限域，小容量，寿命短的存储对象会被快速回收；存活在全局域，大容量，寿命长的存储对象就较少被回收行为处理干扰。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>上面是垃圾回收的基本算法，有些编程语言的垃圾回收机制会使用上面的算法然后再自己进行改造优化性能。比如Erlang就同时使用分代回收和标记清除的算法来实现垃圾回收机制。</p>]]></content>
      
      
      <categories>
          
          <category> 基本概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang代码热更新</title>
      <link href="/2017/05/04/Erlang%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2017/05/04/Erlang%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>通过上一篇的文章<a href="/2017/05/01/Erlang动态代码载入小实验/" title="Erlang动态代码载入小实验">Erlang动态代码载入小实验</a>，我们可以了解到Erlang的热更机制，在Erlang里面会维护两个版本的代码。在新版本载入的时候如果有进程在老版本运行的话，运行那些内部调用的函数（只通过函数名调用的）代码将不会被更新，只有那些通过M:F格式调用的内部函数才能热更。举个例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 如果代码在loop上执行的话，有两种情况</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  io:format(<span class="string">"v1 ~n"</span>),  <span class="comment">%% 这条语句这种情况不能热更</span></span><br><span class="line">  loop().</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  io:format(<span class="string">"v1 ~n"</span>),  <span class="comment">%% 这条语句这种情况可以热更</span></span><br><span class="line">  ?MODULE:loop().</span><br></pre></td></tr></table></figure></p><p>在Erlang里面有分本地调用（local calls）和外部调用（external calls），本地调用的函数名是不需要被导出的。本地调用的格式是Fun(Args)，外部调用的格式是M:F(Args)。</p><p>Erlang运行时会保存一份代码的两个版本，所有本地调用的函数地址都会指向程序运行时最初的那个版本（如上面例子的情况一），而所有外部调用的函数地址都会指向最新的版本（如上面例子的情况二）。所以如果想要让代码能够热更新的话，需要使用外部调用的格式。</p><p>在我们项目中一般热更的流程是先：code:soft_purge(ModName)或者code:purge(ModName)然后再code:load_file(ModName)进行热更，针对这一热更流程我之前一直存在两个问题，最近仔细研究下才找到了答案，分别是以下这两个问题：</p><ul><li>为什么load_file之前要先soft_purge或者purge一下呢？这个是load_file函数的问题，如果在load_file执行的时候，本身要热更的模块就有一个老的版本的代码存在的话，load_file就会返回一个not_purged的错误代码，导致新版本不能正常的载入。如果load_file执行自动删除最老版本的话，就不需要purge了（像在Erlang Shell里面执行c(ModName)一样）。当然如果一个模块从来都没有热更过的话（在系统里面只有一个版本），直接使用load_file是没有问题的，不过之后就要先purge再load_file了。</li><li>soft_purge和purge有什么不同吗？函数的功能上是有所不同的，但是在我们项目的使用中几乎是没有什么不同的。soft_purge和purge的函数的功能区别是如果清理的模块的老的版本中有进程在上面运行的话，purge就会杀掉进程，然后把老的版本给清理掉，soft_purge则会清理失败。热更的时候是先执行purge然后再loadfile，由于进程一般都是在当前的版本上面执行，这时候老的版本上面不会有进程在运行，所以执行purge和soft_purge是一样的，如果真的想要热更的时候把进程杀掉的话应该执行purge/soft_purge-&gt;loadfile-&gt;purge。</li></ul><p>以上就是我对Erlang代码热更的总结～</p>]]></content>
      
      
      <categories>
          
          <category> Erlang入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang动态代码载入小实验</title>
      <link href="/2017/05/01/Erlang%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E8%BD%BD%E5%85%A5%E5%B0%8F%E5%AE%9E%E9%AA%8C/"/>
      <url>/2017/05/01/Erlang%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E8%BD%BD%E5%85%A5%E5%B0%8F%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面的内容为《Erlang程序设计（第2版）》8.10节的内容，这个动态代码载入的小实验非常的简单生动，通过这个小实验能够充分理解Erlang代码的载入机制。</p></blockquote><p>动态代码载入是内建于Erlang核心的最惊人特性之一。它的美妙之处在于你无需了解后台的运作就能顺利实现它。它的思路很简单：每当调用 someModule:someFunction(…)时，调用的总是最新版模块里的最新版函数，哪怕当代码在模块里运行时重新编译了该模块也是如此。如果在a循环调用b时重新编译了b，那么下一次a调用b时就会自动调用新版的 b 。如果有许多不同进程正在运行而它们都调用了b，那么当b被重新编译后，所有这些进程就都会调用新版的b 。为了了解它的工作原理，我们将编写两个小模块：a和b。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% b.erl</span></span><br><span class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">1</span>.</span><br></pre></td></tr></table></figure></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% a.erl</span></span><br><span class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</span><br><span class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  sleep(),</span><br><span class="line">  Val = b:x(),</span><br><span class="line">  io:format(<span class="string">"Vsn1 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</span><br><span class="line">  loop(Tag).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>现在可以编译a和b，然后启动两个a进程。</p><blockquote><p>1&gt; c(a).{ok,a}2&gt; c(b).{ok,b}3&gt; a:start(one).</p></blockquote><p>&lt;0.70.0&gt;Vsn1 (one) b:x() = 1Vsn1 (one) b:x() = 14&gt; a:start(two).</p><p>&lt;0.72.0&gt;Vsn1 (one) b:x() = 1Vsn1 (two) b:x() = 1</p><p>这些a进程休眠3秒钟后唤醒并调用b:x()，然后打印出结果。现在进入编辑器，把模块b改成下面这样：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">2</span>.</span><br></pre></td></tr></table></figure></p><p>然后在shell里面重新编译b。这是现在所发生的：</p><blockquote><p>5&gt; c(b).{ok,b}Vsn1 (one) b:x() = 2Vsn1 (two) b:x() = 2</p></blockquote><p>两个原版的a仍然在运行，但现在它们调用了新版的b。所以在模块a里调用b:x()时，实际上是在调用“b的最新版”。我们可以随心所欲地多次修改并重新编译b，而所有调用它的模块无需特别处理就会自动调用新版的b。现在已经重新编译了b，那么如果我们修改并重新编译a会发生什么？来做个试验，把a改成下面这样：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</span><br><span class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  sleep(),</span><br><span class="line">  Val = b:x(),</span><br><span class="line">  io:format(<span class="string">"Vsn2 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</span><br><span class="line">  loop(Tag).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>现在编译并启动a。</p><blockquote><p>6&gt; c(a).{ok,a}Vsn1 (two) b:x() = 2Vsn1 (one) b:x() = 2Vsn1 (two) b:x() = 27&gt; a:start(three).</p></blockquote><p>&lt;0.84.0&gt;Vsn1 (two) b:x() = 2Vsn1 (one) b:x() = 2Vsn2 (three) b:x() = 2Vsn1 (two) b:x() = 2</p><p>有趣的事情发生了。启动新版的a后，我们看到了新版正在运行。但是，那些运行最初版a的现有进程仍然在正常地运行旧版的a。现在可以试着再次修改b。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">3</span>.</span><br></pre></td></tr></table></figure></p><p>我们将在shell里重新编译b，观察会发生什么。</p><blockquote><p>8&gt; c(b).{ok,b}Vsn1 (one) b:x() = 3Vsn2 (three) b:x() = 3Vsn1 (two) b:x() = 3</p></blockquote><p>现在新旧版本的a都调用了b的最新版。最后，再次修改a（这是第三次修改a了）。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</span><br><span class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></span><br><span class="line">  sleep(),</span><br><span class="line">  Val = b:x(),</span><br><span class="line">  io:format(<span class="string">"Vsn3 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</span><br><span class="line">  loop(Tag).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>现在，当我们重新编译a并启动一个新版的a时，就会看到以下输出：</p><blockquote><p>9&gt; c(a).{ok,a}Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 310&gt; a:start(four).</p></blockquote><p>&lt;0.96.0&gt;Vsn2 (three) b:x() = 3Vsn3 (four) b:x() = 3Vsn2 (three) b:x() = 3Vsn3 (four) b:x() = 3Vsn2 (three) b:x() = 3</p><p>这段输出里的字符串是由两个最新版本的a（第2版和第3版）生成的，而那些运行第1版a代码的进程已经消失了。在任一时刻，Erlang允许一个模块的两个版本同时运行：当前版和旧版。重新编译某个模块时，任何运行旧版代码的进程都会被终止，当前版成为旧版，新编译的版本则成为当前版。可以把这想象成一个带有两个版本代码的移位寄存器。当添加新代码时，最老的版本就被清除了。一些进程可以运行旧版代码，与此同时，另一些则可以运行新版代码。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang中catch和try...catch的区别</title>
      <link href="/2017/05/01/Erlang%E4%B8%ADcatch%E5%92%8Ctry...catch%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/05/01/Erlang%E4%B8%ADcatch%E5%92%8Ctry...catch%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在Erlang的错误处理中，catch并不是try…catch的缩写，try…catch和catch是不同的。下面我将通过一个例子来区别出他们的不同，为以后的使用做一个参考。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% exception_test.erl 代码文件</span></span><br><span class="line"><span class="keyword">-module</span><span class="params">(exception_test)</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">1</span>)</span> -&gt;</span> a;</span><br><span class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">2</span>)</span> -&gt;</span> throw(a);</span><br><span class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">3</span>)</span> -&gt;</span> error(a);</span><br><span class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">4</span>)</span> -&gt;</span> exit(a);</span><br><span class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">5</span>)</span> -&gt;</span> &#123;'EXIT', a&#125;.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test_use_catch</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    [&#123;I, catch generate_exception(I)&#125; || I &lt;- lists:seq(<span class="number">1</span>, <span class="number">5</span>)].</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test_user_try_catch</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  [<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">try</span> generate_exception(I) <span class="keyword">of</span></span><br><span class="line">        NormalRes -&gt;</span><br><span class="line">            &#123;I, normal, NormalRes&#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">        ErrorType : Error -&gt;</span><br><span class="line">            &#123;I, exception, ErrorType, Error&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span> || I &lt;- lists:seq(<span class="number">1</span>, <span class="number">5</span>)].</span><br></pre></td></tr></table></figure></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 执行exception_test:test_use_catch().函数的返回结果</span></span><br><span class="line">[&#123;<span class="number">1</span>,a&#125;,</span><br><span class="line"> &#123;<span class="number">2</span>,a&#125;,</span><br><span class="line"> &#123;<span class="number">3</span>,</span><br><span class="line">  &#123;'EXIT',&#123;a,[&#123;exception_test,generate_exception,<span class="number">1</span>,</span><br><span class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">7</span>&#125;]&#125;,</span><br><span class="line">              &#123;exception_test,'-test_use_catch/<span class="number">0</span>-lc$^<span class="number">0</span>/<span class="number">1</span>-<span class="number">0</span>-',<span class="number">1</span>,</span><br><span class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">12</span>&#125;]&#125;,</span><br><span class="line">              &#123;exception_test,'-test_use_catch/<span class="number">0</span>-lc$^<span class="number">0</span>/<span class="number">1</span>-<span class="number">0</span>-',<span class="number">1</span>,</span><br><span class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">12</span>&#125;]&#125;,</span><br><span class="line">              &#123;erl_eval,do_apply,<span class="number">6</span>,[&#123;file,<span class="string">"erl_eval.erl"</span>&#125;,&#123;line,<span class="number">674</span>&#125;]&#125;,</span><br><span class="line">              &#123;shell,exprs,<span class="number">7</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">686</span>&#125;]&#125;,</span><br><span class="line">              &#123;shell,eval_exprs,<span class="number">7</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">641</span>&#125;]&#125;,</span><br><span class="line">              &#123;shell,eval_loop,<span class="number">3</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">626</span>&#125;]&#125;]&#125;&#125;&#125;,</span><br><span class="line"> &#123;<span class="number">4</span>,&#123;'EXIT',a&#125;&#125;,</span><br><span class="line"> &#123;<span class="number">5</span>,&#123;'EXIT',a&#125;&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 执行exception_test:test_user_try_catch().函数的返回结果</span></span><br><span class="line">[&#123;<span class="number">1</span>,normal,a&#125;,</span><br><span class="line"> &#123;<span class="number">2</span>,exception,throw,a&#125;,</span><br><span class="line"> &#123;<span class="number">3</span>,exception,error,a&#125;,</span><br><span class="line"> &#123;<span class="number">4</span>,exception,exit,a&#125;,</span><br><span class="line"> &#123;<span class="number">5</span>,normal,&#123;'EXIT',a&#125;&#125;]</span><br></pre></td></tr></table></figure><p>通过上面的列子我们可以看到，如果使用标准的try…catch来处理错误的话，调用者是可以正确的识别出错误，然后对错误进行相应的处理的。</p><p>但是如果用的是catch来处理错误的话，情况是不能乐观的，使用catch处理错误，exception(1)和exception(2)返回的结果是一样的，exception(4)和exception(5)返回的结果是一样的。catch在处理throw的时候只是简单的把throw的内容给返回，在处理exit的时候会返回一个tuple是带’EXIT’和exit里面的内容的结果，在处理error的时候会把堆栈给打印出来（这点比较人性化）。</p><p>所以大家在使用catch的时候要注意catch的返回值，正常的情况下还是推荐使用try…catch来处理错误，不然很容易就会掉到坑里面的。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>吴恩达机器学习课程练习实现</title>
      <link href="/2017/05/01/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%BB%83%E4%B9%A0%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/05/01/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%BB%83%E4%B9%A0%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>由于当前机器学习大火，让我对机器学习产生浓厚的兴趣，所以我就上网查了下机器学习的入门教程，大多数的人还是比较推荐吴恩达老师的机器学习课程的。所以我就在Coursera上面学习了吴恩达的机器学习课程，现在已经顺利的毕业了。在Coursera上面每学完一小节课程都会有相应的练习，系统会自动对你提交的练习进行打分，要达到指定的分数才能顺利通过，这点Coursera的体验还是做的比较好的，但是由于国内网络的原因，在Coursera上面看视频，如果不使用科学上网的话，有时候是看不了的。我做练习用的是Octave，用Octave提交代码的时候会报错，需要在练习中进行以下的代码替换:</p><blockquote><p>lib/submitWithConfiguration.m 文件66行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responseBody = urlread(submissionUrl, &apos;post&apos;, params);</span><br></pre></td></tr></table></figure><p>替换成：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[code, responseBody] = system(sprintf(&apos;echo jsonBody=%s | curl -k -X POST -d @- %s&apos;, body, submissionUrl));</span><br></pre></td></tr></table></figure></p><p>最后附上我的练习代码，有需要的可以自取，如果对你有帮助的话，记得给我星星哈～代码地址：<a href="https://github.com/lintingbin2009/machine-learning-ex" target="_blank" rel="noopener">https://github.com/lintingbin2009/machine-learning-ex</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer——C语言实现</title>
      <link href="/2017/05/01/%E5%89%91%E6%8C%87offer%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/05/01/%E5%89%91%E6%8C%87offer%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>之前实习的时候为了能够比较顺利的找到一个实习，特意练习了下代码能力，期间看了挺多的算法书籍，然后把剑指offer书本上的那些练习大部分都自己用C语言实现了一遍。这些练习的代码都已经传到了Github上面了，地址是：<a href="https://github.com/lintingbin2009/C-language/tree/master/%E5%89%91%E6%8C%87offer" target="_blank" rel="noopener">https://github.com/lintingbin2009/C-language/tree/master/%E5%89%91%E6%8C%87offer</a>有需要的可以自取，如果觉得对你有帮助的话，记得给我个星星哈～</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Erlang数据类型</title>
      <link href="/2017/04/30/Erlang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/04/30/Erlang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Erlang提供的数据类型，包括以下几种：</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>数字(Number)数字类型又包含整数(integers)和浮点数(floats)类型，其中整数是精确的而且是支持大数的，小数是满足IEEE754规则的64位浮点数。Erlang支持ASCII或者Unicode转换成整数值，同时支持整数不同进制的表示。（‘%’后的内容为注释）<blockquote><p>1&gt; $a.　　%% ASCII表中的a是97972&gt; $哈.217043&gt; $\n.104&gt; 2#100.　　%% 用100表示的二进制是445&gt; 4#100.166&gt; 16#100.256</p></blockquote></li><li>原子(Atom)原子可以理解为一个不可变的常量，必须以小写字母开头，如果要以大写、下划线或者其他的特殊字符开头，必须加上单引号。原子在Erlang里面是存在一张表上面的，原子的个数有上限，大概是在一百万个左右。<blockquote><p>test‘Myhome’‘_hero’</p></blockquote></li><li>位串和二进制(Bit Strings and Binaries)在大多数情况下，二进制型里的位数都会是8的整数倍，因此对应一个字节串。如果位数不是8的整数倍，就称这段数据为位串（bitstring）。所以当我们说位串时，是在强调数据里的位数不是8的整数倍。位语法是一种表示法，用于从二进制数据里提取或加入单独的位或者位串。当你编写底层代码，以位为单位打包和解包二进制数据时，就会发现位语法是极其有用的。<blockquote><p>1&gt; &lt;&lt;257,1,2,3,5&gt;&gt;. 　　%%二进制型的元素如果大于8位的会自动截断，257截断成1&lt;&lt;1,1,2,3,5&gt;&gt;2&gt; &lt;&lt;0:7,1:2&gt;&gt;. 　　%%二进制型位数如果不是8的整数倍就会产生位串，这边多了1位1&lt;&lt;0,1:1&gt;&gt;3&gt; &lt;&lt;0:3,0:4,1:2&gt;&gt;.&lt;&lt;0,1:1&gt;&gt;</p></blockquote></li><li>引用(Reference)可以通过make_ref/0函数来创建一个引用，引用在Erlang程序运行时调用make_ref函数产生的是全局唯一的。比如timer模块在创建一个定时任务的时候通常会返回一个引用，可以通过这个引用来取消定时任务。</li><li>函数(Fun)函数在Erlang里面也算是一种数据类型，通过给变量绑定函数，可以通过变量名来执行函数。<blockquote><p>1&gt; Fun = fun(X) -&gt; X * X end.</p></blockquote>#Fun&lt;erl_eval.6.50752066&gt;2&gt; Fun(9).81</li><li>端口标识符(Port Identifier)端口用于与外界通信，由通过函数open_port/2来创建。消息可以通过端口进行收发，但是这些消息必须遵守所谓“端口协议”(port protocol)的规则。</li><li>进程标识符(Pid)当创建一个进程的时候会产生一个进程标识符，可以通过这个进程标识符和进程进行通讯。<blockquote><p>1&gt; Process1 = spawn(fun() -&gt; receive X -&gt; io:format(“recv ~p, bye~n”, [X]) end end).</p></blockquote>&lt;0.34.0&gt;　　%% 创建一个进程等待接收消息2&gt; Process1 ! my_test.　　%% 给进程发消息recv my_test, byemy_test</li></ul><h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><p>为了方便定义以下的这些复合类型，我把上述的所有基本类型都称为Term。</p><ul><li><p>元组(Tuple)元组类似于C语言里面的结构体(Struct)，是由固定数量的元素组成的复合数据类型，可以定义成如下结构：</p><blockquote><p>{Term1, Term2, …, TermN}</p></blockquote><p>可以通过模式匹配或者element/2函数来提取元组里面元素的值，通过setelement/3来设置元组里面元素的值，size可以取元组里面元素的个数。</p><blockquote><p>1&gt; P = {adam,24,{july,29}}.{adam,24,{july,29}}2&gt; element(1,P).adam3&gt; element(3,P).{july,29}4&gt; P2 = setelement(2,P,25).{adam,25,{july,29}}5&gt; size(P).36&gt; {adam, Old, {Month, Day}} = P.{adam,24,{july,29}}7&gt; Old.24</p></blockquote></li><li><p>映射组(Map)映射组是一个由多个Key-Vaule结构组成的符合数据类型，可以定义为如下结构：</p><blockquote><p>#{Key1=&gt;Value1, Key2=&gt;Value2, …, KeyN=&gt;ValueN}其中Key、Value都是Term</p></blockquote><p>可以通过maps模块提供的一些函数对映射组进行操作</p><blockquote><p>1&gt; M1 = #{name=&gt;adam,age=&gt;24,date=&gt;{july,29}}.</p></blockquote><p>#{age =&gt; 24,date =&gt; {july,29},name =&gt; adam}2&gt; maps:get(name,M1).adam3&gt; maps:get(date,M1).{july,29}4&gt; M2 = maps:update(age,25,M1).#{age =&gt; 25,date =&gt; {july,29},name =&gt; adam}5&gt; map_size(M).36&gt; map_size(#{}).0</p></li><li><p>列表(List)列表类似于其他语言里面的数组，是由可变数量的元素组成的复合数据结构，可以定义成如下结构：</p><blockquote><p>[Term1, Term2, …, TermN]</p></blockquote><p>在Erlang里面，列表由一个头和一个尾组成，空列表也是一个列表。所以列表也可以有一个递归的定义  </p><blockquote><p>List = [Term| List] | [][] 是一个列表, 因此 [c|[]] 是一个列表, 因此 [b|[c|[]]] 是一个列表, 因此<br>[a|[b|[c|[]]]] 是一个列表, 或者简写为 [a,b,c]</p></blockquote><p>lists模块可以提供大量函数对列表进行操作：</p><blockquote><p>1&gt; L = [3,3,4,2,1,2,34].[3,3,4,2,1,2,34]2&gt; length(L).73&gt; lists:sort(L).[1,2,2,3,3,4,34]4&gt; lists:reverse(L).[34,2,1,2,4,3,3]</p></blockquote></li></ul><h4 id="其他类型-不算数据类型"><a href="#其他类型-不算数据类型" class="headerlink" title="其他类型(不算数据类型)"></a>其他类型(不算数据类型)</h4><ul><li>字符串(String)字符串用一对双引号括起来，但不算是Erlang中的数据类型。字符串仅仅是列表的一个缩写，比如：字符串”hello”是列表[$h,$e,$l,$l,$o]的一个缩写。两个相邻的字符串在编译的时候连接成一个字符串，不会造成任何运行时开销。<blockquote><p>1&gt; “hello” “ “ “world”.“hello world”</p></blockquote></li><li><p>记录(Record)记录其实就是元组的另一种形式。通过使用记录，可以给元组里的各个元素关联一个名称。对记录的处理是在编译的时候完成的，在运行时是不会有记录的，可以把记录理解成是元组的一种语法糖。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(person)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([new/<span class="number">2</span>])</span>.</span><br><span class="line"><span class="keyword">-record</span><span class="params">(person, &#123;name, age&#125;)</span>.</span><br><span class="line"><span class="function"><span class="title">new</span><span class="params">(Name, Age)</span> -&gt;</span></span><br><span class="line">    #person&#123;name=Name, age=Age&#125;.</span><br></pre></td></tr></table></figure><blockquote><p>1&gt; person:new(ernie, 44).{person,ernie,44}</p></blockquote></li><li><p>布尔类型(Boolean)在Erlang中没有Boolean类型。而是用原子true和false来表示布尔值。</p><blockquote><p>1&gt; 2 =&lt; 3.true2&gt; true or false.true</p></blockquote></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>Erlang提供了一些内置的类型转换函数，可以方便地进行类型转换，下面是一些类型转换的例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; atom_to_list(hello).</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="number">2</span>&gt; list_to_atom(<span class="string">"hello"</span>).</span><br><span class="line">hello</span><br><span class="line"><span class="number">3</span>&gt; binary_to_list(&lt;&lt;<span class="string">"hello"</span>&gt;&gt;).</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="number">4</span>&gt; binary_to_list(&lt;&lt;<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>&gt;&gt;).</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line"><span class="number">5</span>&gt; list_to_binary(<span class="string">"hello"</span>).</span><br><span class="line">&lt;&lt;<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>&gt;&gt;</span><br><span class="line"><span class="number">6</span>&gt; float_to_list(<span class="number">7.0</span>).</span><br><span class="line"><span class="string">"7.00000000000000000000e+00"</span></span><br><span class="line"><span class="number">7</span>&gt; list_to_float(<span class="string">"7.000e+00"</span>).</span><br><span class="line"><span class="number">7.0</span></span><br><span class="line"><span class="number">8</span>&gt; integer_to_list(<span class="number">77</span>).</span><br><span class="line"><span class="string">"77"</span></span><br><span class="line"><span class="number">9</span>&gt; list_to_integer(<span class="string">"77"</span>).</span><br><span class="line"><span class="number">77</span></span><br><span class="line"><span class="number">10</span>&gt; tuple_to_list(&#123;a,b,c&#125;).</span><br><span class="line">[a,b,c]</span><br><span class="line"><span class="number">11</span>&gt; list_to_tuple([a,b,c]).</span><br><span class="line">&#123;a,b,c&#125;</span><br><span class="line"><span class="number">12</span>&gt; term_to_binary(&#123;a,b,c&#125;).</span><br><span class="line">&lt;&lt;<span class="number">131</span>,<span class="number">104</span>,<span class="number">3</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">99</span>&gt;&gt;</span><br><span class="line"><span class="number">13</span>&gt; binary_to_term(&lt;&lt;<span class="number">131</span>,<span class="number">104</span>,<span class="number">3</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">99</span>&gt;&gt;).</span><br><span class="line">&#123;a,b,c&#125;</span><br><span class="line"><span class="number">14</span>&gt; binary_to_integer(&lt;&lt;<span class="string">"77"</span>&gt;&gt;).</span><br><span class="line"><span class="number">77</span></span><br><span class="line"><span class="number">15</span>&gt; integer_to_binary(<span class="number">77</span>).</span><br><span class="line">&lt;&lt;<span class="string">"77"</span>&gt;&gt;</span><br><span class="line"><span class="number">16</span>&gt; float_to_binary(<span class="number">7.0</span>).</span><br><span class="line">&lt;&lt;<span class="string">"7.00000000000000000000e+00"</span>&gt;&gt;</span><br><span class="line"><span class="number">17</span>&gt; binary_to_float(&lt;&lt;<span class="string">"7.000e+00&gt;&gt;"</span>).</span><br><span class="line"><span class="number">7.0</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Erlang入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么使用Erlang?</title>
      <link href="/2017/04/29/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Erlang/"/>
      <url>/2017/04/29/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Erlang/</url>
      
        <content type="html"><![CDATA[<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p>如果问我觉得Erlang最重要的特性是什么的话，我觉得应该是并发。</p><p>并发能够带来的好处是不言而喻的，比如：</p><ul><li>性能现在的计算机由于主频的限制，都在往多核的方式发展，有些比较高端的机器甚至有几十个核心。如果编写的程序都是顺序运行的话将会严重浪费多核计算机的计算能力。Erlang本身是面向并发编程的，如果把之前在单核机器上面跑的Erlang程序放到多核机器上面跑的话，性能将会极大的提高。</li><li>扩展性如果在一台机器上面运行Erlang程序还不能满足性能的要求的话，可以简单的升级机器的CPU核心个数，甚至可以经过简单的改造把不同的进程分配到不同的机器上面运行，通过水平扩展方式来满足高并发的业务需求。</li><li>容错性Erlang内部实现的进程是相互独立的，一个进程的崩溃并不会影响到另外一个进程的运行，同时Erlang内部还OTP框架来保证系统的容错性。</li><li>清晰性Erlang世界观和现实的世界是一样的，在大多数的编程语言里面事情都是顺序发生的，但是在Erlang的世界里面所有的事件都是并发的，在编写程序的时候能够比较清晰的把现实世界事件的并行发生的的特性映射到Erlang的并发编程上面。</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>快速介绍下Erlang比较与众不认同的特性：</p><ul><li>Erlang Shell在编写Erlang程序的过程中会有很多时间花费在Erlang Shell里面，Erlang Shell类似于Linux的Bash，开发者能在Erlang Shell里面运行表达式，通过这种交互方式，开发者能够在Erlang Shell里面调试正在运行的Erlang程序（包括远程的Erlang程序）。</li><li>= 操作符在一般的编程语言里面，=表示赋值操作，一个变量能够被多次赋值。但是在Erlang里面变量是不可变的，一旦通过=绑定之后，该变量的值就不能发生改变了，重复绑定会导致异常。</li><li>变量和原子所有Erlang的变量都是以大写字母开头的，比如：One、This和My_baby这些都是变量。以小写字母开头的则是符号常量（被称为原子：atom），比如：person、one和hello_world。</li><li>进程Erlang的进程是Erlang虚拟机内部自己实现的进程，非常轻量级，刚开始创建的时候每个进程的大小也就2KB左右，1GB的内存就可以创建50万个进程。同时进程间没有共享内存，进程间的通信通过消息转发实现。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Erlang的特性决定了它是一门比较另类的语言，相信第一次见到它的人会觉得很吃惊，世界上居然会有这样的一门语言。但正是由于这些看似奇怪的特性，让Erlang能够在当今多核的时代充分的发挥它的能力。</p>]]></content>
      
      
      <categories>
          
          <category> Erlang入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Erlang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用HEXO在Github上搭建个人博客</title>
      <link href="/2017/04/29/%E4%BD%BF%E7%94%A8HEXO%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/04/29/%E4%BD%BF%E7%94%A8HEXO%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>在平时的工作中经常会遇到一些问题，在解决问题的时候如果能够及时记录下来是最好不过的，所以一直想维护一个自己的博客。虽然国内有各种技术博客（比如：CSDN，博客园）之类的第三方博客平台，但是作为一个程序员，不搭建一个自己的博客感觉不够酷。所以我就选择使用HEXO在Github上面搭建自己的个人博客。</p><p>下面的安装教程都是在Window x64的环境下进行的</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><blockquote><p>申请Github账户</p></blockquote><p>由于博客是要搭建在Github上面的，所有必须要有一个Github账号来上传代码，这样才能最终显示自己的博客内容。在建立完Github账号后，需要创建一个Repositories，这个Repositories的名字的格式是:your_user_name.github.io这样的。</p><blockquote><p>安装Git软件</p></blockquote><p>有了Github账号后还需要有软件能把本地的代码上传到Github上面，所就安装Git软件，安装Git也非常简单，直接下一步就行了。</p><blockquote><p>安装NodeJs</p></blockquote><p>由于Hexo是基于NodeJs的框架，所以使用Hexo前要先安装NodeJs，安装NodeJs也非常简单，只需要下载软件，点下一步就行了。现在新的版本的NodeJs，会同时安装npm（Node包管理软件），所以安装起来非常简单。</p><blockquote><p>安装Hexo</p></blockquote><p>把上面的软件都安装好了之后就可以开始安装Hexo了，打开window的终端，在终端中输入下面的命令开始安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><blockquote><p>初始化</p></blockquote><p>创建一个文件夹，如：MyBlog之类，然后进到MyBlog文件夹下执行以下初始化命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>到了这一步之后，Hexo算初始化完成，可以正常的使用了。</p><blockquote><p>生成静态页面</p></blockquote><p>继续在MyBlog目录下执行如下命令，生成静态页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate // 简写 hexo g</span><br></pre></td></tr></table></figure><blockquote><p>本地启动</p></blockquote><p>启动本地服务，进行文章预览调试，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server   // 动态启动，有修改发生会自动检测，简写 hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到博客的页面，当然也在服务器启动的时候加上-p来指定自己想要的端口</p><h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><blockquote><p>安装 hexo-deployer-git</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>配置部署环境</p></blockquote><p>在MyBlog的目录下会有一个_config.yml的文件，该文件为Hexo项目的配置文件，打开该文件然后把deploy部分改成下列格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/lintingbin2009/lintingbin2009.github.io.git  // lintingbin2009替换成你自己的名字</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p>开始部署</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署完成之后就可以使用your_username.github.io来访问你的个人博客了, 之后的部署命令应该是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总的来说用Hexo在Github上搭建个人博客还是比较简单的，当然这边只是涉及到最简单的搭建，还没有涉及到主题的更换、评论系统，统计系统。更多关于Hexo的使用文档可以浏览Hexo的中文官网，里面有详细的使用教程和很多可选的精美主题。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
