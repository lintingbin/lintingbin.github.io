<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darcy&#39;s Blog</title>
  <subtitle>不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lintingbin2009.github.io/"/>
  <updated>2017-05-21T11:00:28.840Z</updated>
  <id>https://lintingbin2009.github.io/</id>
  
  <author>
    <name>lintingbin2009</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Erlang垃圾回收</title>
    <link href="https://lintingbin2009.github.io/2017/05/21/Erlang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>https://lintingbin2009.github.io/2017/05/21/Erlang垃圾回收/</id>
    <published>2017-05-21T05:02:42.000Z</published>
    <updated>2017-05-21T11:00:28.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于Erlang的官方文档并没有介绍垃圾回收机制，本文参考一些论文和博客试着来解释下Erlang的内存回收机制，如果有存在错误，欢迎指正。</p>
</blockquote>
<p>要解释Erlang的垃圾回收机制必须先知道Erlang的内存管理，在Erlang中存在三种架构来实现不同的内存管理方式，在之前的很长一段时间内用的都是process-centric的架构，现在不知道有没有改成Hybrid，没有找到相关的说明文档。接下来分别介绍下这三种架构：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/hybrid_architecture.png" alt="图1 Hybrid架构内存组织" title="">
                </div>
                <div class="image-caption">图1 Hybrid架构内存组织</div>
            </figure></p>
<ul>
<li>Process-centric<br>在该架构中，进程间通信需要复制消息，因此是O(n)操作，其中n是消息大小。内存碎片通常比较多。预计垃圾回收的时间和次数预计会很小（因为根集只需要堆叠的进程需要收集），并且在进程终止之后，其分配的内存区域可以在不间断的时间内被回收。在图1中相当于没有Shared Heap区域。</li>
<li>Communal<br>这种架构的最大的优点是非常快（O(1)）的通信，只需将指针传递给接收进程，由于消息共享，所以内存的需求也比较小，并且分散性低。缺点在于，必须将所有进程的堆栈作为根集的一部分（导致增加GC延迟），并且由于进程的数据在共享堆上交错而导致可能的缓存性能差。此外，这种架构不能很好地扩展到多线程或多处理器实现，因为需要锁定以便以并行设置分配和收集共享存储器区域。简单的说所有的消息都是共享的，进程内只存了指针。</li>
<li>Hybrid<br>这是一种尝试结合上述两个架构的优点的架构：进程间通信可能很快，并且进程本地堆的频繁收集的GC延迟预计会很小。对进程本地堆的垃圾收集不需要锁定，并且减少了共享堆上的压力，因此它不需要经常进行垃圾回收。而且，像Process-centric架构一样，当一个进程终止时，它的本地内存可以通过简单地将其附加到自由列表（free-list）来回收。图1是该架构的内存组织图。</li>
</ul>
<p>由于之前Erlang里面默认采用的是Process-centric的架构，所以我们这边介绍Process-centric架构的内存回收方式，如果想要了解Hybrid的内存回收方式可以参考《Message Analysis-Guided Allocation and Low-Pause》这篇论文。</p>
<p>Process-centric架构由于没有Shared Heap，所以内存回收只涉及到进程的内存回收和Shared Area for Binaries的内存回收。</p>
<h4 id="进程内存回收"><a href="#进程内存回收" class="headerlink" title="进程内存回收"></a>进程内存回收</h4><p>如图1所示，Erlang的进程和Linux的进程非常的像，由进程控制块（PCB）、堆（Stack）和栈（Heap）组成。</p>
<ul>
<li><strong> 进程控制块：</strong>进程控制模块会保存一些关于进程的信息比如它在进程表中的标识符（PID）、当前状态（运行、等待）、它的注册名、初始和当前调用，同时PCB也会保存一些指向传入消息的指针，这些传入消息是存储在堆中连接表中的。</li>
<li><strong> 栈：</strong>它是一个向下增长的存储区，这个存储区保存输入和输出参数、返回地址、本地变量和用于执行表达式的临时空间。</li>
<li><strong> 堆：</strong>它是一个向上增长的存储区，这个存储区保存进程邮箱的物理消息，像列表、元组和Binaries这种的复合项以及比像浮点数这种一个机器字更大的对象。超过64机器字的二进制项不会存储在进程私有堆里，而是被存在图1的Shared Area for Binaries里面，进程堆维护一个列表（remembered list），该列表存储该进程指向Shared Area for Binaries区域的所有指针。</li>
</ul>
<p>进程的内存回收机制采用的是分代标记清除(<a href="http://erlang.org/faq/academic.html#idp33117520" target="_blank" rel="external">“stop the world” generational mark-sweep collector</a>)的回收机制，通过这种机制把进程堆划分为了一个老年代（Old Generation）和新生代（Young Generation），使用minor collection对新生代进行垃圾回收，major collection进行整个堆的垃圾回收。进程垃圾回收的时候该进程会卡住，但是由于进程堆的大小一般都比较小所以回收的很快，而且这时候其他进程也在运行，所以垃圾回收不太会影响系统的响应能力。进程创建后的首次垃圾回收会使用major collection，后面在进程运行的过程中如果发现内存不够用的话会先使用minor collection进行回收，如果还是不能释放出足够的空间的话则会使用major collection进行回收，然后如果major collection还是不能释放出足够的空间的话，则会增加进程堆的大小。进程默认的min_heap_size的大小是233个字，进程堆大小的增长策略首先是<a href="https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L199-L208" target="_blank" rel="external">斐波纳契序列</a>增长，当堆的大小到达1.3M个字的时候堆每次只<a href="https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L215-L227" target="_blank" rel="external">增长20%</a>。</p>
<h4 id="Shared-Area-for-Binaries内存回收"><a href="#Shared-Area-for-Binaries内存回收" class="headerlink" title="Shared Area for Binaries内存回收"></a>Shared Area for Binaries内存回收</h4><p>这个区域的内存回收采用的是标记清除的方法，在每个Binary的头部上会有一个数字，记录着这个Binary被引用了几次。在进程结束之后，进程堆中的remembered list的指针指向的Binary的引用次数会被相应的减1，同样在进程垃圾回收的时候如果发现remembered list中有可以被回收的指针，该指针所指向的Binary的引用次数也会被相应的减1，当一个Bianry的引用次数为0时，这个Binary就可以被回收。</p>
<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><ul>
<li>进程默认的min_heap_size的大小是233个字，如果能提前知道进程大概需要多少空间的话，在进程创建的时候指定min_heap_size的大小可以减少内存回收的次数。</li>
<li><p>由于进程内存回收是每个进程单独进行的，所以有些进程在申请了很多空间之后，很久没有运行，但是上次申请的空间其实有些已经没用了，如果进程一直不运行或者不触发回收，这部分内存就一直回收不了，这时候就需要手动的进行内存回收。建议可以定时执行以下代码进行内存回收：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[erlang:garbage_collect(P) || P &lt;- erlang:processes(),</div><div class="line">    &#123;status, waiting&#125; =:= erlang:process_info(P, status)],</div></pre></td></tr></table></figure>
<p>我所在的项目在每次启动的时候都会进行大量的初始化，在项目启动成功后对所有进程一次手动回收也可以节省很多内存。</p>
</li>
<li>对一些重量级的操作可以spawn一个进程出来处理，当进程结束后该部分空间就能被完全回收了，比在原进程上面执行应该会好些。</li>
<li>之前看到一个开源项目在处理完一个请求后就对该进程进行一次手动回收，这个好像也是一个优化，因为一个请求过后再上来一个请求的话，可能需要秒的级别，进程在这段空闲时间进行一次回收不会影响系统的响应而且还能节省内存。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于Erlang的官方文档并没有介绍垃圾回收机制，本文参考一些论文和博客试着来解释下Erlang的内存回收机制，如果有存在错误，欢迎指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要解释Erlang的垃圾回收机制必须先知道Erlang的内存管理，
    
    </summary>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
      <category term="GC" scheme="https://lintingbin2009.github.io/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的垃圾回收机制简介</title>
    <link href="https://lintingbin2009.github.io/2017/05/09/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://lintingbin2009.github.io/2017/05/09/编程语言的垃圾回收机制简介/</id>
    <published>2017-05-09T03:00:47.000Z</published>
    <updated>2017-05-09T03:52:38.940Z</updated>
    
    <content type="html"><![CDATA[<p>现在的编程语言中大多都包括了垃圾回收（Garbage Collection）机制，垃圾回收机制是一种自动的内存管理机制，当计算机内存中的一个对象不再需要被使用时，就会自动的让出这块内存。在早期的C/C++编程语言中，程序员需要自己手动申请和释放内存，而因在编程的过程中往往会经常忘记释放那些不再使用的内存，进而造成内存泄漏。垃圾回收机制可以大大减轻程序员的负担，减少程序员犯错的机会。垃圾回收机制最早起源于LISP语言，目前的大多数高级语言都支持内存回收机制，比如：PHP、Java、C#、Erlang等等。</p>
<h4 id="垃圾回收算法的原理："><a href="#垃圾回收算法的原理：" class="headerlink" title="垃圾回收算法的原理："></a>垃圾回收算法的原理：</h4><ul>
<li>推算出某个对象在未来的程序运行中将不再会被访问。</li>
<li>将这些对象占用的内存回收。</li>
</ul>
<h4 id="收集器实现"><a href="#收集器实现" class="headerlink" title="收集器实现"></a>收集器实现</h4><ul>
<li>引用计数收集器<br>最早期的垃圾回收实现方法，通过对数据存储的物理空间附加多一个计数器空间，当有其他数据与其相关时则加一，反之相关解除时减一，定期检查各储存对象的计数器，为零的话则认为已经被抛弃而将其所占物理空间回收。是最简单的实现，但存在无法回收循环引用的存储对象的缺陷。</li>
<li>跟踪收集器<br>近现代的垃圾回收实现方法，通过定期对若干根储存对象开始遍历，对整个程序所拥有的储存空间查找与之相关的存储对象和没相关的存储对象进行标记，然后将没相关的存储对象所占物理空间回收。</li>
</ul>
<h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><p>主要的回收算法可以分为以下几类：</p>
<ul>
<li>标记－清除<br>先暂停整个程序的全部运行线程，让回收线程以单线程进行扫描标记，并进行直接清除回收，然后回收完成，恢复运行线程。会导致大量零碎的空闲空间碎片，导致大容量对象不容易获得连续的内存空间，而造成空间浪费。</li>
<li>标记－压缩<br>和“标记－清除”相似，不同的是，回收期间同时会将保留的存储对象搬运汇集到连续的内存空间。从而集成空闲空间。</li>
<li>复制<br>需要程序将所拥有的内存空间分成两个部分。程序运行所需的存储对象先存储在其中一个分区（定义为“分区0”）。同样暂停整个程序的全部运行线程后，进行标记后，回收期间将保留的存储对象搬运汇集到另一个分区（定义为“分区1”），完成回收，程序在本次回收后将接下来产生的存储对象会存储到“分区1”。在下一次回收时，两个分区的角色对调。</li>
<li>增量回收器<br>需要程序将所拥有的内存空间分成若干分区。程序运行所需的存储对象会分布在这些分区中，每次只对其中一个分区进行回收操作，从而避免程序全部运行线程暂停来进行回收，允许部分线程在不影响回收行为而保持运行，并且降低回收时间，增加程序响应速度。</li>
<li>分代<br>由于“复制”算法对于存活时间长，大容量的储存对象需要耗费更多的移动时间，和存在储存对象的存活时间的差异。需要程序将所拥有的内存空间分成若干分区，并标记为年轻代空间和年老代空间。程序运行所需的存储对象会先存放在年轻代分区，年轻代分区会较为频密进行较为激进垃圾回收行为，每次回收完成幸存的存储对象内的寿命计数器加一。当年轻代分区存储对象的寿命计数器达到一定阈值或存储对象的占用空间超过一定阈值时，则被移动到年老代空间，年老代空间会较少运行垃圾回收行为。一般情况下，还有永久代的空间，用于涉及程序整个运行生命周期的对象存储，例如运行代码、数据常量等，该空间通常不进行垃圾回收的操作。<br>通过分代，存活在局限域，小容量，寿命短的存储对象会被快速回收；存活在全局域，大容量，寿命长的存储对象就较少被回收行为处理干扰。</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>上面是垃圾回收的基本算法，有些编程语言的垃圾回收机制会使用上面的算法然后再自己进行改造优化性能。比如Erlang就同时使用分代回收和标记清除的算法来实现垃圾回收机制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的编程语言中大多都包括了垃圾回收（Garbage Collection）机制，垃圾回收机制是一种自动的内存管理机制，当计算机内存中的一个对象不再需要被使用时，就会自动的让出这块内存。在早期的C/C++编程语言中，程序员需要自己手动申请和释放内存，而因在编程的过程中往往会
    
    </summary>
    
      <category term="基本概念" scheme="https://lintingbin2009.github.io/categories/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
    
      <category term="GC" scheme="https://lintingbin2009.github.io/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>Erlang代码热更新</title>
    <link href="https://lintingbin2009.github.io/2017/05/04/Erlang%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://lintingbin2009.github.io/2017/05/04/Erlang代码热更新/</id>
    <published>2017-05-04T15:30:18.000Z</published>
    <updated>2017-05-05T13:23:01.626Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇的文章<a href="/2017/05/01/Erlang动态代码载入小实验/" title="Erlang动态代码载入小实验">Erlang动态代码载入小实验</a>，我们可以了解到Erlang的热更机制，在Erlang里面会维护两个版本的代码。在新版本载入的时候如果有进程在老版本运行的话，运行那些内部调用的函数（只通过函数名调用的）代码将不会被更新，只有那些通过M:F格式调用的内部函数才能热更。举个例子：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% 如果代码在loop上执行的话，有两种情况</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></div><div class="line">  io:format(<span class="string">"v1 ~n"</span>),  <span class="comment">%% 这条语句这种情况不能热更</span></div><div class="line">  loop().</div><div class="line"></div><div class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></div><div class="line">  io:format(<span class="string">"v1 ~n"</span>),  <span class="comment">%% 这条语句这种情况可以热更</span></div><div class="line">  ?MODULE:loop().</div></pre></td></tr></table></figure></p>
<p>在Erlang里面有分本地调用（local calls）和外部调用（external calls），本地调用的函数名是不需要被导出的。本地调用的格式是Fun(Args)，外部调用的格式是M:F(Args)。</p>
<p>Erlang运行时会保存一份代码的两个版本，所有本地调用的函数地址都会指向程序运行时最初的那个版本（如上面例子的情况一），而所有外部调用的函数地址都会指向最新的版本（如上面例子的情况二）。所以如果想要让代码能够热更新的话，需要使用外部调用的格式。</p>
<p>在我们项目中一般热更的流程是先：code:soft_purge(ModName)或者code:purge(ModName)然后再code:load_file(ModName)进行热更，针对这一热更流程我之前一直存在两个问题，最近仔细研究下才找到了答案，分别是以下这两个问题：</p>
<ul>
<li>为什么load_file之前要先soft_purge或者purge一下呢？<br>这个是load_file函数的问题，如果在load_file执行的时候，本身要热更的模块就有一个老的版本的代码存在的话，load_file就会返回一个not_purged的错误代码，导致新版本不能正常的载入。如果load_file执行自动删除最老版本的话，就不需要purge了（像在Erlang Shell里面执行c(ModName)一样）。当然如果一个模块从来都没有热更过的话（在系统里面只有一个版本），直接使用load_file是没有问题的，不过之后就要先purge再load_file了。</li>
<li>soft_purge和purge有什么不同吗？<br>函数的功能上是有所不同的，但是在我们项目的使用中几乎是没有什么不同的。soft_purge和purge的函数的功能区别是如果清理的模块的老的版本中有进程在上面运行的话，purge就会杀掉进程，然后把老的版本给清理掉，soft_purge则会清理失败。热更的时候是先执行purge然后再loadfile，由于进程一般都是在当前的版本上面执行，这时候老的版本上面不会有进程在运行，所以执行purge和soft_purge是一样的，如果真的想要热更的时候把进程杀掉的话应该执行purge/soft_purge-&gt;loadfile-&gt;purge。</li>
</ul>
<p>以上就是我对Erlang代码热更的总结～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过上一篇的文章&lt;a href=&quot;/2017/05/01/Erlang动态代码载入小实验/&quot; title=&quot;Erlang动态代码载入小实验&quot;&gt;Erlang动态代码载入小实验&lt;/a&gt;，我们可以了解到Erlang的热更机制，在Erlang里面会维护两个版本的代码。在新版本载入的
    
    </summary>
    
      <category term="Erlang入门教程" scheme="https://lintingbin2009.github.io/categories/Erlang%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>Erlang动态代码载入小实验</title>
    <link href="https://lintingbin2009.github.io/2017/05/01/Erlang%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E8%BD%BD%E5%85%A5%E5%B0%8F%E5%AE%9E%E9%AA%8C/"/>
    <id>https://lintingbin2009.github.io/2017/05/01/Erlang动态代码载入小实验/</id>
    <published>2017-05-01T15:19:04.000Z</published>
    <updated>2017-05-01T15:57:39.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>下面的内容为《Erlang程序设计（第2版）》8.10节的内容，这个动态代码载入的小实验非常的简单生动，通过这个小实验能够充分理解Erlang代码的载入机制。</p>
</blockquote>
<p>动态代码载入是内建于Erlang核心的最惊人特性之一。它的美妙之处在于你无需了解后台的运作就能顺利实现它。<br>它的思路很简单：每当调用 someModule:someFunction(…)时，调用的总是最新版模块里的最新版函数，哪怕当代码在模块里运行时重新编译了该模块也是如此。<br>如果在a循环调用b时重新编译了b，那么下一次a调用b时就会自动调用新版的 b 。如果有许多不同进程正在运行而它们都调用了b，那么当b被重新编译后，所有这些进程就都会调用新版的b 。为了了解它的工作原理，我们将编写两个小模块：a和b。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% b.erl</span></div><div class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</div><div class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">1</span>.</div></pre></td></tr></table></figure></p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% a.erl</span></div><div class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</div><div class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</div><div class="line"></div><div class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  sleep(),</div><div class="line">  Val = b:x(),</div><div class="line">  io:format(<span class="string">"Vsn1 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</div><div class="line">  loop(Tag).</div><div class="line"></div><div class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></div><div class="line">  <span class="keyword">receive</span></div><div class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span>.</div></pre></td></tr></table></figure>
<p>现在可以编译a和b，然后启动两个a进程。</p>
<blockquote>
<p>1&gt; c(a).<br>{ok,a}<br>2&gt; c(b).<br>{ok,b}<br>3&gt; a:start(one).</p>
<p><0.70.0><br>Vsn1 (one) b:x() = 1<br>Vsn1 (one) b:x() = 1<br>4&gt; a:start(two).</0.70.0></p>
<p><0.72.0><br>Vsn1 (one) b:x() = 1<br>Vsn1 (two) b:x() = 1</0.72.0></p>
</blockquote>
<p>这些a进程休眠3秒钟后唤醒并调用b:x()，然后打印出结果。现在进入编辑器，把模块b改<br>成下面这样：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</div><div class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<p>然后在shell里面重新编译b。这是现在所发生的：</p>
<blockquote>
<p>5&gt; c(b).<br>{ok,b}<br>Vsn1 (one) b:x() = 2<br>Vsn1 (two) b:x() = 2</p>
</blockquote>
<p>两个原版的a仍然在运行，但现在它们调用了新版的b。所以在模块a里调用b:x()时，实际上是在调用“b的最新版”。我们可以随心所欲地多次修改并重新编译b，而所有调用它的模块无需特别处理就会自动调用新版的b。<br>现在已经重新编译了b，那么如果我们修改并重新编译a会发生什么？来做个试验，把a改成下面这样：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</div><div class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</div><div class="line"></div><div class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  sleep(),</div><div class="line">  Val = b:x(),</div><div class="line">  io:format(<span class="string">"Vsn2 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</div><div class="line">  loop(Tag).</div><div class="line"></div><div class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></div><div class="line">  <span class="keyword">receive</span></div><div class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span>.</div></pre></td></tr></table></figure></p>
<p>现在编译并启动a。</p>
<blockquote>
<p>6&gt; c(a).<br>{ok,a}<br>Vsn1 (two) b:x() = 2<br>Vsn1 (one) b:x() = 2<br>Vsn1 (two) b:x() = 2<br>7&gt; a:start(three).</p>
<p><0.84.0><br>Vsn1 (two) b:x() = 2<br>Vsn1 (one) b:x() = 2<br>Vsn2 (three) b:x() = 2<br>Vsn1 (two) b:x() = 2</0.84.0></p>
</blockquote>
<p>有趣的事情发生了。启动新版的a后，我们看到了新版正在运行。但是，那些运行最初版a的现有进程仍然在正常地运行旧版的a。<br>现在可以试着再次修改b。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</div><div class="line"><span class="keyword">-export</span><span class="params">([x/<span class="number">0</span>])</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">x</span><span class="params">()</span> -&gt;</span> <span class="number">3</span>.</div></pre></td></tr></table></figure></p>
<p>我们将在shell里重新编译b，观察会发生什么。</p>
<blockquote>
<p>8&gt; c(b).<br>{ok,b}<br>Vsn1 (one) b:x() = 3<br>Vsn2 (three) b:x() = 3<br>Vsn1 (two) b:x() = 3</p>
</blockquote>
<p>现在新旧版本的a都调用了b的最新版。<br>最后，再次修改a（这是第三次修改a了）。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</div><div class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  spawn(<span class="keyword">fun</span>() -&gt; loop(Tag) <span class="keyword">end</span>).</div><div class="line"></div><div class="line"><span class="function"><span class="title">loop</span><span class="params">(Tag)</span> -&gt;</span></div><div class="line">  sleep(),</div><div class="line">  Val = b:x(),</div><div class="line">  io:format(<span class="string">"Vsn3 (~p) b:x() = ~p~n"</span>, [Tag, Val]),</div><div class="line">  loop(Tag).</div><div class="line"></div><div class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span></div><div class="line">  <span class="keyword">receive</span></div><div class="line">    <span class="keyword">after</span> <span class="number">3000</span> -&gt; <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span>.</div></pre></td></tr></table></figure></p>
<p>现在，当我们重新编译a并启动一个新版的a时，就会看到以下输出：</p>
<blockquote>
<p>9&gt; c(a).<br>{ok,a}<br>Vsn2 (three) b:x() = 3<br>Vsn2 (three) b:x() = 3<br>Vsn2 (three) b:x() = 3<br>Vsn2 (three) b:x() = 3<br>10&gt; a:start(four).</p>
<p><0.96.0><br>Vsn2 (three) b:x() = 3<br>Vsn3 (four) b:x() = 3<br>Vsn2 (three) b:x() = 3<br>Vsn3 (four) b:x() = 3<br>Vsn2 (three) b:x() = 3</0.96.0></p>
</blockquote>
<p>这段输出里的字符串是由两个最新版本的a（第2版和第3版）生成的，而那些运行第1版a代码的进程已经消失了。<br>在任一时刻，Erlang允许一个模块的两个版本同时运行：当前版和旧版。重新编译某个模块时，任何运行旧版代码的进程都会被终止，当前版成为旧版，新编译的版本则成为当前版。可以把这想象成一个带有两个版本代码的移位寄存器。当添加新代码时，最老的版本就被清除了。一些进程可以运行旧版代码，与此同时，另一些则可以运行新版代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;下面的内容为《Erlang程序设计（第2版）》8.10节的内容，这个动态代码载入的小实验非常的简单生动，通过这个小实验能够充分理解Erlang代码的载入机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态代码载入是内建于Erlang核心的最惊人特
    
    </summary>
    
      <category term="Erlang入门教程" scheme="https://lintingbin2009.github.io/categories/Erlang%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>Erlang中catch和try...catch的区别</title>
    <link href="https://lintingbin2009.github.io/2017/05/01/Erlang%E4%B8%ADcatch%E5%92%8Ctry...catch%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://lintingbin2009.github.io/2017/05/01/Erlang中catch和try...catch的区别/</id>
    <published>2017-05-01T08:06:51.000Z</published>
    <updated>2017-05-01T08:39:07.716Z</updated>
    
    <content type="html"><![CDATA[<p>在Erlang的错误处理中，catch并不是try…catch的缩写，try…catch和catch是不同的。下面我将通过一个例子来区别出他们的不同，为以后的使用做一个参考。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% exception_test.erl 代码文件</span></div><div class="line"><span class="keyword">-module</span><span class="params">(exception_test)</span>.</div><div class="line"></div><div class="line"><span class="keyword">-compile</span><span class="params">(export_all)</span>.</div><div class="line"></div><div class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">1</span>)</span> -&gt;</span> a;</div><div class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">2</span>)</span> -&gt;</span> throw(a);</div><div class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">3</span>)</span> -&gt;</span> error(a);</div><div class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">4</span>)</span> -&gt;</span> exit(a);</div><div class="line"><span class="function"><span class="title">generate_exception</span><span class="params">(<span class="number">5</span>)</span> -&gt;</span> &#123;'EXIT', a&#125;.</div><div class="line"></div><div class="line"><span class="function"><span class="title">test_use_catch</span><span class="params">()</span> -&gt;</span></div><div class="line">    [&#123;I, catch generate_exception(I)&#125; || I &lt;- lists:seq(<span class="number">1</span>, <span class="number">5</span>)].</div><div class="line"></div><div class="line"><span class="function"><span class="title">test_user_try_catch</span><span class="params">()</span> -&gt;</span></div><div class="line">  [<span class="keyword">begin</span></div><div class="line">    <span class="keyword">try</span> generate_exception(I) <span class="keyword">of</span></div><div class="line">        NormalRes -&gt;</div><div class="line">            &#123;I, normal, NormalRes&#125;</div><div class="line">    <span class="keyword">catch</span></div><div class="line">        ErrorType : Error -&gt;</div><div class="line">            &#123;I, exception, ErrorType, Error&#125;</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span> || I &lt;- lists:seq(<span class="number">1</span>, <span class="number">5</span>)].</div></pre></td></tr></table></figure></p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% 执行exception_test:test_use_catch().函数的返回结果</span></div><div class="line">[&#123;<span class="number">1</span>,a&#125;,</div><div class="line"> &#123;<span class="number">2</span>,a&#125;,</div><div class="line"> &#123;<span class="number">3</span>,</div><div class="line">  &#123;'EXIT',&#123;a,[&#123;exception_test,generate_exception,<span class="number">1</span>,</div><div class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">7</span>&#125;]&#125;,</div><div class="line">              &#123;exception_test,'-test_use_catch/<span class="number">0</span>-lc$^<span class="number">0</span>/<span class="number">1</span>-<span class="number">0</span>-',<span class="number">1</span>,</div><div class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">12</span>&#125;]&#125;,</div><div class="line">              &#123;exception_test,'-test_use_catch/<span class="number">0</span>-lc$^<span class="number">0</span>/<span class="number">1</span>-<span class="number">0</span>-',<span class="number">1</span>,</div><div class="line">                              [&#123;file,<span class="string">"exception_test.erl"</span>&#125;,&#123;line,<span class="number">12</span>&#125;]&#125;,</div><div class="line">              &#123;erl_eval,do_apply,<span class="number">6</span>,[&#123;file,<span class="string">"erl_eval.erl"</span>&#125;,&#123;line,<span class="number">674</span>&#125;]&#125;,</div><div class="line">              &#123;shell,exprs,<span class="number">7</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">686</span>&#125;]&#125;,</div><div class="line">              &#123;shell,eval_exprs,<span class="number">7</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">641</span>&#125;]&#125;,</div><div class="line">              &#123;shell,eval_loop,<span class="number">3</span>,[&#123;file,<span class="string">"shell.erl"</span>&#125;,&#123;line,<span class="number">626</span>&#125;]&#125;]&#125;&#125;&#125;,</div><div class="line"> &#123;<span class="number">4</span>,&#123;'EXIT',a&#125;&#125;,</div><div class="line"> &#123;<span class="number">5</span>,&#123;'EXIT',a&#125;&#125;]</div></pre></td></tr></table></figure>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% 执行exception_test:test_user_try_catch().函数的返回结果</span></div><div class="line">[&#123;<span class="number">1</span>,normal,a&#125;,</div><div class="line"> &#123;<span class="number">2</span>,exception,throw,a&#125;,</div><div class="line"> &#123;<span class="number">3</span>,exception,error,a&#125;,</div><div class="line"> &#123;<span class="number">4</span>,exception,exit,a&#125;,</div><div class="line"> &#123;<span class="number">5</span>,normal,&#123;'EXIT',a&#125;&#125;]</div></pre></td></tr></table></figure>
<p>通过上面的列子我们可以看到，如果使用标准的try…catch来处理错误的话，调用者是可以正确的识别出错误，然后对错误进行相应的处理的。</p>
<p>但是如果用的是catch来处理错误的话，情况是不能乐观的，使用catch处理错误，exception(1)和exception(2)返回的结果是一样的，exception(4)和exception(5)返回的结果是一样的。catch在处理throw的时候只是简单的把throw的内容给返回，在处理exit的时候会返回一个tuple是带’EXIT’和exit里面的内容的结果，在处理error的时候会把堆栈给打印出来（这点比较人性化）。</p>
<p>所以大家在使用catch的时候要注意catch的返回值，正常的情况下还是推荐使用try…catch来处理错误，不然很容易就会掉到坑里面的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Erlang的错误处理中，catch并不是try…catch的缩写，try…catch和catch是不同的。下面我将通过一个例子来区别出他们的不同，为以后的使用做一个参考。&lt;br&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="Erlang入门教程" scheme="https://lintingbin2009.github.io/categories/Erlang%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达机器学习课程练习实现</title>
    <link href="https://lintingbin2009.github.io/2017/05/01/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%BB%83%E4%B9%A0%E5%AE%9E%E7%8E%B0/"/>
    <id>https://lintingbin2009.github.io/2017/05/01/吴恩达机器学习课程练习实现/</id>
    <published>2017-05-01T04:30:06.000Z</published>
    <updated>2017-05-01T04:52:15.583Z</updated>
    
    <content type="html"><![CDATA[<p>由于当前机器学习大火，让我对机器学习产生浓厚的兴趣，所以我就上网查了下机器学习的入门教程，大多数的人还是比较推荐吴恩达老师的机器学习课程的。所以我就在Coursera上面学习了吴恩达的机器学习课程，现在已经顺利的毕业了。<br>在Coursera上面每学完一小节课程都会有相应的练习，系统会自动对你提交的练习进行打分，要达到指定的分数才能顺利通过，这点Coursera的体验还是做的比较好的，但是由于国内网络的原因，在Coursera上面看视频，如果不使用科学上网的话，有时候是看不了的。<br>我做练习用的是Octave，用Octave提交代码的时候会报错，需要在练习中进行以下的代码替换:</p>
<blockquote>
<p>lib/submitWithConfiguration.m 文件66行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">responseBody = urlread(submissionUrl, &apos;post&apos;, params);</div></pre></td></tr></table></figure>
<p>替换成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[code, responseBody] = system(sprintf(&apos;echo jsonBody=%s | curl -k -X POST -d @- %s&apos;, body, submissionUrl));</div></pre></td></tr></table></figure></p>
<p>最后附上我的练习代码，有需要的可以自取，如果对你有帮助的话，记得给我星星哈～<br>代码地址：<a href="https://github.com/lintingbin2009/machine-learning-ex" target="_blank" rel="external">https://github.com/lintingbin2009/machine-learning-ex</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于当前机器学习大火，让我对机器学习产生浓厚的兴趣，所以我就上网查了下机器学习的入门教程，大多数的人还是比较推荐吴恩达老师的机器学习课程的。所以我就在Coursera上面学习了吴恩达的机器学习课程，现在已经顺利的毕业了。&lt;br&gt;在Coursera上面每学完一小节课程都会有相
    
    </summary>
    
      <category term="代码" scheme="https://lintingbin2009.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="机器学习" scheme="https://lintingbin2009.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——C语言实现</title>
    <link href="https://lintingbin2009.github.io/2017/05/01/%E5%89%91%E6%8C%87offer%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <id>https://lintingbin2009.github.io/2017/05/01/剑指offer——C语言实现/</id>
    <published>2017-05-01T04:09:54.000Z</published>
    <updated>2017-05-01T04:18:07.601Z</updated>
    
    <content type="html"><![CDATA[<p>之前实习的时候为了能够比较顺利的找到一个实习，特意练习了下代码能力，期间看了挺多的算法书籍，然后把剑指offer书本上的那些练习大部分都自己用C语言实现了一遍。<br>这些练习的代码都已经传到了Github上面了，地址是：<br><a href="https://github.com/lintingbin2009/C-language/tree/master/%E5%89%91%E6%8C%87offer" target="_blank" rel="external">https://github.com/lintingbin2009/C-language/tree/master/%E5%89%91%E6%8C%87offer</a><br>有需要的可以自取，如果觉得对你有帮助的话，记得给我个星星哈～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前实习的时候为了能够比较顺利的找到一个实习，特意练习了下代码能力，期间看了挺多的算法书籍，然后把剑指offer书本上的那些练习大部分都自己用C语言实现了一遍。&lt;br&gt;这些练习的代码都已经传到了Github上面了，地址是：&lt;br&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
      <category term="代码" scheme="https://lintingbin2009.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="剑指offer" scheme="https://lintingbin2009.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="C语言" scheme="https://lintingbin2009.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Erlang数据类型</title>
    <link href="https://lintingbin2009.github.io/2017/04/30/Erlang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lintingbin2009.github.io/2017/04/30/Erlang数据类型/</id>
    <published>2017-04-30T03:23:06.000Z</published>
    <updated>2017-04-30T11:11:25.854Z</updated>
    
    <content type="html"><![CDATA[<p>Erlang提供的数据类型，包括以下几种：</p>
<h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul>
<li>数字(Number)<br>数字类型又包含整数(integers)和浮点数(floats)类型，其中整数是精确的而且是支持大数的，小数是满足IEEE754规则的64位浮点数。Erlang支持ASCII或者Unicode转换成整数值，同时支持整数不同进制的表示。（‘%’后的内容为注释）<blockquote>
<p>1&gt; $a.　　%% ASCII表中的a是97<br>97<br>2&gt; $哈.<br>21704<br>3&gt; $\n.<br>10<br>4&gt; 2#100.　　%% 用100表示的二进制是4<br>4<br>5&gt; 4#100.<br>16<br>6&gt; 16#100.<br>256</p>
</blockquote>
</li>
<li>原子(Atom)<br>原子可以理解为一个不可变的常量，必须以小写字母开头，如果要以大写、下划线或者其他的特殊字符开头，必须加上单引号。原子在Erlang里面是存在一张表上面的，原子的个数有上限，大概是在一百万个左右。<blockquote>
<p>test<br>‘Myhome’<br>‘_hero’</p>
</blockquote>
</li>
<li>位串和二进制(Bit Strings and Binaries)<br>在大多数情况下，二进制型里的位数都会是8的整数倍，因此对应一个字节串。如果位数不是8的整数倍，就称这段数据为位串（bitstring）。所以当我们说位串时，是在强调数据里的位数不是8的整数倍。位语法是一种表示法，用于从二进制数据里提取或加入单独的位或者位串。当你编写底层代码，以位为单位打包和解包二进制数据时，就会发现位语法是极其有用的。<blockquote>
<p>1&gt; &lt;<257,1,2,3,5>&gt;. 　　%%二进制型的元素如果大于8位的会自动截断，257截断成1<br>&lt;<1,1,2,3,5>&gt;<br>2&gt; &lt;<0:7,1:2>&gt;. 　　%%二进制型位数如果不是8的整数倍就会产生位串，这边多了1位1<br>&lt;<0,1:1>&gt;<br>3&gt; &lt;<0:3,0:4,1:2>&gt;.<br>&lt;<0,1:1>&gt;</0,1:1></0:3,0:4,1:2></0,1:1></0:7,1:2></1,1,2,3,5></257,1,2,3,5></p>
</blockquote>
</li>
<li>引用(Reference)<br>可以通过make_ref/0函数来创建一个引用，引用在Erlang程序运行时调用make_ref函数产生的是全局唯一的。比如timer模块在创建一个定时任务的时候通常会返回一个引用，可以通过这个引用来取消定时任务。</li>
<li>函数(Fun)<br>函数在Erlang里面也算是一种数据类型，通过给变量绑定函数，可以通过变量名来执行函数。<blockquote>
<p>1&gt; Fun = fun(X) -&gt; X * X end.<br>#Fun<erl_eval.6.50752066><br>2&gt; Fun(9).<br>81</erl_eval.6.50752066></p>
</blockquote>
</li>
<li>端口标识符(Port Identifier)<br>端口用于与外界通信，由通过函数open_port/2来创建。消息可以通过端口进行收发，但是这些消息必须遵守所谓“端口协议”(port protocol)的规则。</li>
<li>进程标识符(Pid)<br>当创建一个进程的时候会产生一个进程标识符，可以通过这个进程标识符和进程进行通讯。<blockquote>
<p>1&gt; Process1 = spawn(fun() -&gt; receive X -&gt; io:format(“recv ~p, bye~n”, [X]) end end).<br><0.34.0>　　%% 创建一个进程等待接收消息<br>2&gt; Process1 ! my_test.　　%% 给进程发消息<br>recv my_test, bye<br>my_test</0.34.0></p>
</blockquote>
</li>
</ul>
<h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><p>为了方便定义以下的这些复合类型，我把上述的所有基本类型都称为Term。</p>
<ul>
<li><p>元组(Tuple)<br>元组类似于C语言里面的结构体(Struct)，是由固定数量的元素组成的复合数据类型，可以定义成如下结构：</p>
<blockquote>
<p>{Term1, Term2, …, TermN}</p>
</blockquote>
<p>可以通过模式匹配或者element/2函数来提取元组里面元素的值，通过setelement/3来设置元组里面元素的值，size可以取元组里面元素的个数。</p>
<blockquote>
<p>1&gt; P = {adam,24,{july,29}}.<br>{adam,24,{july,29}}<br>2&gt; element(1,P).<br>adam<br>3&gt; element(3,P).<br>{july,29}<br>4&gt; P2 = setelement(2,P,25).<br>{adam,25,{july,29}}<br>5&gt; size(P).<br>3<br>6&gt; {adam, Old, {Month, Day}} = P.<br>{adam,24,{july,29}}<br>7&gt; Old.<br>24</p>
</blockquote>
</li>
<li><p>映射组(Map)<br>映射组是一个由多个Key-Vaule结构组成的符合数据类型，可以定义为如下结构：</p>
<blockquote>
<p>#{Key1=&gt;Value1, Key2=&gt;Value2, …, KeyN=&gt;ValueN}<br>其中Key、Value都是Term</p>
</blockquote>
<p>可以通过maps模块提供的一些函数对映射组进行操作</p>
<blockquote>
<p>1&gt; M1 = #{name=&gt;adam,age=&gt;24,date=&gt;{july,29}}.<br>#{age =&gt; 24,date =&gt; {july,29},name =&gt; adam}<br>2&gt; maps:get(name,M1).<br>adam<br>3&gt; maps:get(date,M1).<br>{july,29}<br>4&gt; M2 = maps:update(age,25,M1).<br>#{age =&gt; 25,date =&gt; {july,29},name =&gt; adam}<br>5&gt; map_size(M).<br>3<br>6&gt; map_size(#{}).<br>0</p>
</blockquote>
</li>
<li><p>列表(List)<br>列表类似于其他语言里面的数组，是由可变数量的元素组成的复合数据结构，可以定义成如下结构：</p>
<blockquote>
<p>[Term1, Term2, …, TermN]</p>
</blockquote>
<p>在Erlang里面，列表由一个头和一个尾组成，空列表也是一个列表。所以列表也可以有一个递归的定义  </p>
<blockquote>
<p>List = [Term| List] | []<br>[] 是一个列表, 因此<br>[c|[]] 是一个列表, 因此<br>[b|[c|[]]] 是一个列表, 因此<br>[a|[b|[c|[]]]] 是一个列表, 或者简写为 [a,b,c]</p>
</blockquote>
<p>lists模块可以提供大量函数对列表进行操作：</p>
<blockquote>
<p>1&gt; L = [3,3,4,2,1,2,34].<br>[3,3,4,2,1,2,34]<br>2&gt; length(L).<br>7<br>3&gt; lists:sort(L).<br>[1,2,2,3,3,4,34]<br>4&gt; lists:reverse(L).<br>[34,2,1,2,4,3,3]</p>
</blockquote>
</li>
</ul>
<h4 id="其他类型-不算数据类型"><a href="#其他类型-不算数据类型" class="headerlink" title="其他类型(不算数据类型)"></a>其他类型(不算数据类型)</h4><ul>
<li>字符串(String)<br>字符串用一对双引号括起来，但不算是Erlang中的数据类型。字符串仅仅是列表的一个缩写，比如：字符串”hello”是列表[$h,$e,$l,$l,$o]的一个缩写。两个相邻的字符串在编译的时候连接成一个字符串，不会造成任何运行时开销。<blockquote>
<p>1&gt; “hello” “ “ “world”.<br>“hello world”</p>
</blockquote>
</li>
<li><p>记录(Record)<br>记录其实就是元组的另一种形式。通过使用记录，可以给元组里的各个元素关联一个名称。对记录的处理是在编译的时候完成的，在运行时是不会有记录的，可以把记录理解成是元组的一种语法糖。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">-module</span><span class="params">(person)</span>.</div><div class="line"><span class="keyword">-export</span><span class="params">([new/<span class="number">2</span>])</span>.</div><div class="line"><span class="keyword">-record</span><span class="params">(person, &#123;name, age&#125;)</span>.</div><div class="line"><span class="function"><span class="title">new</span><span class="params">(Name, Age)</span> -&gt;</span></div><div class="line">    #person&#123;name=Name, age=Age&#125;.</div></pre></td></tr></table></figure>
<blockquote>
<p>1&gt; person:new(ernie, 44).<br>{person,ernie,44}</p>
</blockquote>
</li>
<li><p>布尔类型(Boolean)<br>在Erlang中没有Boolean类型。而是用原子true和false来表示布尔值。</p>
<blockquote>
<p>1&gt; 2 =&lt; 3.<br>true<br>2&gt; true or false.<br>true</p>
</blockquote>
</li>
</ul>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>Erlang提供了一些内置的类型转换函数，可以方便地进行类型转换，下面是一些类型转换的例子：</p>
<blockquote>
<p>1&gt; atom_to_list(hello).<br>“hello”<br>2&gt; list_to_atom(“hello”).<br>hello<br>3&gt; binary_to_list(&lt;&lt;”hello”&gt;&gt;).<br>“hello”<br>4&gt; binary_to_list(&lt;<104,101,108,108,111>&gt;).<br>“hello”<br>5&gt; list_to_binary(“hello”).<br>&lt;<104,101,108,108,111>&gt;<br>6&gt; float_to_list(7.0).<br>“7.00000000000000000000e+00”<br>7&gt; list_to_float(“7.000e+00”).<br>7.0<br>8&gt; integer_to_list(77).<br>“77”<br>9&gt; list_to_integer(“77”).<br>77<br>10&gt; tuple_to_list({a,b,c}).<br>[a,b,c]<br>11&gt; list_to_tuple([a,b,c]).<br>{a,b,c}<br>12&gt; term_to_binary({a,b,c}).<br>&lt;<131,104,3,100,0,1,97,100,0,1,98,100,0,1,99>&gt;<br>13&gt; binary_to_term(&lt;<131,104,3,100,0,1,97,100,0,1,98,100,0,1,99>&gt;).<br>{a,b,c}<br>14&gt; binary_to_integer(&lt;&lt;”77”&gt;&gt;).<br>77<br>15&gt; integer_to_binary(77).<br>&lt;&lt;”77”&gt;&gt;<br>16&gt; float_to_binary(7.0).<br>&lt;&lt;”7.00000000000000000000e+00”&gt;&gt;<br>17&gt; binary_to_float(&lt;&lt;”7.000e+00&gt;&gt;”).<br>7.0</131,104,3,100,0,1,97,100,0,1,98,100,0,1,99></131,104,3,100,0,1,97,100,0,1,98,100,0,1,99></104,101,108,108,111></104,101,108,108,111></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Erlang提供的数据类型，包括以下几种：&lt;/p&gt;
&lt;h4 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;数字(Number)&lt;br&gt;数字类型又包含整数(int
    
    </summary>
    
      <category term="Erlang入门教程" scheme="https://lintingbin2009.github.io/categories/Erlang%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用Erlang?</title>
    <link href="https://lintingbin2009.github.io/2017/04/29/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Erlang/"/>
    <id>https://lintingbin2009.github.io/2017/04/29/为什么使用Erlang/</id>
    <published>2017-04-29T14:00:09.000Z</published>
    <updated>2017-04-29T15:23:16.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p>如果问我觉得Erlang最重要的特性是什么的话，我觉得应该是并发。</p>
<p>并发能够带来的好处是不言而喻的，比如：</p>
<ul>
<li>性能<br>现在的计算机由于主频的限制，都在往多核的方式发展，有些比较高端的机器甚至有几十个核心。如果编写的程序都是顺序运行的话将会严重浪费多核计算机的计算能力。Erlang本身是面向并发编程的，如果把之前在单核机器上面跑的Erlang程序放到多核机器上面跑的话，性能将会极大的提高。</li>
<li>扩展性<br>如果在一台机器上面运行Erlang程序还不能满足性能的要求的话，可以简单的升级机器的CPU核心个数，甚至可以经过简单的改造把不同的进程分配到不同的机器上面运行，通过水平扩展方式来满足高并发的业务需求。</li>
<li>容错性<br>Erlang内部实现的进程是相互独立的，一个进程的崩溃并不会影响到另外一个进程的运行，同时Erlang内部还OTP框架来保证系统的容错性。</li>
<li>清晰性<br>Erlang世界观和现实的世界是一样的，在大多数的编程语言里面事情都是顺序发生的，但是在Erlang的世界里面所有的事件都是并发的，在编写程序的时候能够比较清晰的把现实世界事件的并行发生的的特性映射到Erlang的并发编程上面。</li>
</ul>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>快速介绍下Erlang比较与众不认同的特性：</p>
<ul>
<li>Erlang Shell<br>在编写Erlang程序的过程中会有很多时间花费在Erlang Shell里面，Erlang Shell类似于Linux的Bash，开发者能在Erlang Shell里面运行表达式，通过这种交互方式，开发者能够在Erlang Shell里面调试正在运行的Erlang程序（包括远程的Erlang程序）。</li>
<li>= 操作符<br>在一般的编程语言里面，=表示赋值操作，一个变量能够被多次赋值。但是在Erlang里面变量是不可变的，一旦通过=绑定之后，该变量的值就不能发生改变了，重复绑定会导致异常。</li>
<li>变量和原子<br>所有Erlang的变量都是以大写字母开头的，比如：One、This和My_baby这些都是变量。以小写字母开头的则是符号常量（被称为原子：atom），比如：person、one和hello_world。</li>
<li>进程<br>Erlang的进程是Erlang虚拟机内部自己实现的进程，非常轻量级，刚开始创建的时候每个进程的大小也就2KB左右，1GB的内存就可以创建50万个进程。同时进程间没有共享内存，进程间的通信通过消息转发实现。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Erlang的特性决定了它是一门比较另类的语言，相信第一次见到它的人会觉得很吃惊，世界上居然会有这样的一门语言。但正是由于这些看似奇怪的特性，让Erlang能够在当今多核的时代充分的发挥它的能力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主要特性&quot;&gt;&lt;a href=&quot;#主要特性&quot; class=&quot;headerlink&quot; title=&quot;主要特性&quot;&gt;&lt;/a&gt;主要特性&lt;/h3&gt;&lt;p&gt;如果问我觉得Erlang最重要的特性是什么的话，我觉得应该是并发。&lt;/p&gt;
&lt;p&gt;并发能够带来的好处是不言而喻的，比如：&lt;/
    
    </summary>
    
      <category term="Erlang入门教程" scheme="https://lintingbin2009.github.io/categories/Erlang%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>使用HEXO在Github上搭建个人博客</title>
    <link href="https://lintingbin2009.github.io/2017/04/29/%E4%BD%BF%E7%94%A8HEXO%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://lintingbin2009.github.io/2017/04/29/使用HEXO在github上搭建个人博客/</id>
    <published>2017-04-29T07:40:51.000Z</published>
    <updated>2017-04-29T10:20:51.228Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的工作中经常会遇到一些问题，在解决问题的时候如果能够及时记录下来是最好不过的，所以一直想维护一个自己的博客。虽然国内有各种技术博客（比如：CSDN，博客园）之类的第三方博客平台，但是作为一个程序员，不搭建一个自己的博客感觉不够酷。所以我就选择使用HEXO在Github上面搭建自己的个人博客。</p>
<p>下面的安装教程都是在Window x64的环境下进行的</p>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><blockquote>
<p>申请Github账户</p>
</blockquote>
<p>由于博客是要搭建在Github上面的，所有必须要有一个Github账号来上传代码，这样才能最终显示自己的博客内容。在建立完Github账号后，需要创建一个Repositories，这个Repositories的名字的格式是:your_user_name.github.io这样的。</p>
<blockquote>
<p>安装Git软件</p>
</blockquote>
<p>有了Github账号后还需要有软件能把本地的代码上传到Github上面，所就安装Git软件，安装Git也非常简单，直接下一步就行了。</p>
<blockquote>
<p>安装NodeJs</p>
</blockquote>
<p>由于Hexo是基于NodeJs的框架，所以使用Hexo前要先安装NodeJs，安装NodeJs也非常简单，只需要下载软件，点下一步就行了。现在新的版本的NodeJs，会同时安装npm（Node包管理软件），所以安装起来非常简单。</p>
<blockquote>
<p>安装Hexo</p>
</blockquote>
<p>把上面的软件都安装好了之后就可以开始安装Hexo了，打开window的终端，在终端中输入下面的命令开始安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><blockquote>
<p>初始化</p>
</blockquote>
<p>创建一个文件夹，如：MyBlog之类，然后进到MyBlog文件夹下执行以下初始化命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>到了这一步之后，Hexo算初始化完成，可以正常的使用了。</p>
<blockquote>
<p>生成静态页面</p>
</blockquote>
<p>继续在MyBlog目录下执行如下命令，生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate // 简写 hexo g</div></pre></td></tr></table></figure>
<blockquote>
<p>本地启动</p>
</blockquote>
<p>启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server   // 动态启动，有修改发生会自动检测，简写 hexo s</div></pre></td></tr></table></figure>
<p>然后在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就可以看到博客的页面，当然也在服务器启动的时候加上-p来指定自己想要的端口</p>
<h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><blockquote>
<p>安装 hexo-deployer-git</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<blockquote>
<p>配置部署环境</p>
</blockquote>
<p>在MyBlog的目录下会有一个_config.yml的文件，该文件为Hexo项目的配置文件，打开该文件然后把deploy部分改成下列格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/lintingbin2009/lintingbin2009.github.io.git  // lintingbin2009替换成你自己的名字</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<blockquote>
<p>开始部署</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>部署完成之后就可以使用your_username.github.io来访问你的个人博客了, 之后的部署命令应该是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总的来说用Hexo在Github上搭建个人博客还是比较简单的，当然这边只是涉及到最简单的搭建，还没有涉及到主题的更换、评论系统，统计系统。更多关于Hexo的使用文档可以浏览Hexo的中文官网，里面有详细的使用教程和很多可选的精美主题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时的工作中经常会遇到一些问题，在解决问题的时候如果能够及时记录下来是最好不过的，所以一直想维护一个自己的博客。虽然国内有各种技术博客（比如：CSDN，博客园）之类的第三方博客平台，但是作为一个程序员，不搭建一个自己的博客感觉不够酷。所以我就选择使用HEXO在Github
    
    </summary>
    
      <category term="教程" scheme="https://lintingbin2009.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://lintingbin2009.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://lintingbin2009.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
