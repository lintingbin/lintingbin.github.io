<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darcy&#39;s Blog</title>
  
  <subtitle>不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lintingbin2009.github.io/"/>
  <updated>2018-10-27T13:19:45.754Z</updated>
  <id>https://lintingbin2009.github.io/</id>
  
  <author>
    <name>Darcy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用django-guardian实现django-admin的行级权限控制</title>
    <link href="https://lintingbin2009.github.io/2018/10/27/%E4%BD%BF%E7%94%A8django-guardian%E5%AE%9E%E7%8E%B0django-admin%E7%9A%84%E8%A1%8C%E7%BA%A7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>https://lintingbin2009.github.io/2018/10/27/使用django-guardian实现django-admin的行级权限控制/</id>
    <published>2018-10-27T12:03:29.000Z</published>
    <updated>2018-10-27T13:19:45.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用django框架来做一些后台管理的web页面简直太方便了，django自带模块级的权限系统，用来做一些内部的系统非常合适，可以大大的减少开发量。但是django自带的权限系统还不支持行级的权限控制，如果要实现行级的权限控制，需要依赖第三方的app来开发，或者自己重新写一个。</p></blockquote><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>我们项目组开发的一些系统通常会用mysql数据库来存储一些配置，但是如果每次有配置修改的时候都去手动修改mysql数据的话，会挺麻烦的，同时也比较容易出错。django-admin能够根据定义的model自动的生成相应的页面，同时还能提供权限的管理，所以我们就把一些系统到的配置放到django中。但是到现在，随着系统的需求越来越多，该系统已经不止我们自己项目组的人员使用，也要开放给其他项目组的同事使用，所以就产生了一些更细粒度的权限需求。因此，我们要在现有的系统上支持行级的权限控制。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>当然可以自己写一套权限系统了，但是自己写的成本比较高，而且自己写的不一定比较好。所以我就先在网上找了一些现成的解决方案，<a href="https://djangopackages.org/grids/g/perms/" target="_blank" rel="noopener">https://djangopackages.org/grids/g/perms/</a> 该链接列出了现有的一些第三方的权限系统解决方案。从该页面来看，django-guardian是最受欢迎的第三方权限系统，而且支持行级的权限系统，同时还可以整合到django-admin里面，所以我就选择了django-guardian。</p><h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><h5 id="安装配置django-guardian"><a href="#安装配置django-guardian" class="headerlink" title="安装配置django-guardian"></a>安装配置django-guardian</h5><p>安装配置django-guardian比较简单，按照她项目提供的<a href="https://django-guardian.readthedocs.io/en/stable/" target="_blank" rel="noopener">文档</a>进行安装就可以了，安装完成后会在数据库里面创建两张权限相关的表。</p><h5 id="把django-guardian整合到django-admin"><a href="#把django-guardian整合到django-admin" class="headerlink" title="把django-guardian整合到django-admin"></a>把django-guardian整合到django-admin</h5><p>首先把admin.py文件里面需要用到行级权限的类，由原来的继承admin.ModelAdmin，改成继承GuardedModelAdmin，这时候打开某个数据行的页面的时候，在该页面的右上角的历史旁边会显示编辑对象权限的按钮，点击该按钮进去相应的页面就可以编辑该行数据的具体权限。<br>配置完权限的时候，用一个新的用户测试的话，会发现该用户没有权限来访问任何的数据，这是因为GuardedModelAdmin还有很多事情没有帮我们做，我们还需要重写一些函数来实现admin后台页面的显示。具体的信息看下面的代码注释。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> guardian.admin <span class="keyword">import</span> GuardedModelAdmin</span><br><span class="line"><span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> get_objects_for_user, assign_perm, remove_perm, get_users_with_perms, \</span><br><span class="line">    get_groups_with_perms</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 需改前</span></span><br><span class="line"><span class="meta">@admin.register(DataAssistantJob)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAssistantJobAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="meta">@admin.register(DataAssistantJob)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAssistantJobAdmin</span><span class="params">(GuardedModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># app是否在主页面中显示的话由该函数决定</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_module_permission</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> super().has_module_permission(request):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model_objs(request).exists()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在显示数据列表额时候，哪些数据显示，哪些不显示，由该函数控制</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> super().get_queryset(request)</span><br><span class="line"></span><br><span class="line">        data = self.get_model_objs(request)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 内部用来获取某个用户有权限访问的数据行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model_objs</span><span class="params">(self, request, action=None, klass=None)</span>:</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        actions = [action] <span class="keyword">if</span> action <span class="keyword">else</span> [<span class="string">'view'</span>, <span class="string">'change'</span>, <span class="string">'delete'</span>]</span><br><span class="line">        klass = klass <span class="keyword">if</span> klass <span class="keyword">else</span> opts.model</span><br><span class="line">        model_name = klass._meta.model_name</span><br><span class="line">        <span class="keyword">return</span> get_objects_for_user(user=request.user, perms=[<span class="string">f'<span class="subst">&#123;perm&#125;</span>_<span class="subst">&#123;model_name&#125;</span>'</span> <span class="keyword">for</span> perm <span class="keyword">in</span> actions],</span><br><span class="line">                                    klass=klass, any_perm=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来判断某个用户是否有某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_perm</span><span class="params">(self, request, obj, action)</span>:</span></span><br><span class="line">        opts = self.opts</span><br><span class="line">        codename = <span class="string">f'<span class="subst">&#123;action&#125;</span>_<span class="subst">&#123;opts.model_name&#125;</span>'</span></span><br><span class="line">        <span class="keyword">if</span> obj:</span><br><span class="line">            <span class="keyword">return</span> request.user.has_perm(<span class="string">f'<span class="subst">&#123;opts.app_label&#125;</span>.<span class="subst">&#123;codename&#125;</span>'</span>, obj)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.get_model_objs(request, action).exists()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有查看某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_view_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'view'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有修改某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_change_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'change'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否有删除某个数据行的权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_delete_permission</span><span class="params">(self, request, obj=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.has_perm(request, obj, <span class="string">'delete'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户应该拥有他新增的数据行的所有权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(self, request, obj, form, change)</span>:</span></span><br><span class="line">        result = super().save_model(request, obj, form, change)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_superuser <span class="keyword">and</span> <span class="keyword">not</span> change:</span><br><span class="line">            opts = self.opts</span><br><span class="line">            actions = [<span class="string">'view'</span>, <span class="string">'add'</span>, <span class="string">'change'</span>, <span class="string">'delete'</span>]</span><br><span class="line">            [assign_perm(<span class="string">f'<span class="subst">&#123;opts.app_label&#125;</span>.<span class="subst">&#123;action&#125;</span>_<span class="subst">&#123;opts.model_name&#125;</span>'</span>, request.user, obj) <span class="keyword">for</span> action <span class="keyword">in</span> actions]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><p>通过上面的修改，django-admin中的模块就能够支持行级的权限，并能够正确的在后台页面中显示出来，当然如果有很多的模块需要支持行级的权限控制，则可以把上面的这些修改写到一个新的类中，然后其他想支持行级权限的模块再从该模块继承就可以了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>感觉django-guardian和django-admin整合，实现的不是很好。如果开发者对django内部的代码不怎么了解，那么用django-guardian来实现行级权限控制的话会挺麻烦的，个人认为django-guardian完全可以把和django-admin的整合做到开箱即用的效果，就像django自带的权限系统一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;用django框架来做一些后台管理的web页面简直太方便了，django自带模块级的权限系统，用来做一些内部的系统非常合适，可以大大的减少开发量。但是django自带的权限系统还不支持行级的权限控制，如果要实现行级的权限控制，需要依赖第三方的app
      
    
    </summary>
    
      <category term="python" scheme="https://lintingbin2009.github.io/categories/python/"/>
    
    
      <category term="django" scheme="https://lintingbin2009.github.io/tags/django/"/>
    
      <category term="guardian" scheme="https://lintingbin2009.github.io/tags/guardian/"/>
    
  </entry>
  
  <entry>
    <title>写HDFS文件失败的问题处理</title>
    <link href="https://lintingbin2009.github.io/2018/10/27/%E5%86%99HDFS%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://lintingbin2009.github.io/2018/10/27/写HDFS文件失败的问题处理/</id>
    <published>2018-10-27T09:52:23.000Z</published>
    <updated>2018-10-27T11:54:44.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们的集群在用fluentd写入hdfs的时候经常会遇到写入失败的问题，失败的特点是写入失败的那个文件的备份数只有2个（我们集群设置的是3个），然后就再也不能成功的往这个文件写入任何内容了。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在集群负载比较高的时候，写hdfs文件有时会发生写入错误，写入错误的文件只有两个备份，该文件之后再也不能被写入了。</p><h4 id="临时解决"><a href="#临时解决" class="headerlink" title="临时解决"></a>临时解决</h4><p>之前还不知道产生这个问题的具体原因，但是出现了文件写入不进去的情况，又要及时的修复问题，我们的做法是先把该文件从hdfs上下载到本地，然后再把该文件从hdfs上删除，最后把本地的文件上传到hdfs中，这样就能把出问题的文件给修复好。<br>上述的解决方法，毕竟治标不治本，如果出错的文件比较少的话，还可以及时的修复，但是如果错误的文件数很多的话，那修复起来就非常的麻烦了。</p><h4 id="彻底解决"><a href="#彻底解决" class="headerlink" title="彻底解决"></a>彻底解决</h4><h5 id="产生该问题的原因"><a href="#产生该问题的原因" class="headerlink" title="产生该问题的原因"></a>产生该问题的原因</h5><p>之前还不知道具体是什么原因造成的写入失败，后面在研究了hdfs写入过程的时候发现一个问题：那就是我们集群的机器数量比较少，只有四台机器，在写入hdfs文件pipeline的时候，如果有一台机器出现问题了时候，这时候就会把这台机器排除掉，去寻找新的可用的机器，但是我们的集群只有四台机器，如果刚好有两台机器出现问题的话，这时候文件的备份数永远也到达不了3。</p><h5 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h5><p>解决问题的方法无非就下面几个：</p><ul><li>增加集群的机器数量。比如把集群的机器增加到10台，这样只有同时有8台机器出现问题的情况下，才会出现文件写入失败的问题。这样出现写入失败的问题的概率就会大大的减少。</li><li>减少文件备份的数量。这个方法对我们不适用，因为我们现在使用的只有3个备份，这个应该是hdfs最低的要求了。</li><li>修改配置，让写入的行为发生改变。dfs.client.block.write.replace-datanode-on-failure.enable配置默认是true，表示如果在写入的pipeline有datanode失败的时候是否要切换到新的机器，但是如果集群比较小的话，有两台机器失败的话，就没有其他机器可以切换了，所以把该配置设置成false后就能解决问题。</li></ul><h5 id="最后的解决方法"><a href="#最后的解决方法" class="headerlink" title="最后的解决方法"></a>最后的解决方法</h5><p>由于我们的集群不可能一下子就扩大，所以我们当前的解决方法是先把dfs.client.block.write.replace-datanode-on-failure.enable配置项设置成false，等后面集群变大后再把该配置项改成true。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>现在集群已经很久没有发生上述的错误了，说明配置的修改已经起到效果了。解决问题最重要的一步还是找到问题的原因，然后一次性解决掉，不然问题还是会时不时的光顾你的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们的集群在用fluentd写入hdfs的时候经常会遇到写入失败的问题，失败的特点是写入失败的那个文件的备份数只有2个（我们集群设置的是3个），然后就再也不能成功的往这个文件写入任何内容了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;问题
      
    
    </summary>
    
      <category term="错误处理" scheme="https://lintingbin2009.github.io/categories/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
    
      <category term="hdfs" scheme="https://lintingbin2009.github.io/tags/hdfs/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd性能优化实践</title>
    <link href="https://lintingbin2009.github.io/2018/10/04/Fluentd%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>https://lintingbin2009.github.io/2018/10/04/Fluentd性能优化实践/</id>
    <published>2018-10-04T10:51:56.000Z</published>
    <updated>2018-10-04T15:06:46.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们的日志收集系统使用的是Fluentd，使用Fluentd的原因大概是因为配置简单、插件比较多、而且能够比较容易的定制自己的插件。但是随着日志越来越多以后，Fluentd会出现性能上的问题，以下的文章将回顾我们进行Fluentd性能优化的操作。</p></blockquote><h4 id="Fluentd-性能问题的主要原因？"><a href="#Fluentd-性能问题的主要原因？" class="headerlink" title="Fluentd 性能问题的主要原因？"></a>Fluentd 性能问题的主要原因？</h4><p>抛开自己配置错误的一些原因，Fluentd性能问题的最主要原因是因为Fluentd是使用Ruby写的，而Ruby有全局锁(GIL)，因而在一个Ruby进程里面同时最多只有一个线程在运行。这样的话，Ruby的多线程对需要更多计算资源的操作显得无能为力，具体的体现可以用top查看进程的运行情况，如果Fluentd到达性能瓶颈的话，Fluentd的进程会一直占用100%左右的计算资源，再也不能提升，对于有四个核的计算机来说，最多也就使用的1/4的计算能力，这是极其浪费的。而且当Fluentd进程到达瓶颈后，数据会处理不完，导致数据收集的速度落后于数据产生的速度。</p><h4 id="Fluentd-多进程优化一"><a href="#Fluentd-多进程优化一" class="headerlink" title="Fluentd 多进程优化一"></a>Fluentd 多进程优化一</h4><p>既然已经知道了Fluentd性能瓶颈的问题主要是因为单进程不能使用多核的计算能力，那解决的方法也是很简单的，可以把收集的日志按照不同的类型来拆分成不同的进程，这样就能充分的利用多核的计算能力了。</p><h5 id="多进程架构"><a href="#多进程架构" class="headerlink" title="多进程架构"></a>多进程架构</h5><p><img src="/images/fluentd_multi_process_1.jpg" alt="Fluentd多进程架构一">如上图所示，之前单进程的架构可以改成如上的多进程架构，这样每个进程最多可以使用100%的cpu资源，理论上四核的机器起四个Fluentd进程就可以充分的利用机器的计算资源的了，但是实际上这个架构还有一些问题未能解决。</p><h5 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h5><p>这个多进程的架构相比于单进程的架构在性能上已经有很大的提升了，不过还有如下两个问题：</p><ol><li>该架构要求Log的拆分要比较均衡，这样每个进程都能合理的利用计算资源，不然会出现有些进程非常繁忙，但是有些进程却非常的空闲。然而Log的拆分是按照之前的经验来拆分的，不可能做到绝对的均衡，而且拆分完后是直接写到配置文件里面的，也不能进行实时调整。</li><li>即使是按照现在的架构进行日志拆分了，但是有些日志的计算任务比较繁重，有可能导致即使一个进程只处理一个类型的Log也会到达性能瓶颈。如上图的Process3只处理Log5，但是在top中却看到Process3的cpu使用率一直是100%，这说明Process3已经到达了性能瓶颈，但是Log5已经不能再进行拆分了。</li></ol><p>基于上面的这两个问题，这种多进程架构还是会遇到性能瓶颈，因此需要对架构再继续进行优化，接下来介绍新的架构来优化Fluentd的性能。</p><h4 id="Fluentd-多进程优化二"><a href="#Fluentd-多进程优化二" class="headerlink" title="Fluentd 多进程优化二"></a>Fluentd 多进程优化二</h4><p>上面的日志拆分架构其实在我们的系统中已经用过了一段时间了，但是我们发现有些Fluentd进程一直很繁忙，我们本来是想着怎么把日志拆分的更加均衡一些，但是无意中在Fluentd官网中看到了他们推荐的架构，觉得这才是真正正确的做法，之前走的是弯路。</p><h5 id="新的多进程架构"><a href="#新的多进程架构" class="headerlink" title="新的多进程架构"></a>新的多进程架构</h5><p><img src="/images/fluentd_multi_process_2.jpg" alt="Fluentd多进程架构二">这是Fluentd官网给出的多进程架构图，该架构采用两层的结构，前面的一层只负责数据的路由，把数据按照一定的比例路由到第二层，然后第二层才对数据进行处理。第二层可以根据机器的资源起不同个数的进程，甚至可以把第二层部署到不同的机器上去。这样就能解决旧的架构的分配不均和计算瓶颈的问题了，每种日志都能很均衡的使用机器的计算资源，甚至可以分布式扩展。同时也不用苦恼于怎么拆分Log来让进程的计算资源更加的均衡。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>新的架构虽然在理论上是非常好的架构，但是在配置的过程中需要注意一些问题：</p><ol><li>新架构第一层使用的是forward插件把log路由到第二层的，需要注意的是forward的插件也是需要把buffer_type配置成文件的，不然如果第二层的处理能力不够的话，就会导致第一层的buffer数据一直堆在内存里面，导致内存不够。还会造成在停Fluentd进程的时候，如果是第二层进程先停的话，那么第一层的数据会不能发送的到第二层，第一层的进程会一直停不掉。如果机器不小心关掉的话，还会造成数据丢失。</li><li>新架构第一层的flush_interval（推荐1秒）和buffer_chunk_size（推荐1M）要配置的尽量小，这样数据才能尽快的发送到第二层进行处理。其实如果配置的比较大的话，到时候第二层会有报警的。</li><li>新架构的缺点是同一种Log会有多个处理进程，这样的话就会导致一些只能单进程处理的操作变得不那么优美了。比如webhdfs插件，现在使用新的多进程架构后，因为每个hdfs文件只能由一个进程写入，所以现在同一种Log是由多个进程写入的，只能写入到多个不同的文件，这样会造成hdfs文件数量成倍的增加。</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过这次架构的升级，Fluentd的性能已经得到了很大的提升，而且配置也变得更加简单了，好的架构往往能够事半功倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们的日志收集系统使用的是Fluentd，使用Fluentd的原因大概是因为配置简单、插件比较多、而且能够比较容易的定制自己的插件。但是随着日志越来越多以后，Fluentd会出现性能上的问题，以下的文章将回顾我们进行Fluentd性能优化的操作。&lt;
      
    
    </summary>
    
      <category term="日志收集" scheme="https://lintingbin2009.github.io/categories/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="Fluentd" scheme="https://lintingbin2009.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Python的Iterator不能当List用</title>
    <link href="https://lintingbin2009.github.io/2018/09/09/Python%E7%9A%84Iterator%E4%B8%8D%E8%83%BD%E5%BD%93List%E7%94%A8/"/>
    <id>https://lintingbin2009.github.io/2018/09/09/Python的Iterator不能当List用/</id>
    <published>2018-09-09T04:49:24.000Z</published>
    <updated>2018-09-09T05:38:04.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前在重构流处理框架的时候，把在每个模块里面处理的数据类型从List，变成了pyspark里面foreachPartition输入的函数的参数，其实就是一个Iterator类型的参数，用来遍历整个Partition的数据。但是后面发现有些模块没有执行，最后发现竟然是误用Iterator造成的bug。</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Iterator类型的数据只能遍历一次，但是List可以一直遍历，很简单的一段代码就可以说明这个问题：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">it = iter(lst)</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> lst])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> lst])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> it])</span><br><span class="line">print([v <span class="keyword">for</span> v <span class="keyword">in</span> it])</span><br></pre></td></tr></table></figure></p><p>这段代码的输出是：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>很简单的就可以看出Iterator和List的不同了，我项目中的问题就对Iterator遍历了两次，第二次遍历的代码等于没执行。这样说来Iterator是不是就都可以用List替换了，或者说Iterator就没有优势了？答案显然不是的。</p><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><h5 id="什么是Iterator"><a href="#什么是Iterator" class="headerlink" title="什么是Iterator"></a>什么是Iterator</h5><p>Iterator是访问集合元素的一种方式。Iterator对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。Iterator只能单向访问，且不能回退。</p><h5 id="Iterator的优势"><a href="#Iterator的优势" class="headerlink" title="Iterator的优势"></a>Iterator的优势</h5><p>我觉得Iterator的主要优势是延迟计算，他并不像List那样需要事先把所有的元素都放到List，而是访问到的时候才产生所需要的元素，访问之后的元素如果其他地方没有用到，其占用的内存也可以被回收掉，大大的减少了集合遍历所需的内存。想象一下，如果需要访问的集合是非常巨大的话，这样的话List就需要分配非常多的内存。下面的代码举个例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">1000000000</span>:</span><br><span class="line">        <span class="keyword">yield</span> random.random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rand <span class="keyword">in</span> gen():</span><br><span class="line">    print(rand)</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这篇文章主要了解了下List和Iterator的区别，不过在有些方法中不管你传的是Iterator还是List都会转成List类型，用List来求集合的长度，比如进程池的map函数。当集合比较小的时候不管是使用List还是Iterator，都行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前在重构流处理框架的时候，把在每个模块里面处理的数据类型从List，变成了pyspark里面foreachPartition输入的函数的参数，其实就是一个Iterator类型的参数，用来遍历整个Partition的数据。但是后面发现有些模块没有执
      
    
    </summary>
    
    
      <category term="python" scheme="https://lintingbin2009.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>fabric远程执行后台脚本卡住的问题</title>
    <link href="https://lintingbin2009.github.io/2018/07/28/fabric%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://lintingbin2009.github.io/2018/07/28/fabric远程执行后台进程卡住问题处理/</id>
    <published>2018-07-28T05:24:38.000Z</published>
    <updated>2018-07-28T06:11:00.261Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近用fabric开发了一个简单的运维系统，该系统可以在远程机器上执行一些命令，在批量执行后台脚本的启动的时候，发现fabric会卡住，不能正常的返回。在fabric官方有给出一些解决方案<a href="http://www.fabfile.org/faq.html#why-can-t-i-run-programs-in-the-background-with-it-makes-fabric-hang" target="_blank" rel="noopener">Why can’t I run programs in the background with &amp;? It makes Fabric hang</a>，但是这些方案都要额外的工具，有些麻烦。接下来简单的介绍下fabric的机制和我的解决方案。</p></blockquote><h4 id="fabric是怎么在远程机器上执行命令的？"><a href="#fabric是怎么在远程机器上执行命令的？" class="headerlink" title="fabric是怎么在远程机器上执行命令的？"></a>fabric是怎么在远程机器上执行命令的？</h4><p>fabric是先用ssh连接到远程机器上，然后再执行相关的命令。</p><h4 id="fabric为什么会卡住不返回？"><a href="#fabric为什么会卡住不返回？" class="headerlink" title="fabric为什么会卡住不返回？"></a>fabric为什么会卡住不返回？</h4><p>ssh连接到远程机器上的时候会起一个session，fabric卡住不返回是因为这个session一直结束不掉，这个session之所以结束不掉是因为我们起的后台进程有输出是定向到这个session的。</p><h4 id="怎么解决？"><a href="#怎么解决？" class="headerlink" title="怎么解决？"></a>怎么解决？</h4><p>只要把后台进程的输出重定向到其他地方，fabric就可以正常返回。比如把后台脚本的启动方式改成<code>yourcommand &gt; /dev/null 2&gt;&amp;1 &amp;</code>，这样就会把yourcommand脚本的所有输出重定向到/dev/null，因此fabric就可以正常返回了。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>我之前后台脚本的启动方式是<code>yourcommand 2&gt;&amp;1 1&gt; /dev/null</code>，按照我本来的理解，应该是把stderr和stdout都重定向到/dev/null了，但是这个命令只是把stdout重定向到/dev/null，stderr还是没有被重定向。 </p><p>使用<code>yourcommand &amp;&gt; /dev/null</code>这种方式也可以把所有的输出重定向到/dev/null，这种方式的命令也更短一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近用fabric开发了一个简单的运维系统，该系统可以在远程机器上执行一些命令，在批量执行后台脚本的启动的时候，发现fabric会卡住，不能正常的返回。在fabric官方有给出一些解决方案&lt;a href=&quot;http://www.fabfile.or
      
    
    </summary>
    
    
      <category term="fabric" scheme="https://lintingbin2009.github.io/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>python标准开发环境</title>
    <link href="https://lintingbin2009.github.io/2018/06/23/python%E6%A0%87%E5%87%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://lintingbin2009.github.io/2018/06/23/python标准开发环境/</id>
    <published>2018-06-23T05:44:23.000Z</published>
    <updated>2018-06-23T06:32:47.297Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很多初学python的同学可能都知道pip，通过pip可以安装自己的需要的python第三方库。但是有很多同学可能不知道pipenv，在这篇文章我将介绍如何用pipenv来构建自己的开发环境，以及用pipenv快速部署生产环境</p></blockquote><h4 id="什么是pipenv？"><a href="#什么是pipenv？" class="headerlink" title="什么是pipenv？"></a>什么是pipenv？</h4><p>pipenv是一个把包管理工具和虚拟环境结合的工具，使用pipenv install和使用pip install一样，可以安装任何你想安装的第三方库，不同的是pipenv会记录你安装的库和使用的python版本，在部署生产环境的时候直接使用pipenv install就可以安装所有的依赖、甚至特定的python版本。<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv项目地址</a></p><h4 id="如何使用pipenv？"><a href="#如何使用pipenv？" class="headerlink" title="如何使用pipenv？"></a>如何使用pipenv？</h4><ol><li>开发环境使用<br>项目开发的时候使用pip install在项目的目录下面安装所需要的库，pipenv会自动在项目的根目录下面产生Pipfile，Pipfile.lock这两个文件，这两个文件记录了当前项目的使用第三方库和python版本的信息，同时pipenv会为这个项目构建一个虚拟环境(pipenv –venv可以查看虚拟环境的位置)。pipenv shell可以把当前的命令行环境切换到当前项目的虚拟环境下执行。要用虚拟环境运行一个python文件的话，则使用pipenv run python a.py。</li><li>生产环境使用<br>当项目开发完成以后，把项目上传到需要部署该项目的服务器。然后在项目的根目录下运行pipenv install，这时候pipenv会自动为该项目创建所依赖的python的版本的虚拟环境，同时在该虚拟环境下安装所有需要的第三方库。有一个问题需要注意的是：如果机器上没有安装项目所需要的python版本的话，这时候虚拟环境就会创建失败。要解决这个失败的话有两个办法：1.安装项目所依赖的python版本。2.安装pyenv，让pipenv在创建虚拟环境的时候使用pyenv自动安装所需要的python版本。</li></ol><h4 id="使用pyenv"><a href="#使用pyenv" class="headerlink" title="使用pyenv"></a>使用pyenv</h4><p>pyenv是一个python包管理工具，可以在一台机器上面安装多个python版本。我推荐至少在生产环境上面安装pyenv，这样在项目代码部署到生产环境的时候根据项目的实际需要安装不同的python版本。<a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">pyenv项目地址</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>python程序员在开发项目的时候推荐使用pipenv，这样在项目分享给别人或者部署的时候都可以无比的轻松。同时推荐使用pyenv，pipenv和pyenv配合使用不要太爽了。这篇文章只是简单的介绍pipenv和pyenv，具体的使用方法请查阅他们的官方文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;很多初学python的同学可能都知道pip，通过pip可以安装自己的需要的python第三方库。但是有很多同学可能不知道pipenv，在这篇文章我将介绍如何用pipenv来构建自己的开发环境，以及用pipenv快速部署生产环境&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="python" scheme="https://lintingbin2009.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在Spark中使用Python单例的技巧</title>
    <link href="https://lintingbin2009.github.io/2018/05/20/%E5%9C%A8Spark%E4%B8%AD%E4%BD%BF%E7%94%A8Python%E5%8D%95%E4%BE%8B%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>https://lintingbin2009.github.io/2018/05/20/在Spark中使用Python单例的技巧/</id>
    <published>2018-05-20T14:33:03.000Z</published>
    <updated>2018-10-27T12:05:19.056Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用spark编程的时候，我们需要知道我们编写的某一段代码是在driver端执行，还是在executor端执行。如果是在executor端执行的话，就要注意这些代码是否是可以序列化发送到executor端执行，如果不行的话就会报错。接下来这篇文章主要讨论Python单例在使用Spark的时候解决的问题。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在使用spark的时候经常会用到map来对数据进行处理，在map函数里面的代码会被序列化，然后发送到executor端执行。但是并不是所有的代码都是可以被序列化的，比如一个mysql连接的实例就不能被序列化，然后发送到executor端执行。要解决这个问题很简单，如果一个mysql连接的实例不能被序列化发送的话，可以在executor端实例化一个mysql连接，然后使用这个连接。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(row)</span>:</span></span><br><span class="line">    connector = mysql.connector.connect(**mysql_conf)</span><br><span class="line">    <span class="comment"># Do something</span></span><br><span class="line">rdd.map(transform)</span><br></pre></td></tr></table></figure></p><p>上述的代码可以正确的运行，但是有一个比较严重的问题：map函数在每执行一次转换的时候都需要实例化一个mysql的实例，在实例化的时候要与mysql服务器建立连接，这个开销是比较大的，可想而知效率会非常的低。</p><p>要解决这个问题我们可以用mapPartitions接口来代替map，mapPartitions接口不是对每行数据进行操作的时候都执行一个mysql实例化操作，而是对一个partition的数据执行操作时候才执行一个mysql实例化操作，这样效率会大大的提升，上述的代码可以改成如下的代码。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(rows)</span>:</span></span><br><span class="line">    connector = mysql.connector.connect(**mysql_conf)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="comment"># Do something</span></span><br><span class="line">rdd.mapPartitions(transform)</span><br></pre></td></tr></table></figure></p><p>这样问题似乎已经解决了，但是解决的还不完全，或者说只解决rdd的问题，因为虽然spark的rdd支持mapPartitions操作，但是DataFrame并不支持mapPartitions的操作（对DataFrame执行map操作可以注册一个udf函数，然后调用这个udf函数）。有一个不太优美的做法是先把DataFrame转化成rdd进行mapPartitions，然后再把处理后的rdd转化成DataFrame。要在两种数据结构之间来回转化，这个操作实在是不够优美，而且效率低下。所以我们需要找到一个让mysql在map操作中只实例化一次的方法。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>要优美的解决上面提到的这个问题的话，我们就需要用到Python的单例了。Python的单例实现方式有很多种，这在边我只介绍最简单的一种。利用Python的import机制可以确保一个模块只被导入一次，如果在这个模块里面实例化一个mysql实例的话，那么即使被多次导入，也只会被实例化一次。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SingletonMysql.py</span></span><br><span class="line">connector = mysql.connector.connect(**mysql_conf)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(row)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> SingletonMysql <span class="keyword">import</span> connector</span><br><span class="line">    <span class="comment"># Do something</span></span><br><span class="line">rdd.map(transform)</span><br><span class="line">spark.udf.register(<span class="string">"transform"</span>, transform)</span><br><span class="line">spark.sql(<span class="string">"select transform(name) from table"</span>)</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们就可以在map函数里面使用mysql实例，而且能够保证它只会在第一次使用的时候被实例化。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在一些第三方库的接口已经确定的情况下，有时候我们必须使用一些语言的特性才能达到一些特定的目标。这个Python单例的使用只是其中的一个例子，如果Spark本身的接口支持在executor端进行一些初始化操作的话就不需要用到单例了。还有，比如map里面的函数只能是一个参数的函数，但是有时候我们需要一些额外的信息，所以这时候就要用匿名函数来达到这个目的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在使用spark编程的时候，我们需要知道我们编写的某一段代码是在driver端执行，还是在executor端执行。如果是在executor端执行的话，就要注意这些代码是否是可以序列化发送到executor端执行，如果不行的话就会报错。接下来这篇文章
      
    
    </summary>
    
      <category term="python" scheme="https://lintingbin2009.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://lintingbin2009.github.io/tags/python/"/>
    
      <category term="spark" scheme="https://lintingbin2009.github.io/tags/spark/"/>
    
      <category term="单例" scheme="https://lintingbin2009.github.io/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spark报错——java.lang.outofmemoryerror: java heap space问题处理</title>
    <link href="https://lintingbin2009.github.io/2018/05/20/Spark%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94java-lang-outofmemoryerror-java-heap-space%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://lintingbin2009.github.io/2018/05/20/Spark报错——java-lang-outofmemoryerror-java-heap-space问题处理/</id>
    <published>2018-05-20T07:07:11.000Z</published>
    <updated>2018-05-20T14:30:56.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在用spark处理数据的时候遇到内存不足的报错，主要的报错信息是在executor端的log中显示java.lang.outofmemoryerror: java heap space。</p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>具体的问题是spark在执行到最后一个stage后有一个task一直执行不成功，每次都是重试四次后失败。下面的两张图是具体失败的信息：<img src="/images/spark_outofmemory1.png" alt="四次task失败信息"><img src="/images/spark_outofmemory2.png" alt="具体失败的log"></p><p>task的失败的信息图中显示：失败的任务的Shffle Read Size是0，这个是不对的，因为这个信息在任务失败的时候都会被置零，实际上在任务在运行的时候这个值是六百多M，远远大于其他task的输入的20多M。</p><p>从上面失败的信息中我们可以看到失败的原因是有一个task的输入的数据量太大，以至于spark executor运行的时候需要的内存大大增加，这才导致了内存不足的异常。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><h5 id="解决尝试一"><a href="#解决尝试一" class="headerlink" title="解决尝试一"></a>解决尝试一</h5><p>最简单直接的解决方法是直接通过增大executor-memory的值来增加executor最大的内存使用量，由于yarn默认的每个executor的core是一个，如果本身启动的executor比较多的话，增加executor-memory的值的话，yarn集群就要多消耗executor的数量✖️增加的内存量的内存，内存的消耗会比较大。所以可以减少executor的数量，为每个executor分配多个core，这样需要的内存量就大大的减少了，但是每个executor可以使用的内存量又可以增加，这样的配置可以减少因为数据倾斜导致任务失败的概率。  </p><p>最终我们用这个方法把每个executor的executor-memory值增大到了12G，但是最后还是由于内存不够失败了。</p><h5 id="解决尝试二"><a href="#解决尝试二" class="headerlink" title="解决尝试二"></a>解决尝试二</h5><p>由于某个task需要的内存量非常的大，然而其他task的内存量都很小，这应该不是简单的数据倾斜。spark sql只是对玩家的登陆数据进行以device_id为key的group by操作，数据的倾斜不可能这么严重。</p><p>在重新观察了玩家的登陆数据后，我发现有很多数据的device_id为null。这下就很清楚的知道数据倾斜的原因了，接着对device_id为null的数据进行过滤后，问题就迎刃而解了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在处理数据倾斜问题的时候可以通过调整spark的参数来优化任务的执行。但是如果想更彻底的优化任务的执行的话，要观察数据，知道是什么原因造成的数据倾斜。这样才能进行更彻底的优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在用spark处理数据的时候遇到内存不足的报错，主要的报错信息是在executor端的log中显示java.lang.outofmemoryerror: java heap space。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;问题
      
    
    </summary>
    
      <category term="错误处理" scheme="https://lintingbin2009.github.io/categories/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
    
      <category term="spark" scheme="https://lintingbin2009.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>使用spark进行流处理</title>
    <link href="https://lintingbin2009.github.io/2018/05/04/%E4%BD%BF%E7%94%A8spark%E8%BF%9B%E8%A1%8C%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>https://lintingbin2009.github.io/2018/05/04/使用spark进行流处理/</id>
    <published>2018-05-04T15:34:53.000Z</published>
    <updated>2018-05-04T16:57:24.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在做一个假量检测的项目，主要是用来检测是否有一些伪造的广告点击之类的，然后该项目使用了spark来做在线的流处理</p></blockquote><h4 id="spark的使用场景"><a href="#spark的使用场景" class="headerlink" title="spark的使用场景"></a>spark的使用场景</h4><p>spark主要用来读取kafka里面的一些点击、安装、登入和登出等数据，然后使用spark的流处理模块对这些数据进行处理，最后把处理完的数据存储到相应的数据库中，供后面的数据分析使用。</p><h4 id="使用的spark流处理模块"><a href="#使用的spark流处理模块" class="headerlink" title="使用的spark流处理模块"></a>使用的spark流处理模块</h4><p>spark的流处理模块有两个：</p><ul><li>Spark Streaming(Dstream) 老的接口</li><li>Structured Streaming 新的接口</li></ul><p>我们的项目使用了Dstream实现流处理，一个主要的原因是在新的Structured Streaming中我们不能获取到读取的kafka的offset，这样当我们有数据处理失败的时候就不能从相应的offset中恢复继续运行，虽然可以设置checkpoint来恢复失败的任务，但是checkpoint的恢复是基于任务的，不能对该任务进行修改，然后再重新运行。<br>对于怎么在Structured Streaming中获取offset，我查了一些资料，如果实在是想获取offset的话也可以通过读取checkpoint文件夹下面的offset文件夹来获取当前的offset，不过这种方法比较奇怪。还有一个方法是使用StreamingQueryListener类里面的onQueryProgress回调来获取当前执行的状态，其中包括offset的信息，但是非常遗憾这种方法只支持scala和java，而我们的开发语言是python。下面的链接是该问题的具体讨论：<a href="https://stackoverflow.com/questions/46153105/how-to-get-kafka-offsets-for-structured-query-for-manual-and-reliable-offset-man/46174353" target="_blank" rel="noopener">如何从Structed streaming中获取offset的问题。</a></p><h4 id="在一个流中处理多个topic"><a href="#在一个流中处理多个topic" class="headerlink" title="在一个流中处理多个topic"></a>在一个流中处理多个topic</h4><p>感觉spark的api设置的非常不友好，想要在一个流中处理多个topic也挺麻烦的，主要的问题如下：</p><ul><li>如果使用Dstream，在创建Dstream的时候可以传入多个topic，这样貌似可以解决读取多个topic的问题，但是有一个很严重的问题，读取到的内容你不知道是属于哪个topic，这样你就不能对不同的topic执行不同的处理了。</li><li>如果使用Structured Streaming，也可以在DataStreamReader中指定多个topic，而且传入的每行数据中也有相应的topic信息，是可以根据不同的topic来调用不同的处理方法的。但是如上面所说的，Structured Streaming不支持获取offset让我们放弃了它。</li></ul><p>最后我们的处理方法是在一个流中建立多个Dstream，在每个Dstream中拉取和处理同一个topic的数据，这样一个流就可以处理多个topic了，示例代码如下所示：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> topic <span class="keyword">in</span> topic_info:</span><br><span class="line">    from_offsets = restore_off_sets(topic)</span><br><span class="line">    DStream = KafkaUtils.createDirectStream(ssc, [topic], kafka_params, from_offsets)</span><br><span class="line">    DStream.transform((<span class="keyword">lambda</span> t: <span class="keyword">lambda</span> rdd: get_offset_ranges(t, rdd))(topic))\</span><br><span class="line">        .map(<span class="keyword">lambda</span> x: x[<span class="number">1</span>])\</span><br><span class="line">        .foreachRDD((<span class="keyword">lambda</span> t: <span class="keyword">lambda</span> rdd: process_rdd(t, rdd))(topic))</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次使用spark，感觉spark的接口设置不是很友好，而且文档写的也不是很友好。比如foreachRDD的回调函数如果是两个参数的函数的话，第一个参数就是时间，这个在文档中没有提及，一不注意就有奇怪的bug了。总之自己还是一个菜鸟，还要多多学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在做一个假量检测的项目，主要是用来检测是否有一些伪造的广告点击之类的，然后该项目使用了spark来做在线的流处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;spark的使用场景&quot;&gt;&lt;a href=&quot;#spark的使用场景&quot; class
      
    
    </summary>
    
      <category term="流处理" scheme="https://lintingbin2009.github.io/categories/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
    
      <category term="spark" scheme="https://lintingbin2009.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd语法速记</title>
    <link href="https://lintingbin2009.github.io/2018/05/01/fluentd%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/"/>
    <id>https://lintingbin2009.github.io/2018/05/01/fluentd语法速记/</id>
    <published>2018-05-01T06:17:05.000Z</published>
    <updated>2018-05-04T15:15:55.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始转行做大数据，大数据中很重要的一部分是数据的收集，我们公司主要用的数据收集工具是Fluentd，由于Fluentd的配置比较多，有可能配置过一次后就会忘了。我这边在学习Fluentd配置的同时也对这些配置进行一些记录，方便后面再用到时可以快速的查找。</p></blockquote><h4 id="Fluentd简介"><a href="#Fluentd简介" class="headerlink" title="Fluentd简介"></a>Fluentd简介</h4><p>Fluentd是一款完全免费且完全开源的日志收集器，拥有“Log Everything”的体系结构，能够与125种以上的系统对接。</p><p><img src="/images/fluentd-architecture.png" alt="Fluentd-architecture"></p><h4 id="配置文件语法"><a href="#配置文件语法" class="headerlink" title="配置文件语法"></a>配置文件语法</h4><h5 id="Fluentd事件的生命周期"><a href="#Fluentd事件的生命周期" class="headerlink" title="Fluentd事件的生命周期"></a>Fluentd事件的生命周期</h5><ol><li>每个输入的事件会带有一个tag</li><li>Fluentd通过tag匹配output</li><li>Fluentd发送事件到匹配的output</li><li>Fluentd支持多个数据源和数据输出</li><li>通过过滤器，事件可以被重新触发</li></ol><h5 id="“source”-定义数据源"><a href="#“source”-定义数据源" class="headerlink" title="“source”: 定义数据源"></a>“source”: 定义数据源</h5><p>数据源可以在source指令中定义，比如我们可以定义http和forward的数据源。http数据源可以通过http协议来接收数据，forward可以通过tcp协议来接收数据。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Receive events from 24224/tcp</span></span><br><span class="line"><span class="section"># This is used by log forwarding and the fluent-cat command</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  port 24224</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line"><span class="section"># http://this.host:9880/myapp.access?json=&#123;"event":"data"&#125;</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 9880</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure></p><p>所有source指令中必须包含@type参数，该参数用来指定使用哪个输入插件，比如我们还可以用tail插件来读取文件的内容。 </p><h6 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h6><p>source指令把事件提交到Fluentd的路由引擎。一个事件由三个实体组成：tag、time和record。tag是由’.’分割的字符串组成，被内部路由引擎使用。time由input插件指定，必须是Unix时间戳格式。record是一个Json对象。</p><blockquote><p>强烈推荐使用小写字母、数字和下划线来命名tag，虽然其他的字符也是合法的。</p></blockquote><h5 id="“match”-定义数据的输出目标"><a href="#“match”-定义数据的输出目标" class="headerlink" title="“match”: 定义数据的输出目标"></a>“match”: 定义数据的输出目标</h5><p>match指令通过匹配tag字段来将事件输出到其他的系统。同样match指令也必须指定@type参数，该参数用来指定使用哪个输出插件。在下面的例子中，只有myapp.access的tag能够匹配到该输出插件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h6 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h6><p>下面的这些匹配模式可以在&lt;match&gt;中使用，用来匹配tag:  </p><ul><li>*用来匹配tag的一部分（比如：a.*可以匹配a.b，但是不能匹配a或者a.b.c）</li><li>**可以用来匹配tag的0个或多个部分（比如：a.**可以匹配a、a.b和a.b.c）</li><li>{X,Y,Z}匹配X,Y或者Z（比如：{a,b}可以匹配a和b，但是不能匹配c。他可以和*或者**结合起来一起使用。）</li><li>如果有多个匹配模式写在&lt;match&gt;里面，则可以用空格分开(比如：&lt;match a b&gt;能够匹配a和b。&lt;match a.** b.* &gt;能够匹配a,a.b,a.b.c和b.d。)</li></ul><h6 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h6><p>Fluentd是按顺序匹配的，先在配置文件里面出现的match会先匹配。下面的例子中myapp.access永远都不会被匹配到。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ** matches all tags. Bad :(</span></span><br><span class="line">&lt;match **&gt;</span><br><span class="line">  @type blackhole_plugin</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="“filter”：事件处理管道"><a href="#“filter”：事件处理管道" class="headerlink" title="“filter”：事件处理管道"></a>“filter”：事件处理管道</h5><p>“filter”指令的语法和”match”指令的语法相同，但是”filter”能够在管道中被连起来处理，如下所示：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Input -&gt; filter 1 -&gt; ... -&gt; filter N -&gt; Output</span><br></pre></td></tr></table></figure></p><p>下面的例子展示了record_transformer fliter的用法。source首先会接收到一个{“event”:”data”}的事件，然后该事件会首先被路由到filter，filter会增加一个host_param的字段到record中，然后再把该事件发送到match中。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># http://this.host:9880/myapp.access?json=&#123;"event":"data"&#125;</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 9880</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter myapp.access&gt;</span><br><span class="line">  @type record_transformer</span><br><span class="line">  &lt;record&gt;</span><br><span class="line"><span class="code">    host_param "#&#123;Socket.gethostname&#125;"</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myapp.access&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/fluent/access</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="“system”：设置系统范围配置"><a href="#“system”：设置系统范围配置" class="headerlink" title="“system”：设置系统范围配置"></a>“system”：设置系统范围配置</h5><p>以下的配置能够由”system”指令指定。也可以通过Fluentd的配置选项设置相同的配置:</p><ul><li>log_level</li><li>suppress_repeated_stacktrace</li><li>emit_error_log_interval</li><li>suppress_config_dump</li><li>without_source</li><li>process_name (只能用”system”指令指定)</li></ul><p>下面是一些例子：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">  # 等价于-qq选项</span><br><span class="line">  log_level error</span><br><span class="line">  #等价于--without-source选项</span><br><span class="line">  without_source</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">  process_name fluentd1</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure><p>process_name用来指定Fluentd监控进程和工作进程的名字，通过ps可以看到<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% ps aux | grep fluentd1</span><br><span class="line">foo      45673   0.4  0.2  2523252  38620 s001  S+    7:04AM   0:00.44 worker:fluentd1</span><br><span class="line">foo      45647   0.0  0.1  2481260  23700 s001  S+    7:04AM   0:00.40 supervisor:fluentd1</span><br></pre></td></tr></table></figure></p><h5 id="“label”：用来组织filter和match"><a href="#“label”：用来组织filter和match" class="headerlink" title="“label”：用来组织filter和match"></a>“label”：用来组织filter和match</h5><p>“label”指令用来降低tag路由的复杂度，通过”label”指令可以用来组织filter和match的内部路由。下面是一个配置的例子，由于”label”是内建的插件，所以他的参数需要以@开头。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type tail</span><br><span class="line">  @label @SYSTEM</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter access.**&gt;</span><br><span class="line">  @type record_transformer</span><br><span class="line">  &lt;record&gt;</span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;match **&gt;</span><br><span class="line">  @type elasticsearch</span><br><span class="line">  # ...</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">&lt;label @SYSTEM&gt;</span><br><span class="line">  &lt;filter var.log.middleware.**&gt;</span><br><span class="line"><span class="code">    @type grep</span></span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;match **&gt;</span><br><span class="line"><span class="code">    @type s3</span></span><br><span class="line"><span class="code">    # ...</span></span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，forward的数据源的事件被路由到record_transformer filter和elasticsearch output中。tail数据源被路由到@system里面的grep filter和s3 output中。</p><h6 id="ERROR-label"><a href="#ERROR-label" class="headerlink" title="@ERROR label"></a>@ERROR label</h6><p>@ERROR label是内建的label，用来记录emit_error_event错误事件的。如果在配置文件里面设置了<label @error="">，当有相关的错误发生（比如：缓冲区已满或无效记录）的话，该错误事件就会被发送到&lt; label @ERROR &gt;。</label></p><h5 id="“-include”：重用配置"><a href="#“-include”：重用配置" class="headerlink" title="“@include”：重用配置"></a>“@include”：重用配置</h5><p>可以通过”@include”来导入其他的配置文件，配置文件是按顺序导入的。如果使用模式匹配的话，文件是按字母顺序导入的。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># If you have a.conf,b.conf,...,z.conf and a.conf / z.conf are important...</span></span><br><span class="line"><span class="section"># This is bad</span></span><br><span class="line">@include *.conf</span><br><span class="line"></span><br><span class="line"><span class="section"># This is good</span></span><br><span class="line">@include a.conf</span><br><span class="line">@include config.d/*.conf</span><br><span class="line">@include z.conf</span><br></pre></td></tr></table></figure></p><p>如果导入的文件有顺序的要求的话，最好自己主动写导入的语句，模式匹配导入容易出错。</p><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><p>每个插件都需要一些参数。例如：in_tail插件有rotate_wait和pos_file这两个参数。每个参数都有对应的类型与其关联。下面是这些类型的定义：</p><ul><li>string 类型：该类型被解析成一个字符串。string类型可以有三种形式：不带引号的字符串、带单引号的字符串和带双引号的字符串。</li><li>integer 类型：该类型被解析成一个整数。</li><li>float 类型：该类型被解析成一个浮点数。</li><li>size 类型：该类型用来解析成有多少个字节。可以在整数后面加上k/K、m/M、g/G、t/T，对应的是计算机学科的度量单位。比如：12k表示为12*1024后的数值。</li><li>time 类型：该类型被解析成时间。可以在浮点数后面加上s、m、h和d分别表示为秒、分、小时、天。可以用0.1表示100ms。</li><li>array 类型：该类型被解析成JSON数组。这种类型还支持缩写，比如：[“key1”, “key2”]可以缩写成key1,key2。</li><li>hash 类型：该类型被解析成JSON对象。这种类型也支持缩写，比如：{“key1”:”value1”, “key2”:”value2”}可以缩写成key1:value1,key2:value2。</li></ul><h4 id="常见的插件参数"><a href="#常见的插件参数" class="headerlink" title="常见的插件参数"></a>常见的插件参数</h4><p>这些参数是系统保留的并且带有@前缀。</p><ul><li>@type: 指定插件的类型。</li><li>@id: 指定插件的id。</li><li>@label：用来指定标签。</li><li>@log_level：用来指定每个插件的log级别。</li></ul><h4 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h4><p>通过–dry-run选项，可以在不启动插件的情况下检查配置文件。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fluentd --dry-run -c fluent.conf</span><br></pre></td></tr></table></figure></p><h4 id="格式建议"><a href="#格式建议" class="headerlink" title="格式建议"></a>格式建议</h4><h5 id="双引号包起来的字符串、数组和哈希类型支持多行"><a href="#双引号包起来的字符串、数组和哈希类型支持多行" class="headerlink" title="双引号包起来的字符串、数组和哈希类型支持多行"></a>双引号包起来的字符串、数组和哈希类型支持多行</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str_param "foo  # This line is converted to "foo\nbar". NL is kept in the parameter</span><br><span class="line">bar"</span><br><span class="line">array_param [</span><br><span class="line">  "a", "b"</span><br><span class="line">]</span><br><span class="line">hash_param &#123;</span><br><span class="line">  "k":"v",</span><br><span class="line">  "k1":10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让[或者{开头的字符串不被解析成数组或者对象，则需要用’或者“把该字符串包起来。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;match **&gt;</span><br><span class="line">  @type mail</span><br><span class="line">  subject "[CRITICAL] foo's alert system"</span><br><span class="line">&lt;/match&gt;</span><br><span class="line">&lt;match tag&gt;</span><br><span class="line">  @type map</span><br><span class="line">  map '[["code." + tag, time, &#123; "code" =&gt; record["code"].to<span class="emphasis">_i&#125;], ["time." + tag, time, &#123; "time" =&gt; record["time"].to_</span>i&#125;]]'</span><br><span class="line">  multi true</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p><h5 id="嵌入Ruby代码"><a href="#嵌入Ruby代码" class="headerlink" title="嵌入Ruby代码"></a>嵌入Ruby代码</h5><p>可以在”包住的#{}里面执行Ruby代码，这可以用来获取一些机器的信息，比如hostname。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host_param "#&#123;hostname&#125;"  # This is same with Socket.gethostname</span><br><span class="line">@id "out<span class="emphasis">_foo#&#123;worker_</span>id&#125;" # This is same with ENV["SERVERENGINE<span class="emphasis">_WORKER_</span>ID"]</span><br></pre></td></tr></table></figure></p><h5 id="在双引号字符串中，-是转义字符"><a href="#在双引号字符串中，-是转义字符" class="headerlink" title="在双引号字符串中，\是转义字符"></a>在双引号字符串中，\是转义字符</h5><p>\被解释为转义字符。你需要用\来设置”，\r，\n，\t，\或双引号字符串中的多个字符。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_param "foo\nbar" # \n is interpreted as actual LF character</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近开始转行做大数据，大数据中很重要的一部分是数据的收集，我们公司主要用的数据收集工具是Fluentd，由于Fluentd的配置比较多，有可能配置过一次后就会忘了。我这边在学习Fluentd配置的同时也对这些配置进行一些记录，方便后面再用到时可以快
      
    
    </summary>
    
      <category term="日志收集" scheme="https://lintingbin2009.github.io/categories/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="Fluentd" scheme="https://lintingbin2009.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>图片转像素风实现</title>
    <link href="https://lintingbin2009.github.io/2018/03/30/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%83%8F%E7%B4%A0%E9%A3%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://lintingbin2009.github.io/2018/03/30/图片转像素风实现/</id>
    <published>2018-03-30T04:13:27.000Z</published>
    <updated>2018-10-27T12:05:43.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python用来写各种小工具简直是神器，昨天晚上花了点时间实现了一个图片转像素风的小工具，下面附上图片Demo和代码</p></blockquote><p><div style="width: 400px"><img src="/images/pixel_demo.png" alt=""></div>下面是实现的具体代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  </span><br><span class="line"><span class="keyword">import</span> argparse  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 命令行输入参数处理  </span></span><br><span class="line">parser = argparse.ArgumentParser()  </span><br><span class="line">  </span><br><span class="line">parser.add_argument(<span class="string">'file'</span>)     <span class="comment"># 输入文件  </span></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--output'</span>)   <span class="comment"># 输出文件  </span></span><br><span class="line">parser.add_argument(<span class="string">'--maxlen'</span>, type=int, default=<span class="number">150</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取参数  </span></span><br><span class="line">args = parser.parse_args()  </span><br><span class="line">  </span><br><span class="line">IMG = args.file  </span><br><span class="line">MAXLEN = args.maxlen  </span><br><span class="line">OUTPUT = args.output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize_image</span><span class="params">(im)</span>:</span></span><br><span class="line">    (width, height) = im.size</span><br><span class="line">    max_len = max(width, height)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> max_len &lt;= MAXLEN:</span><br><span class="line">        <span class="keyword">return</span> im</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        scale = max_len / MAXLEN</span><br><span class="line">        size = (int(width//scale), int(height//scale))</span><br><span class="line">        <span class="keyword">return</span>  im.resize(size, Image.NEAREST) </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line"></span><br><span class="line">    im = Image.open(IMG)  </span><br><span class="line">    im = resize_image(im) </span><br><span class="line">  </span><br><span class="line">    txt = <span class="string">""</span>  </span><br><span class="line">    (width, height) = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(height):  </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(width):  </span><br><span class="line">            (r, b, g) = im.getpixel((j, i))</span><br><span class="line">            txt += <span class="string">"&lt;font style='background:rgb(&#123;&#125;,&#123;&#125;,&#123;&#125;);display:inline-block;width:3px;height:3px;margin:1px;'&gt;&lt;/font&gt;"</span>.format(r, b, g)</span><br><span class="line">        txt += <span class="string">'&lt;/br&gt;'</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> OUTPUT:</span><br><span class="line">        OUTPUT =  <span class="string">"output.txt"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(OUTPUT,<span class="string">'w'</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        f.write(txt)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Python用来写各种小工具简直是神器，昨天晚上花了点时间实现了一个图片转像素风的小工具，下面附上图片Demo和代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width: 400px&quot;&gt;
&lt;img src=&quot;/images
      
    
    </summary>
    
      <category term="python" scheme="https://lintingbin2009.github.io/categories/python/"/>
    
    
      <category term="图片" scheme="https://lintingbin2009.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="小工具" scheme="https://lintingbin2009.github.io/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用erlang:get_stacktrace注意避开的坑</title>
    <link href="https://lintingbin2009.github.io/2018/03/29/%E4%BD%BF%E7%94%A8erlang-get-stacktrace%E6%B3%A8%E6%84%8F%E9%81%BF%E5%BC%80%E7%9A%84%E5%9D%91/"/>
    <id>https://lintingbin2009.github.io/2018/03/29/使用erlang-get-stacktrace注意避开的坑/</id>
    <published>2018-03-29T03:03:03.000Z</published>
    <updated>2018-05-04T15:15:55.987Z</updated>
    
    <content type="html"><![CDATA[<p>之前在使用erlang:get_stacktrace()函数的时候发现不能正确的获取发生异常的栈内容，但是错误类型和原因却是正常，感觉非常奇怪，下面是具体的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dispatch_cmd</span><span class="params">(User, Mod, Msg)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">try</span> Mod:req(User, Msg) <span class="keyword">of</span></span><br><span class="line">    Result -&gt;</span><br><span class="line">      Result</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    Class:Reason -&gt;</span><br><span class="line">      monitor:notify(ws_dispatch_crash, io_lib:format(<span class="string">"&lt;error-info: ~p:req ~p:~p&gt;"</span>, [Mod, Class, Reason])),</span><br><span class="line">      ?ERROR(<span class="string">"Req Msg: ~p.~nStacktrace: ~s"</span>, [?PR(Msg), ?PR_ST(erlang:get_stacktrace(), &#123;Class, Reason&#125;)]),</span><br><span class="line">      ?ERR_AT_DISPATCH_CMD</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p><strong>上面的代码有什么问题呢？</strong>主要的问题是在调用erlang:get_stacktrace()之前执行了其他有可能会有异常捕获的语句，而在io_lib:format里面会有catch函数，如果io_lib:format函数里面的catch被调用的话，erlang:get_stacktrace()返回的就不是我们想要打印的异常栈，而是io_lib:format里面的异常栈。<strong>如何解决？</strong>在catch之后里面立马调用erlang:get_stacktrace()<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dispatch_cmd</span><span class="params">(User, Mod, Msg)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">try</span> Mod:req(User, Msg) <span class="keyword">of</span></span><br><span class="line">    Result -&gt;</span><br><span class="line">      Result</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    Class:Reason -&gt;</span><br><span class="line">      Stacktrace = erlang:get_stacktrace(),</span><br><span class="line">      monitor:notify(ws_dispatch_crash, io_lib:format(<span class="string">"&lt;error-info: ~p:req ~p:~p&gt;"</span>, [Mod, Class, Reason])),</span><br><span class="line">      ?ERROR(<span class="string">"Req Msg: ~p.~nStacktrace: ~s"</span>, [?PR(Msg), ?PR_ST(Stacktrace, &#123;Class, Reason&#125;)]),</span><br><span class="line">      ?ERR_AT_DISPATCH_CMD</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>据说erlang的开发团队也认为erlang:get_stacktrace()是一个不好的东西，会在OTP 21中把它废弃掉，有一位叫@peterdmv的开发人员是这样说的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">erlang:get_stacktrace/0 is deprecated in OTP 21, you can use the following expression instead:</span><br><span class="line"></span><br><span class="line">try Expr</span><br><span class="line">catch</span><br><span class="line">  Class:Reason:Stacktrace -&gt;</span><br><span class="line">   &#123;Class,Reason,Stacktrace&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>我试了下这个新语法，在OTP 20.3上面还不行，应该在接下来的OTP 21中能够使用它吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在使用erlang:get_stacktrace()函数的时候发现不能正确的获取发生异常的栈内容，但是错误类型和原因却是正常，感觉非常奇怪，下面是具体的代码：
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/categories/Erlang/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>Git远程推送时记住用户名和密码</title>
    <link href="https://lintingbin2009.github.io/2018/03/11/Git%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81%E6%97%B6%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81/"/>
    <id>https://lintingbin2009.github.io/2018/03/11/Git远程推送时记住用户名和密码/</id>
    <published>2018-03-11T09:04:20.000Z</published>
    <updated>2018-05-04T15:15:55.981Z</updated>
    
    <content type="html"><![CDATA[<p>当使用HTTPS协议推送代码到Git仓库时，发现每次都需要输入密码，操作起来非常麻烦。下面介绍几种免去输入密码的方法。</p><a id="more"></a><h3 id="HTTPS协议推送"><a href="#HTTPS协议推送" class="headerlink" title="HTTPS协议推送"></a>HTTPS协议推送</h3><p>使用HTTPS协议，有一种简单粗暴的方式是在远程地址中带上密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote set-url origin http://yourname:password@bitbucket.org/yourname/project.git</span><br></pre></td></tr></table></figure><p>还有一种方法，是创建文件存储Git用户名和密码。</p><p>以Windows环境为例，在%USERPROFILE%目录中（一般为C:\Users\yourname)，打开Git Bash命令行，创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; touch .git-credentials</span><br></pre></td></tr></table></figure><p>在文件中输入仓库域名，这里使用了<code>bitbucket.org</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourname:password@bitbucket.org</span><br></pre></td></tr></table></figure><p>在CMD终端中设置在全局Git环境中，长期存储密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global credential.helper store</span><br></pre></td></tr></table></figure><blockquote><p>其他设置密码方式记住密码（默认15分钟）：<code>git config --global credential.helper cache</code>自定义存储时间：<code>git config credential.helper &#39;cache --timeout=3600&#39;</code></p></blockquote><h3 id="SSH协议推送"><a href="#SSH协议推送" class="headerlink" title="SSH协议推送"></a>SSH协议推送</h3><p>如果原来的推送地址协议是HTTPS，可以通过换成SSH协议，在远程仓库添加SSH Key来实现推送时免账户密码输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote -v             // 查看远程地址</span><br><span class="line">&gt; git remote rm origin      // 删除原有的推送地址</span><br><span class="line">&gt; git remote add origin git@github.com:&lt;用户名&gt;/版本库名</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git remote -v</span><br><span class="line">&gt; git remote set-url origin git@github.com:&lt;用户名&gt;/版本库名</span><br></pre></td></tr></table></figure><p>执行推送。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git push -u origin master</span><br></pre></td></tr></table></figure></p><p>发现提示权限不够。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;bitbucket.org (104.192.143.1)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:zzXQOXSRBEiUtuE8AikJYKwbHaxvSc0ojez9YXaGp1A.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;bitbucket.org,104.192.143.1&apos; (RSA) to the list of kn</span><br><span class="line">own hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></p><p>需要在本地创建该帐号的RSA Key。可以参考以下两篇文章：<a href="/2018/03/11/Windows下配置SSH连接Github/" title="Windows下配置SSH连接Github">Windows下配置SSH连接Github</a><a href="/2018/03/11/Git如何在本地生成多个SSH-key/" title="Git如何在本地生成多个SSH key">Git如何在本地生成多个SSH key</a></p><p>然后再执行推送。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; git push -u origin master</span><br></pre></td></tr></table></figure></p><p>就可以推送成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用HTTPS协议推送代码到Git仓库时，发现每次都需要输入密码，操作起来非常麻烦。下面介绍几种免去输入密码的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://lintingbin2009.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://lintingbin2009.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git如何在本地生成多个ssh key</title>
    <link href="https://lintingbin2009.github.io/2018/03/11/Git%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AASSH-key/"/>
    <id>https://lintingbin2009.github.io/2018/03/11/Git如何在本地生成多个SSH-key/</id>
    <published>2018-03-11T09:03:15.000Z</published>
    <updated>2018-05-20T06:58:55.762Z</updated>
    
    <content type="html"><![CDATA[<p>在本地上传Git项目到远程时，本地需要对应的Git账户信息和允许连接的SSH key信息，远程才会允许上传。</p><a id="more"></a><p><a href="">Windows下配置SSH连接Github</a>介绍了如何生成SSH key。但当遇到需要有多个Git账户信息时怎么办呢，如果删除密钥重新创建，那每次切换账户时都要重复这样的操作，太过繁琐。</p><p>这个问题我们可以通过在<code>~/.ssh</code>目录下增加<code>config</code>文件来解决。</p><h3 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h3><p>生成SSH key，并指定文件名，避免覆盖原有的默认<code>id_rsa</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.another -C &lt;Git注册邮箱&gt;</span><br></pre></td></tr></table></figure><blockquote><p>windows用户打开Git Bash来执行ssh-keygen命令。</p></blockquote><h3 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h3><p>在<code>~/.ssh</code>下添加config文件，如果已经存在，就直接打开修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch ~/.ssh/config   // 创建</span><br></pre></td></tr></table></figure><p>在config文件中添加如下信息。其中Host后面添加远程Git仓库域名，IdentityFile填写对应的id_rsa文件，User添加Git用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa.another</span><br><span class="line">    User anotherUser</span><br></pre></td></tr></table></figure><h3 id="上传SSH-key"><a href="#上传SSH-key" class="headerlink" title="上传SSH key"></a>上传SSH key</h3><p>在远程Git账号中添加SSH key，将id_rsa.another.pub中的内容全部粘贴进去。</p><blockquote><p>pub信息一般以ssh-rsa开头</p></blockquote><h3 id="测试SSH-key"><a href="#测试SSH-key" class="headerlink" title="测试SSH key"></a>测试SSH key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.com  // 或者其他域名地址</span><br></pre></td></tr></table></figure><p>弹出成功信息，则表示SSH key添加成功，接下来就可以推送代码到远程了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本地上传Git项目到远程时，本地需要对应的Git账户信息和允许连接的SSH key信息，远程才会允许上传。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://lintingbin2009.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://lintingbin2009.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Windows下配置SSH连接Github</title>
    <link href="https://lintingbin2009.github.io/2018/03/11/Windows%E4%B8%8B%E9%85%8D%E7%BD%AESSH%E8%BF%9E%E6%8E%A5Github/"/>
    <id>https://lintingbin2009.github.io/2018/03/11/Windows下配置SSH连接Github/</id>
    <published>2018-03-11T08:55:55.000Z</published>
    <updated>2018-05-04T15:15:55.982Z</updated>
    
    <content type="html"><![CDATA[<p>当使用git协议推送本地代码到远程时，需要配置ssh连接到GitHub。</p><a id="more"></a><h2 id="设置账户"><a href="#设置账户" class="headerlink" title="设置账户"></a>设置账户</h2><p>打开系统cmd。设置Git的user name和email。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global user.name &quot;username&quot;</span><br><span class="line">&gt; git config --global user.email &quot;username@domain.com&quot;</span><br></pre></td></tr></table></figure><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><ul><li>查看ssh密钥</li></ul><p>查看是否已经有了ssh密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; C:</span><br><span class="line">&gt; cd %USERPROFILE%/.ssh</span><br></pre></td></tr></table></figure><p>默认.ssh文件夹会在用户文件夹中生成。可以前往该路径查看。如果没有该文件夹，终端会提示<code>系统找不到指定的路径</code>,有的话可以备份删除。</p><blockquote><p>%USERPROFILE%是环境变量，表示当前用户文件夹路径。</p></blockquote><blockquote><p>因为%USERPROFILE%一般在C盘，从其他盘无法直接cd到该路径，所以需要先切换到c盘。</p></blockquote><ul><li>生成密钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh-keygen -t rsa -C &quot;username@domain.com&quot;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;username@domain.com&quot; -f %USERPROFILE%/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</span><br></pre></td></tr></table></figure><p>产生如下交互提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/username/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/c/Users/username/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/username/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:ggjGi2UqwYTJR9TP6fdpqsY+COeMdeTPL+IW0mo4eUI username@domain.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|oooo.            |</span><br><span class="line">|*. . .           |</span><br><span class="line">|o++   o .        |</span><br><span class="line">|o*.. . =         |</span><br><span class="line">|+.. . * S        |</span><br><span class="line">|.  E + B .       |</span><br><span class="line">|  . X * = . .    |</span><br><span class="line">|   * B * + +     |</span><br><span class="line">|    = =++.=.     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>命令生成两个文件，默认名称是id_rsa和id_rsa.pub。复制id_rsa.pub中的内容到远程GitHub账号中就行了。</p><blockquote><p>默认下，cmd无法识别ssh-keygen命令。可以打开git bash 执行上述命令。</p></blockquote><blockquote><p>如何找到<a href="http://github.com上的ssh设置：右上角图标（view" target="_blank" rel="noopener">http://github.com上的ssh设置：右上角图标（view</a> profile and more）=》Settings =》 SSH and GPG keys，在Key输入框中输入公钥。公钥内容形如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD2cauWf8lNjbED9RvLBWoEXB3Lq5NRLWqVYSaFcTmZ1Qsak2LdR/9bkdTVMsTyqVxnB+bDMlVJlvPP6Zv5dDwEdcdytALUGCSdOXAmRtgxHZPEnKl8Hyl5wZdSNi0mwXYbjpUZ7HEw3vU8K/5whVVCbIzkqnlLAs9nXdORNkidOZRnyt+ETQzU/F1KVUb9HoMbB1Cw0zLvWTRIOHRXa2mKjNHS7W9HJiPEWQaeEXwh1CoredCxs0K7+KBfMkdgNYnDudtz2/AmH7qHnaVsdYNkg1V4XvWJ8Yn7Pkw1SpvTkaXXCiyA5wsPGgLFWSB+dgNroGwqw4X96/ZUfFHDtD/t yanyinhong@baidu.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用git协议推送本地代码到远程时，需要配置ssh连接到GitHub。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://lintingbin2009.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://lintingbin2009.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于erlang-mysql-driver timeout的bug分析</title>
    <link href="https://lintingbin2009.github.io/2018/03/10/timeout%E7%9A%84bug%E5%88%86%E6%9E%90/"/>
    <id>https://lintingbin2009.github.io/2018/03/10/timeout的bug分析/</id>
    <published>2018-03-10T14:08:17.000Z</published>
    <updated>2018-05-04T15:15:55.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们游戏之前使用的是erlang-mysql-driver来连接数据库，经常会碰到一些timeout和一条纪录被重复插入多次的bug，后面把erlang-mysql-driver替换成emysql就没有问题了。研究了下erlang-mysql-driver的源代码才知道具体的问题出在哪里，下面就简单的介绍下这个问题，同时介绍下emysql是如何避免这个问题的</p></blockquote><h4 id="erlang-mysql-driver-用法"><a href="#erlang-mysql-driver-用法" class="headerlink" title="erlang-mysql-driver 用法"></a>erlang-mysql-driver 用法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql:start_link(DB, Pool, Server, Port, User, Passwd, DBName, <span class="keyword">fun</span> mysql_log/<span class="number">4</span>, utf8),</span><br><span class="line">[mysql:connect(DB, Pool, Server, Port, User, Passwd, DBName, utf8, <span class="literal">true</span>, <span class="literal">true</span>) </span><br><span class="line">|| _ &lt;- lists:seq(<span class="number">1</span>, PoolCount)]</span><br></pre></td></tr></table></figure><p>使用erlang-mysql-driver的时候首先要用mysql:start_link来建立一个连接池，然后再自己调用mysql:connect来建立多个连接。对应的erlang-mysql-driver库里面会创建一个名为DB的连接池gen_server，然后再建立多个mysql数据库的连接，每个连接会有一个进程来接管，并把这些进程和连接信息放入连接池gen_server中。按道理我们建立了多个数据库的连接，在进行数据库操作的时候应该能够并发访问数据库的，确实erlang-mysql-driver实现也是多进程访问数据库的，但是由于连接池gen_server的单点瓶颈，会导致一些事实上成功的操作被认为是失败的。</p><h4 id="erlang-mysql-driver-的sql执行过程"><a href="#erlang-mysql-driver-的sql执行过程" class="headerlink" title="erlang-mysql-driver 的sql执行过程"></a>erlang-mysql-driver 的sql执行过程</h4><p>在我们执行一个mysql:execute的函数的时候，具体的执行过程如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% mysql.erl 文件中的代码</span></span><br><span class="line"><span class="function"><span class="title">execute</span><span class="params">(SvrName, PoolId, Name, Params, Timeout)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">case</span> get(?STATE_VAR) <span class="keyword">of</span></span><br><span class="line">    undefined -&gt;</span><br><span class="line">      call_server(SvrName, &#123;execute, SvrName, PoolId, Name, Params&#125;, Timeout);</span><br><span class="line">    State -&gt;</span><br><span class="line">      <span class="keyword">case</span> mysql_conn:execute_local(SvrName, State, Name, Params) <span class="keyword">of</span></span><br><span class="line">        &#123;ok, Res, NewState&#125; -&gt;</span><br><span class="line">          put(?STATE_VAR, NewState),</span><br><span class="line">          Res;</span><br><span class="line">        Err -&gt;</span><br><span class="line">          Err</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">handle_call</span><span class="params">(&#123;execute, SvrName, PoolId, Name, Params&#125;, From, State)</span> -&gt;</span></span><br><span class="line">  with_next_conn(PoolId, State,</span><br><span class="line">    <span class="keyword">fun</span>(Conn, State1) -&gt;</span><br><span class="line">      <span class="keyword">case</span> gb_trees:lookup(Name, State1#state.prepares) <span class="keyword">of</span></span><br><span class="line">        none -&gt;</span><br><span class="line">          &#123;reply, &#123;error, &#123;no_such_statement, Name&#125;&#125;, State1&#125;;</span><br><span class="line">        &#123;value, &#123;_Stmt, Version&#125;&#125; -&gt;</span><br><span class="line">          mysql_conn:execute(SvrName, Conn#conn.pid, Name,</span><br><span class="line">            Version, Params, From),</span><br><span class="line">          &#123;noreply, State1&#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% mysql_conn的代码</span></span><br><span class="line"><span class="function"><span class="title">execute</span><span class="params">(SvrName, Pid, Name, Version, Params, From, Timeout)</span> -&gt;</span></span><br><span class="line">    send_msg(Pid, &#123;execute, SvrName, Name, Version, Params, From&#125;, From, Timeout).</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(State)</span> -&gt;</span></span><br><span class="line">    RecvPid = State#state.recv_pid,</span><br><span class="line">    LogFun = State#state.log_fun,</span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">    ....</span><br><span class="line">    &#123;execute, SvrName, Name, Version, Params, From&#125; -&gt;</span><br><span class="line">        State1 =</span><br><span class="line">        <span class="keyword">case</span> do_execute(State, SvrName, Name, Params, Version) <span class="keyword">of</span></span><br><span class="line">            &#123;error, _&#125; = Err -&gt;</span><br><span class="line">            send_reply(From, Err),</span><br><span class="line">            State;</span><br><span class="line">            &#123;ok, Result, NewState&#125; -&gt;</span><br><span class="line">            send_reply(From, Result),</span><br><span class="line">            NewState</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">        loop(State1);</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="title">send_reply</span><span class="params">(GenSrvFrom, Res)</span> -&gt;</span></span><br><span class="line">    gen_server:reply(GenSrvFrom, Res).</span><br></pre></td></tr></table></figure><p>mysql:execute在执行的过程中首先调用名为DB的连接池gen_server，该gen_server会执行with_next_conn选择一个持有数据库连接的进程（进程x），然后通过mysql_conn中的send_msg函数向进程x发送需要执行的sql语句，sql语句发送成功后gen_server会返回noreply，这时调用mysql:execute的进程会一直阻塞，直到进程x执行gen_server:reply来返回结果。</p><p>通过上面的执行过程我们可以知道以下两点：</p><ol><li>mysql:execute的timeout为gen_server:call调用的timeout时间</li><li>连接池gen_server只要把sql语句发送给进程x，进程x就会去执行（可能执行的比较慢，但是已经加入进程x的信箱）</li></ol><p>现在我们可以知道mysql:execute返回timeout的情况有两种：</p><ol><li>连接池gen_server太过繁忙，mysql:execute的请求还没执行，mysql:execute就已经timeout</li><li>连接池gen_server已经成功执行请求，返回noreply，mysql:execute的执行进程一直在等待进程x的返回，而进程x一直不返回，这时mysql:execute触发timeout</li></ol><p>不管是上述那种timeout情况，只要是mysql数据库没有问题，sql语句都能够执行成功（可能会执行的慢点）。mysql:execute的调用者在发现mysql:execute返回timeout的情况下，肯定会认为sql语句没有执行成功，这时候会重新调用mysql:execute，导致一条相同的记录被多次插入。</p><h4 id="emysql-的sql执行过程"><a href="#emysql-的sql执行过程" class="headerlink" title="emysql 的sql执行过程"></a>emysql 的sql执行过程</h4><p>emysql的连接池也会有一个gen_server进行管理，emysql:execute在执行的过程中是去向该gen_server申请一个可用的连接，然后再spawn一个进程来执行sql语句，而不是委托该gen_server来执行sql语句，从而避免了这个timeout的bug。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过上面的分析，我觉得erlang-mysql-driver会写出这个bug的原因主要是对gen_server noreply的误用。所以以后如果有需要用noreply的话，要注意避免该问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们游戏之前使用的是erlang-mysql-driver来连接数据库，经常会碰到一些timeout和一条纪录被重复插入多次的bug，后面把erlang-mysql-driver替换成emysql就没有问题了。研究了下erlang-mysql-dr
      
    
    </summary>
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/categories/Erlang/"/>
    
    
      <category term="erlang-mysql-driver" scheme="https://lintingbin2009.github.io/tags/erlang-mysql-driver/"/>
    
      <category term="emysql" scheme="https://lintingbin2009.github.io/tags/emysql/"/>
    
  </entry>
  
  <entry>
    <title>efficiency-guide:进程</title>
    <link href="https://lintingbin2009.github.io/2017/10/15/efficiency-guide-%E8%BF%9B%E7%A8%8B/"/>
    <id>https://lintingbin2009.github.io/2017/10/15/efficiency-guide-进程/</id>
    <published>2017-10-15T06:38:57.000Z</published>
    <updated>2018-05-04T15:15:55.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍进程的堆大小的优化，以及模块内的常量池，如果之前没有看过的，值得一看。</p></blockquote><h4 id="创建一个进程"><a href="#创建一个进程" class="headerlink" title="创建一个进程"></a>创建一个进程</h4><p>与操作系统中的线程和进程相比，Erlang进程是轻量级的。新创建的Erlang进程在非SMP和非HiPE模式下中使用309个字的内存。（SMP和HiPE支持会增加一些内存）进程占用的内存大小可以通过以下方式得到：</p><blockquote><p>Erlang (BEAM) emulator version 5.6 [async-threads:0] [kernel-poll:false]Eshell V5.6  (abort with ^G)1&gt; Fun = fun() -&gt; receive after infinity -&gt; ok end end.</p></blockquote><p>#Fun&lt;…&gt;2&gt; {_,Bytes} = process_info(spawn(Fun), memory).{memory,1232}3&gt; Bytes div erlang:system_info(wordsize).309</p><p>此大小包括堆区域（包括堆栈）的233个字。垃圾收集器根据需要增加堆。进程的主（外）循环必须是尾递归的。否则，堆栈会一直增长直到进程终止。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 不要这样做</span></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span> </span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">     &#123;sys, Msg&#125; -&gt;</span><br><span class="line">         handle_sys_msg(Msg),</span><br><span class="line">         loop();</span><br><span class="line">     &#123;From, Msg&#125; -&gt;</span><br><span class="line">          Reply = handle_msg(Msg),</span><br><span class="line">          From ! Reply,</span><br><span class="line">          loop()</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  io:format(<span class="string">"Message is processed~n"</span>, []).</span><br></pre></td></tr></table></figure></p><p>对io:format/2的调用永远不会被执行，但是每次loop/0被递归调用时，返回地址仍然被推送到堆栈。该函数的正确尾递归版本如下所示：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span> </span><br><span class="line">   <span class="keyword">receive</span></span><br><span class="line">      &#123;sys, Msg&#125; -&gt;</span><br><span class="line">         handle_sys_msg(Msg),</span><br><span class="line">         loop();</span><br><span class="line">      &#123;From, Msg&#125; -&gt;</span><br><span class="line">         Reply = handle_msg(Msg),</span><br><span class="line">         From ! Reply,</span><br><span class="line">         loop()</span><br><span class="line"> <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><h5 id="初始堆大小"><a href="#初始堆大小" class="headerlink" title="初始堆大小"></a>初始堆大小</h5><p>对于具有数十万甚至数百万个进程的Erlang系统，默认的初始堆大小为233个字节是相当保守的。垃圾收集器根据需要增加和收缩堆。在使用相对较少进程的系统中，可以通过使用erl的+h选项或使用spawn_opt/4的min_heap_size选项在每个进程的基础上增加最小堆大小来提高性能。主要有以下两个好处：</p><ul><li>虽然垃圾收集器可以逐步增长堆的大小，但这比生成进程时直接建立更大的堆来的低效。</li><li>垃圾收集器还可以收缩堆，如果它比存储在其上的数据量大得多;设置最小堆大小可以防止这种情况发生。<blockquote><p>注意：由于虚拟机可以使用更多的内存，则内存回收的次数将减少，因此Binary可以被保存的更久才进行内存回收</p></blockquote></li></ul><p>在具有许多进程的系统中，运行时间很短的计算任务可以生成具有更大最小堆大小的新进程。当进程完成后，它将计算结果发送到另一个进程并终止。如果正确计算最小堆大小，则该过程可能根本不需要执行任何垃圾回收。<strong>如果没有进行适当的测量，则不进行此优化。</strong></p><h4 id="进程消息"><a href="#进程消息" class="headerlink" title="进程消息"></a>进程消息</h4><p>除了在同一个Erlang节点上的refc binary，Erlang进程之间的所有消息都会被复制。当消息发送到另一个Erlang节点上的进程时，它首先被编码为Erlang外部格式，然后通过TCP/IP套接字发送。接收的Erlang节点解码消息并将其分发到相应的进程。</p><h5 id="常量池（Constant-Pool）"><a href="#常量池（Constant-Pool）" class="headerlink" title="常量池（Constant Pool）"></a>常量池（Constant Pool）</h5><p>Erlang常量（也称为文字(literals)）保存在常量池中;每个加载的模块都有自己的池。以下函数不会在每次调用时构建元组（仅在下次运行垃圾回收时丢弃它），因为元组位于模块的常量池中：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">days_in_month</span><span class="params">(M)</span> -&gt;</span></span><br><span class="line">    element(M, &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;).</span><br></pre></td></tr></table></figure></p><p>但是如果一个常量被发送到另一个进程（或存储在一个Ets表中），那么它将被复制。原因是运行时系统必须能够跟踪所有对常量的引用，以正确卸载包含常量的代码。（当代码被卸载时，这些常量被复制到引用它们的进程的堆中。）复制常量可能在将来的Erlang/OTP版本中被删除。</p><h5 id="共享丢失"><a href="#共享丢失" class="headerlink" title="共享丢失"></a>共享丢失</h5><p>在以下情况下，共享不会保留：</p><ul><li>当一个共享变量被发送到另一个进程 </li><li>当一个共享变量作为spawn调用中的初始进程参数传递时</li><li>当共享变量被存储在Ets表中时</li></ul><p>这是一个优化。大多数应用不发送带有共享变量的消息。以下示例显示如何创建共享变量：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    kilo_byte(<span class="number">10</span>, [<span class="number">42</span>]).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">(<span class="number">0</span>, Acc)</span> -&gt;</span></span><br><span class="line">    Acc;</span><br><span class="line"><span class="function"><span class="title">kilo_byte</span><span class="params">(N, Acc)</span> -&gt;</span></span><br><span class="line">    kilo_byte(N-<span class="number">1</span>, [Acc|Acc]).</span><br></pre></td></tr></table></figure></p><p>kilo_byte/1创建一个嵌套列表。如果调用list_to_binary/1，则可以将嵌套列表转换为1024字节的Binary：</p><blockquote><p>1&gt; byte_size(list_to_binary(efficiency_guide:kilo_byte())).1024</p></blockquote><p>使用erts_debug:size/1 BIF，可以看出嵌套列表只需要22个字的堆空间：</p><blockquote><p>2&gt; erts_debug:size(efficiency_guide:kilo_byte()).22</p></blockquote><p>使用erts_debug:flat_size/1 BIF，可以忽略共享来计算嵌套列表的大小。当它被发送到另一个进程或存储在Ets表中时，它将成为列表的实际大小：</p><blockquote><p>3&gt; erts_debug:flat_size(efficiency_guide:kilo_byte()).4094</p></blockquote><p>将数据插入到Ets表中，则可以确认共享丢失：</p><blockquote><p>4&gt; T = ets:new(tab, []).</p></blockquote><p>#Ref&lt;0.1662103692.2407923716.214181&gt;5&gt; ets:insert(T, {key,efficiency_guide:kilo_byte()}).true6&gt; erts_debug:size(element(2, hd(ets:lookup(T, key)))).40947&gt; erts_debug:flat_size(element(2, hd(ets:lookup(T, key)))).4094</p><p>当数据被插入到Ets表时，erts_debug:size/1和erts_debug:flat_size/1返回相同的值。共享已经丢失。在未来的Erlang/OTP版本中，可能会实现一种方式（可选）保留共享。</p><h4 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h4><p>SMP模式（在R11B中引入）通过运行多个Erlang调度器线程（通常与内核数相同）来利用多核计算机的性能。每个调度器线程以与非SMP模式中的Erlang调度器相同的方式调度Erlang进程。</p><p>为了通过使用SMP模式获得更多的性能提升，应用程序<strong>大多数时候都必须有多个可运行的Erlang进程</strong>。否则，Erlang虚拟机仍然只能运行一个Erlang进程，但是仍然必须增加锁的开销。尽管Erlang/OTP尝试尽可能减少锁开销，但它永远不会变为零。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章主要介绍进程的堆大小的优化，以及模块内的常量池，如果之前没有看过的，值得一看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;创建一个进程&quot;&gt;&lt;a href=&quot;#创建一个进程&quot; class=&quot;headerlink&quot; title=&quot;创建
      
    
    </summary>
    
      <category term="Erlang Efficiency Guide" scheme="https://lintingbin2009.github.io/categories/Erlang-Efficiency-Guide/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>efficiency-guide:表和数据库</title>
    <link href="https://lintingbin2009.github.io/2017/10/15/efficiency-guide-%E8%A1%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://lintingbin2009.github.io/2017/10/15/efficiency-guide-表和数据库/</id>
    <published>2017-10-15T05:36:22.000Z</published>
    <updated>2018-05-04T15:15:55.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文件主要讲一些简单的Erlang数据库注意要点，干货好像没那么多，可以快速浏览下。</p></blockquote><h4 id="Ets、Dets、Mnesia"><a href="#Ets、Dets、Mnesia" class="headerlink" title="Ets、Dets、Mnesia"></a>Ets、Dets、Mnesia</h4><p>每个Ets的例子都有一个与之对应的Mnesia的例子。一般来说，所有Ets示例也适用于Dets表。</p><h5 id="Select-Match操作"><a href="#Select-Match操作" class="headerlink" title="Select/Match操作"></a>Select/Match操作</h5><p>在Ets和Mnesia表上的Select/Match操作是非常低效的。他们通常需要扫描整个表。需要优化数据的结构来减少对Select/Match操作的使用。但是，如果确实需要Select/Match操作，它仍然比使用tab2list更有效率。函数ets:select/2和mnesia:select/3是优于ets:match/2、ets:match_object/2和mnesia:match_object/3的。在某些情况下，Select/Match操作是不需要扫描整张表的。例如，在ordered_set的表中搜索，或者搜索的Mnesia表的字段是有建立索引的。当创建要在Select/Match操作中使用的记录时，如果希望大多数字段具有值“_”。最简单和最快捷的方法如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#person&#123;age = <span class="number">42</span>, _ = '_'&#125;.</span><br></pre></td></tr></table></figure></p><h5 id="删除一个元素"><a href="#删除一个元素" class="headerlink" title="删除一个元素"></a>删除一个元素</h5><p>如果元素不存在于表中，则删除操作被认为是成功的。因此，在删除之前，所有尝试检查元素是否存在于Ets / Mnesia表中都是不必要的。以下是Ets表的示例：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 直接删就可以了</span></span><br><span class="line">...</span><br><span class="line">ets:delete(Tab, Key),</span><br><span class="line">...</span><br><span class="line"><span class="comment">%% 这样做，效率低而且没有意义</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> ets:lookup(Tab, Key) <span class="keyword">of</span></span><br><span class="line">    [] -&gt;</span><br><span class="line">        ok;</span><br><span class="line">    [_|_] -&gt;</span><br><span class="line">        ets:delete(Tab, Key)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h5 id="非持久数据库存储"><a href="#非持久数据库存储" class="headerlink" title="非持久数据库存储"></a>非持久数据库存储</h5><p>对于非持久数据库存储，优先考虑Ets表，而不是Mnesia local_content表。与Ets写入相比，即使是Mnesia dirty_write操作具有常量的开销。 Mnesia也必须检查表是否被复制或具有索引，这涉及每个dirty_write至少一次Ets查找。因此，Ets总是比Mnesia写的快。</p><h5 id="tab2list"><a href="#tab2list" class="headerlink" title="tab2list"></a>tab2list</h5><p>简单的说tab2list肯定不要用，除非是需要返回所有的Ets数据。如果需要选择一部分的数据可以用Select/Match操作，因为获取Ets的数据是需要拷贝的，tab2list返回所有的数据，需要大量的拷贝，效率非常低。</p><h5 id="ordered-set表"><a href="#ordered-set表" class="headerlink" title="ordered_set表"></a>ordered_set表</h5><p>ordered_set仅保证按Key的顺序处理对象。即使Key不包含在结果中，也可以按Key顺序显示ets:select/2等函数的结果（还有select,match_object,foldl,first,next等函数）。</p><h4 id="优化掉Select-Match操作"><a href="#优化掉Select-Match操作" class="headerlink" title="优化掉Select/Match操作"></a>优化掉Select/Match操作</h4><h5 id="Ets"><a href="#Ets" class="headerlink" title="Ets"></a>Ets</h5><p>由于Ets用Key来Lookup获取数据是可以在常量的时间内完成的（使用哈希和树结构），所以如果要优化掉Select操作，可以再建一个要Select的字段到先前的Ets的Key的新的Ets表就可以了，这样通过两次lookup就可以取得想要的数据了。</p><h5 id="Mnesia"><a href="#Mnesia" class="headerlink" title="Mnesia"></a>Mnesia</h5><p>在Mnesia中只要多建立一些想要Select字段的索引就可以，这样就不用扫描整张表了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文件主要讲一些简单的Erlang数据库注意要点，干货好像没那么多，可以快速浏览下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Ets、Dets、Mnesia&quot;&gt;&lt;a href=&quot;#Ets、Dets、Mnesia&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Erlang Efficiency Guide" scheme="https://lintingbin2009.github.io/categories/Erlang-Efficiency-Guide/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>efficiency-guide:函数</title>
    <link href="https://lintingbin2009.github.io/2017/10/15/efficiency-guide-%E5%87%BD%E6%95%B0/"/>
    <id>https://lintingbin2009.github.io/2017/10/15/efficiency-guide-函数/</id>
    <published>2017-10-15T04:15:32.000Z</published>
    <updated>2018-05-04T15:15:55.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要介绍函数的模式匹配和调用，函数的模式匹配优化还是有必要了解一下的。</p></blockquote><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>在函数的头部以及case和receive子句中的模式匹配都会被编译器优化。但是有一些例外，重新排列匹配子句没有什么好处。Binary的模式匹配就是一个例外。编译器不重新排列与Binary相匹配的子句。最后放置与空Binary匹配的子句通常比放置在第一个的子句执行的更快。下面是另一种例外的例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map1</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>.</span><br></pre></td></tr></table></figure></p><p>问题在于带有变量Int的子句。由于变量可以匹配任何内容，包括原子four、five、six，后续的子句也匹配，所以编译器必须生成次优代码，执行如下：</p><ul><li>首先，将输入值与one、two、three（使用二分查找，即使有很多值也非常有效）来选择要执行的前三个子句中的哪一个（如果有的话）。 </li><li>如果前三个子句中没有一个匹配，则第四个子句匹配变量的话会始终匹配。 </li><li>如果测试is_integer(Int)成功，则执行第四个子句。</li><li>如果测试失败，则将输入值与four、five、six进行比较，并选择适当的子句。 （如果没有匹配成功，则会产生一个function_clause异常。）</li></ul><p>如果想让匹配代码更加高效，则上面的代码可以重写成：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map2</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int.</span><br></pre></td></tr></table></figure></p><p>或者:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(Int)</span> <span class="title">when</span> <span class="title">is_integer</span><span class="params">(Int)</span> -&gt;</span> Int;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(one)</span> -&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(two)</span> -&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(three)</span> -&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(four)</span> -&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(five)</span> -&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="title">atom_map3</span><span class="params">(six)</span> -&gt;</span> <span class="number">6</span>.</span><br></pre></td></tr></table></figure></p><p>还有下面的例子：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(_Map, [], Ys)</span> -&gt;</span></span><br><span class="line">    Ys;</span><br><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(_Map, Xs, [] )</span> -&gt;</span></span><br><span class="line">    Xs;</span><br><span class="line"><span class="function"><span class="title">map_pairs1</span><span class="params">(Map, [X|Xs], [Y|Ys])</span> -&gt;</span></span><br><span class="line">    [Map(X, Y)|map_pairs1(Map, Xs, Ys)].</span><br></pre></td></tr></table></figure></p><p>第一个参数没有问题。它是在所有匹配子句都有的一个变量。有问题的是第二个参数在第二个匹配子句的变量Xs。因为Xs变量可以匹配任何东西，所以编译器不能重新排列匹配子句，而是必须按照上述代码的顺序生成与它们匹配的代码。 如果函数按如下方式重写，编译器就可以自由地重新排列子句：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(_Map, [], Ys)</span> -&gt;</span></span><br><span class="line">    Ys;</span><br><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(_Map, [_|_]=Xs, [] )</span> -&gt;</span></span><br><span class="line">    Xs;</span><br><span class="line"><span class="function"><span class="title">map_pairs2</span><span class="params">(Map, [X|Xs], [Y|Ys])</span> -&gt;</span></span><br><span class="line">    [Map(X, Y)|map_pairs2(Map, Xs, Ys)].</span><br></pre></td></tr></table></figure></p><p>编译器将生成与此类似的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">explicit_map_pairs</span><span class="params">(Map, Xs0, Ys0)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">case</span> Xs0 <span class="keyword">of</span></span><br><span class="line">    [X|Xs] -&gt;</span><br><span class="line">        <span class="keyword">case</span> Ys0 <span class="keyword">of</span></span><br><span class="line">        [Y|Ys] -&gt;</span><br><span class="line">            [Map(X, Y)|explicit_map_pairs(Map, Xs, Ys)];</span><br><span class="line">        [] -&gt;</span><br><span class="line">            Xs0</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">    [] -&gt;</span><br><span class="line">        Ys0</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p><p>这可能是最常见的情况，输入列表不是空或非常短。（另一个优点是Dialyzer可以为Xs变量推导出更准确的类型。）</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>以下是对不同函数调用类型的代价的粗略的估计。它是在Solaris/Sparc上运行测试出来的基准数据：</p><ul><li>调用本地或外部函数（foo()，m:foo()）是最快的。</li><li>调用或者apply调用一个匿名函数（Fun(),apply(Fun, [])）的大概时间花费差不多是调用一个本地函数的三倍。</li><li>Apply调用一个被导出的函数(Mod:Name(),apply(Mod, Name, [])),大概的时间花费差不多是调用匿名函数的两倍，也就是本地函数调用的六倍</li></ul><h5 id="注释和实现细节"><a href="#注释和实现细节" class="headerlink" title="注释和实现细节"></a>注释和实现细节</h5><p>调用和apply一个匿名函数不涉及任何的哈希表查找。一个匿名函数变量包含一个（间接的）指向匿名函数实现的函数的指针。apply/3必须在哈希表中查找执行的函数的代码。因此，总是比直接调用或匿名函数调用来的慢。它不再重要（从性能的角度来看）是否写成：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module:Function(Arg1, Arg2)</span><br></pre></td></tr></table></figure></p><p>或者：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">apply</span><span class="params">(Module, Function, [Arg1,Arg2])</span></span></span><br></pre></td></tr></table></figure></p><p>编译器会将后一种代码重写为前一种的方式。以下代码会稍微慢一点，因为参数的个数在编译时是未知的。<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">apply</span><span class="params">(Module, Function, Arguments)</span></span></span><br></pre></td></tr></table></figure></p><h4 id="递归的内存使用"><a href="#递归的内存使用" class="headerlink" title="递归的内存使用"></a>递归的内存使用</h4><p>当编写递归函数时，最好使用尾递归的方式，以便它们可以在恒定的内存空间中执行：最好这样写：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">list_length</span><span class="params">(List)</span> -&gt;</span></span><br><span class="line">    list_length(List, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([], AccLen)</span> -&gt;</span> </span><br><span class="line">    AccLen; <span class="comment">% Base case</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([_|Tail], AccLen)</span> -&gt;</span></span><br><span class="line">    list_length(Tail, AccLen + <span class="number">1</span>). <span class="comment">% Tail-recursive</span></span><br></pre></td></tr></table></figure></p><p>而不要这样写：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([])</span> -&gt;</span></span><br><span class="line">    <span class="number">0</span>. <span class="comment">% Base case</span></span><br><span class="line"><span class="function"><span class="title">list_length</span><span class="params">([_ | Tail])</span> -&gt;</span></span><br><span class="line">    list_length(Tail) + <span class="number">1</span>. <span class="comment">% Not tail-recursive</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章主要介绍函数的模式匹配和调用，函数的模式匹配优化还是有必要了解一下的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;模式匹配&quot;&gt;&lt;a href=&quot;#模式匹配&quot; class=&quot;headerlink&quot; title=&quot;模式匹配&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Erlang Efficiency Guide" scheme="https://lintingbin2009.github.io/categories/Erlang-Efficiency-Guide/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
  <entry>
    <title>efficiency-guide:List处理</title>
    <link href="https://lintingbin2009.github.io/2017/10/14/efficiency-guide-List%E5%A4%84%E7%90%86/"/>
    <id>https://lintingbin2009.github.io/2017/10/14/efficiency-guide-List处理/</id>
    <published>2017-10-14T09:21:11.000Z</published>
    <updated>2018-05-04T15:15:55.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于列表的处理，大多懂得Erlang的同学都差不多知道列表要怎么用，但是关于列表嵌套和拉伸的优化点还是值得一看的。</p></blockquote><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><p>不能使用如下代码创建列表，因为每次迭代都会创建一个新的列表:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(N)</span> -&gt;</span></span><br><span class="line">    bad_fib(N, <span class="number">0</span>, <span class="number">1</span>, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(<span class="number">0</span>, _Current, _Next, Fibs)</span> -&gt;</span></span><br><span class="line">    Fibs;</span><br><span class="line"><span class="function"><span class="title">bad_fib</span><span class="params">(N, Current, Next, Fibs)</span> -&gt;</span> </span><br><span class="line">    bad_fib(N - <span class="number">1</span>, Next, Current + Next, Fibs ++ [Current]).</span><br></pre></td></tr></table></figure></p><p>应该使用如下的代码创建列表:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(N)</span> -&gt;</span></span><br><span class="line">    tail_recursive_fib(N, <span class="number">0</span>, <span class="number">1</span>, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(<span class="number">0</span>, _Current, _Next, Fibs)</span> -&gt;</span></span><br><span class="line">    lists:reverse(Fibs);</span><br><span class="line"><span class="function"><span class="title">tail_recursive_fib</span><span class="params">(N, Current, Next, Fibs)</span> -&gt;</span> </span><br><span class="line">    tail_recursive_fib(N - <span class="number">1</span>, Next, Current + Next, [Current|Fibs]).</span><br></pre></td></tr></table></figure></p><h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><p>列表推导现在仍然被认为是缓慢的。他们过去常常使用funs来实现，而funs过去很慢。以下的列表推导：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Expr(E) || E &lt;- List]</span><br></pre></td></tr></table></figure></p><p>会被转换成本地的函数实现：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">'lc^<span class="number">0</span>'([E|Tail], Expr) -&gt;</span><br><span class="line">    [Expr(E)|'lc^<span class="number">0</span>'(Tail, Expr)];</span><br><span class="line">'lc^<span class="number">0</span>'([], _Expr) -&gt; [].</span><br></pre></td></tr></table></figure></p><p>如果列表推导的结果不会被使用，则不会构造列表。如下的代码：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[io:put_chars(E) || E &lt;- List],</span><br><span class="line">ok.</span><br><span class="line"><span class="comment">%% 或者</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> Var <span class="keyword">of</span></span><br><span class="line">    ... -&gt;</span><br><span class="line">        [io:put_chars(E) || E &lt;- List];</span><br><span class="line">    ... -&gt;</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="function"><span class="title">some_function</span><span class="params">(...)</span>,</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><p>上述的代码不会构造列表，所以转换成以下的本地函数实现：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'lc^<span class="number">0</span>'([E|Tail], Expr) -&gt;</span><br><span class="line">    Expr(E),</span><br><span class="line">    'lc^<span class="number">0</span>'(Tail, Expr);</span><br><span class="line">'lc^<span class="number">0</span>'([], _Expr) -&gt; [].</span><br></pre></td></tr></table></figure></p><p>编译器知道分配给’_’意味着该值不会被使用。因此，以下示例中的代码也将进行优化：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = [io:put_chars(E) || E &lt;- List],</span><br><span class="line">ok.</span><br></pre></td></tr></table></figure></p><h4 id="嵌套和拉伸列表-Deep-and-Flat-Lists"><a href="#嵌套和拉伸列表-Deep-and-Flat-Lists" class="headerlink" title="嵌套和拉伸列表(Deep and Flat Lists)"></a>嵌套和拉伸列表(Deep and Flat Lists)</h4><p>lists:flatten/1比++操作更加的低效，在下述的情况中，可以很简单的避免使用lists:flatten/1:</p><ul><li>向端口发送数据时。端口了解嵌套列表，所以没有理由在将列表发送到端口之前拉伸列表。</li><li>当调用接受嵌套列表的BIF时，例如list_to_binary/1或iolist_to_binary/1。</li><li>当知道列表只有一级嵌套时，可以使用list:append/1。</li></ul><h5 id="端口例子"><a href="#端口例子" class="headerlink" title="端口例子"></a>端口例子</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, DeepList)</span> %% DO</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, lists:flatten(DeepList))</span> %% DO NOT</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><p>通常会这样向端口发送一个以0为结尾的字符串：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">TerminatedStr = String ++ [<span class="number">0</span>], <span class="comment">% String="foo" =&gt; [$f, $o, $o, 0]</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, TerminatedStr)</span></span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><p>上述效率比较低，应该用下述方式代替：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">TerminatedStr = [String, <span class="number">0</span>], <span class="comment">% String="foo" =&gt; [[$f, $o, $o], 0]</span></span><br><span class="line"><span class="function"><span class="title">port_command</span><span class="params">(Port, TerminatedStr)</span> </span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure></p><h5 id="Append例子"><a href="#Append例子" class="headerlink" title="Append例子"></a>Append例子</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lists:append([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]). <span class="comment">%% DO</span></span><br><span class="line"></span><br><span class="line">lists:flatten([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]). <span class="comment">%% DO NOT</span></span><br></pre></td></tr></table></figure><h4 id="递归列表函数"><a href="#递归列表函数" class="headerlink" title="递归列表函数"></a>递归列表函数</h4><p>普通递归列表函数和尾部递归函数在结束的时候反转列表之间通常没有太大差异。因此，专注于编写好看的代码，并忘记了列表功能的性能。在代码的性能关键部分（仅在那里），用比较高效的写法就行了。</p><blockquote><p>这部分是关于构造列表的列表函数。不构造列表的尾递归函数运行在常量空间中，而相应的普通递归函数使用与列表长度成比例的堆栈空间。</p></blockquote><p>例如，一个将整数列表相加的函数不能写成如下：<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">recursive_sum</span><span class="params">([H|T])</span> -&gt;</span> H+recursive_sum(T);</span><br><span class="line"><span class="function"><span class="title">recursive_sum</span><span class="params">([])</span>    -&gt;</span> <span class="number">0</span>.</span><br></pre></td></tr></table></figure></p><p>应该写成:<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(L)</span> -&gt;</span> sum(L, <span class="number">0</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([H|T], Sum)</span> -&gt;</span> sum(T, Sum + H);</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">([], Sum)</span>    -&gt;</span> Sum.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于列表的处理，大多懂得Erlang的同学都差不多知道列表要怎么用，但是关于列表嵌套和拉伸的优化点还是值得一看的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;列表创建&quot;&gt;&lt;a href=&quot;#列表创建&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Erlang Efficiency Guide" scheme="https://lintingbin2009.github.io/categories/Erlang-Efficiency-Guide/"/>
    
    
      <category term="Erlang" scheme="https://lintingbin2009.github.io/tags/Erlang/"/>
    
  </entry>
  
</feed>
