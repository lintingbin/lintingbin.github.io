{"meta":{"title":"Darcy's Blog","subtitle":"不如烂笔头","description":"欢迎来到我的个人站","author":"lintingbin2009","url":"https://lintingbin2009.github.io"},"pages":[{"title":"Tags","date":"2017-04-29T05:53:57.000Z","updated":"2017-04-29T07:36:27.413Z","comments":false,"path":"tags/index.html","permalink":"https://lintingbin2009.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-04-29T05:54:12.000Z","updated":"2017-04-29T07:32:37.249Z","comments":false,"path":"categories/index.html","permalink":"https://lintingbin2009.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Erlang代码热更新","slug":"Erlang代码热更新","date":"2017-05-04T15:30:18.000Z","updated":"2017-05-05T13:23:01.626Z","comments":true,"path":"2017/05/04/Erlang代码热更新/","link":"","permalink":"https://lintingbin2009.github.io/2017/05/04/Erlang代码热更新/","excerpt":"","text":"通过上一篇的文章Erlang动态代码载入小实验，我们可以了解到Erlang的热更机制，在Erlang里面会维护两个版本的代码。在新版本载入的时候如果有进程在老版本运行的话，运行那些内部调用的函数（只通过函数名调用的）代码将不会被更新，只有那些通过M:F格式调用的内部函数才能热更。举个例子：123456789%% 如果代码在loop上执行的话，有两种情况loop() -&gt; io:format(\"v1 ~n\"), %% 这条语句这种情况不能热更 loop().loop() -&gt; io:format(\"v1 ~n\"), %% 这条语句这种情况可以热更 ?MODULE:loop(). 在Erlang里面有分本地调用（local calls）和外部调用（external calls），本地调用的函数名是不需要被导出的。本地调用的格式是Fun(Args)，外部调用的格式是M:F(Args)。 Erlang运行时会保存一份代码的两个版本，所有本地调用的函数地址都会指向程序运行时最初的那个版本（如上面例子的情况一），而所有外部调用的函数地址都会指向最新的版本（如上面例子的情况二）。所以如果想要让代码能够热更新的话，需要使用外部调用的格式。 在我们项目中一般热更的流程是先：code:soft_purge(ModName)或者code:purge(ModName)然后再code:load_file(ModName)进行热更，针对这一热更流程我之前一直存在两个问题，最近仔细研究下才找到了答案，分别是以下这两个问题： 为什么load_file之前要先soft_purge或者purge一下呢？这个是load_file函数的问题，如果在load_file执行的时候，本身要热更的模块就有一个老的版本的代码存在的话，load_file就会返回一个not_purged的错误代码，导致新版本不能正常的载入。如果load_file执行自动删除最老版本的话，就不需要purge了（像在Erlang Shell里面执行c(ModName)一样）。当然如果一个模块从来都没有热更过的话（在系统里面只有一个版本），直接使用load_file是没有问题的，不过之后就要先purge再load_file了。 soft_purge和purge有什么不同吗？函数的功能上是有所不同的，但是在我们项目的使用中几乎是没有什么不同的。soft_purge和purge的函数的功能区别是如果清理的模块的老的版本中有进程在上面运行的话，purge就会杀掉进程，然后把老的版本给清理掉，soft_purge则会清理失败。热更的时候是先执行purge然后再loadfile，由于进程一般都是在当前的版本上面执行，这时候老的版本上面不会有进程在运行，所以执行purge和soft_purge是一样的，如果真的想要热更的时候把进程杀掉的话应该执行purge/soft_purge-&gt;loadfile-&gt;purge。 以上就是我对Erlang代码热更的总结～","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"Erlang动态代码载入小实验","slug":"Erlang动态代码载入小实验","date":"2017-05-01T15:19:04.000Z","updated":"2017-05-01T15:57:39.008Z","comments":true,"path":"2017/05/01/Erlang动态代码载入小实验/","link":"","permalink":"https://lintingbin2009.github.io/2017/05/01/Erlang动态代码载入小实验/","excerpt":"","text":"下面的内容为《Erlang程序设计（第2版）》8.10节的内容，这个动态代码载入的小实验非常的简单生动，通过这个小实验能够充分理解Erlang代码的载入机制。 动态代码载入是内建于Erlang核心的最惊人特性之一。它的美妙之处在于你无需了解后台的运作就能顺利实现它。它的思路很简单：每当调用 someModule:someFunction(…)时，调用的总是最新版模块里的最新版函数，哪怕当代码在模块里运行时重新编译了该模块也是如此。如果在a循环调用b时重新编译了b，那么下一次a调用b时就会自动调用新版的 b 。如果有许多不同进程正在运行而它们都调用了b，那么当b被重新编译后，所有这些进程就都会调用新版的b 。为了了解它的工作原理，我们将编写两个小模块：a和b。12345%% b.erl-module(b).-export([x/0]).x() -&gt; 1. 1234567891011121314151617%% a.erl-module(a).-compile(export_all).start(Tag) -&gt; spawn(fun() -&gt; loop(Tag) end).loop(Tag) -&gt; sleep(), Val = b:x(), io:format(\"Vsn1 (~p) b:x() = ~p~n\", [Tag, Val]), loop(Tag).sleep() -&gt; receive after 3000 -&gt; true end. 现在可以编译a和b，然后启动两个a进程。 1&gt; c(a).{ok,a}2&gt; c(b).{ok,b}3&gt; a:start(one). Vsn1 (one) b:x() = 1Vsn1 (one) b:x() = 14&gt; a:start(two). Vsn1 (one) b:x() = 1Vsn1 (two) b:x() = 1 这些a进程休眠3秒钟后唤醒并调用b:x()，然后打印出结果。现在进入编辑器，把模块b改成下面这样：1234-module(b).-export([x/0]).x() -&gt; 2. 然后在shell里面重新编译b。这是现在所发生的： 5&gt; c(b).{ok,b}Vsn1 (one) b:x() = 2Vsn1 (two) b:x() = 2 两个原版的a仍然在运行，但现在它们调用了新版的b。所以在模块a里调用b:x()时，实际上是在调用“b的最新版”。我们可以随心所欲地多次修改并重新编译b，而所有调用它的模块无需特别处理就会自动调用新版的b。现在已经重新编译了b，那么如果我们修改并重新编译a会发生什么？来做个试验，把a改成下面这样：12345678910111213141516-module(a).-compile(export_all).start(Tag) -&gt; spawn(fun() -&gt; loop(Tag) end).loop(Tag) -&gt; sleep(), Val = b:x(), io:format(\"Vsn2 (~p) b:x() = ~p~n\", [Tag, Val]), loop(Tag).sleep() -&gt; receive after 3000 -&gt; true end. 现在编译并启动a。 6&gt; c(a).{ok,a}Vsn1 (two) b:x() = 2Vsn1 (one) b:x() = 2Vsn1 (two) b:x() = 27&gt; a:start(three). Vsn1 (two) b:x() = 2Vsn1 (one) b:x() = 2Vsn2 (three) b:x() = 2Vsn1 (two) b:x() = 2 有趣的事情发生了。启动新版的a后，我们看到了新版正在运行。但是，那些运行最初版a的现有进程仍然在正常地运行旧版的a。现在可以试着再次修改b。1234-module(b).-export([x/0]).x() -&gt; 3. 我们将在shell里重新编译b，观察会发生什么。 8&gt; c(b).{ok,b}Vsn1 (one) b:x() = 3Vsn2 (three) b:x() = 3Vsn1 (two) b:x() = 3 现在新旧版本的a都调用了b的最新版。最后，再次修改a（这是第三次修改a了）。12345678910111213141516-module(a).-compile(export_all).start(Tag) -&gt; spawn(fun() -&gt; loop(Tag) end).loop(Tag) -&gt; sleep(), Val = b:x(), io:format(\"Vsn3 (~p) b:x() = ~p~n\", [Tag, Val]), loop(Tag).sleep() -&gt; receive after 3000 -&gt; true end. 现在，当我们重新编译a并启动一个新版的a时，就会看到以下输出： 9&gt; c(a).{ok,a}Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 3Vsn2 (three) b:x() = 310&gt; a:start(four). Vsn2 (three) b:x() = 3Vsn3 (four) b:x() = 3Vsn2 (three) b:x() = 3Vsn3 (four) b:x() = 3Vsn2 (three) b:x() = 3 这段输出里的字符串是由两个最新版本的a（第2版和第3版）生成的，而那些运行第1版a代码的进程已经消失了。在任一时刻，Erlang允许一个模块的两个版本同时运行：当前版和旧版。重新编译某个模块时，任何运行旧版代码的进程都会被终止，当前版成为旧版，新编译的版本则成为当前版。可以把这想象成一个带有两个版本代码的移位寄存器。当添加新代码时，最老的版本就被清除了。一些进程可以运行旧版代码，与此同时，另一些则可以运行新版代码。","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"Erlang中catch和try...catch的区别","slug":"Erlang中catch和try...catch的区别","date":"2017-05-01T08:06:51.000Z","updated":"2017-05-01T08:39:07.716Z","comments":true,"path":"2017/05/01/Erlang中catch和try...catch的区别/","link":"","permalink":"https://lintingbin2009.github.io/2017/05/01/Erlang中catch和try...catch的区别/","excerpt":"","text":"在Erlang的错误处理中，catch并不是try…catch的缩写，try…catch和catch是不同的。下面我将通过一个例子来区别出他们的不同，为以后的使用做一个参考。123456789101112131415161718192021222324%% exception_test.erl 代码文件-module(exception_test).-compile(export_all).generate_exception(1) -&gt; a;generate_exception(2) -&gt; throw(a);generate_exception(3) -&gt; error(a);generate_exception(4) -&gt; exit(a);generate_exception(5) -&gt; &#123;'EXIT', a&#125;.test_use_catch() -&gt; [&#123;I, catch generate_exception(I)&#125; || I &lt;- lists:seq(1, 5)].test_user_try_catch() -&gt; [begin try generate_exception(I) of NormalRes -&gt; &#123;I, normal, NormalRes&#125; catch ErrorType : Error -&gt; &#123;I, exception, ErrorType, Error&#125; end end || I &lt;- lists:seq(1, 5)]. 12345678910111213141516%% 执行exception_test:test_use_catch().函数的返回结果[&#123;1,a&#125;, &#123;2,a&#125;, &#123;3, &#123;'EXIT',&#123;a,[&#123;exception_test,generate_exception,1, [&#123;file,\"exception_test.erl\"&#125;,&#123;line,7&#125;]&#125;, &#123;exception_test,'-test_use_catch/0-lc$^0/1-0-',1, [&#123;file,\"exception_test.erl\"&#125;,&#123;line,12&#125;]&#125;, &#123;exception_test,'-test_use_catch/0-lc$^0/1-0-',1, [&#123;file,\"exception_test.erl\"&#125;,&#123;line,12&#125;]&#125;, &#123;erl_eval,do_apply,6,[&#123;file,\"erl_eval.erl\"&#125;,&#123;line,674&#125;]&#125;, &#123;shell,exprs,7,[&#123;file,\"shell.erl\"&#125;,&#123;line,686&#125;]&#125;, &#123;shell,eval_exprs,7,[&#123;file,\"shell.erl\"&#125;,&#123;line,641&#125;]&#125;, &#123;shell,eval_loop,3,[&#123;file,\"shell.erl\"&#125;,&#123;line,626&#125;]&#125;]&#125;&#125;&#125;, &#123;4,&#123;'EXIT',a&#125;&#125;, &#123;5,&#123;'EXIT',a&#125;&#125;] 123456%% 执行exception_test:test_user_try_catch().函数的返回结果[&#123;1,normal,a&#125;, &#123;2,exception,throw,a&#125;, &#123;3,exception,error,a&#125;, &#123;4,exception,exit,a&#125;, &#123;5,normal,&#123;'EXIT',a&#125;&#125;] 通过上面的列子我们可以看到，如果使用标准的try…catch来处理错误的话，调用者是可以正确的识别出错误，然后对错误进行相应的处理的。 但是如果用的是catch来处理错误的话，情况是不能乐观的，使用catch处理错误，exception(1)和exception(2)返回的结果是一样的，exception(4)和exception(5)返回的结果是一样的。catch在处理throw的时候只是简单的把throw的内容给返回，在处理exit的时候会返回一个tuple是带’EXIT’和exit里面的内容的结果，在处理error的时候会把堆栈给打印出来（这点比较人性化）。 所以大家在使用catch的时候要注意catch的返回值，正常的情况下还是推荐使用try…catch来处理错误，不然很容易就会掉到坑里面的。","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"吴恩达机器学习课程练习实现","slug":"吴恩达机器学习课程练习实现","date":"2017-05-01T04:30:06.000Z","updated":"2017-05-01T04:52:15.583Z","comments":true,"path":"2017/05/01/吴恩达机器学习课程练习实现/","link":"","permalink":"https://lintingbin2009.github.io/2017/05/01/吴恩达机器学习课程练习实现/","excerpt":"","text":"由于当前机器学习大火，让我对机器学习产生浓厚的兴趣，所以我就上网查了下机器学习的入门教程，大多数的人还是比较推荐吴恩达老师的机器学习课程的。所以我就在Coursera上面学习了吴恩达的机器学习课程，现在已经顺利的毕业了。在Coursera上面每学完一小节课程都会有相应的练习，系统会自动对你提交的练习进行打分，要达到指定的分数才能顺利通过，这点Coursera的体验还是做的比较好的，但是由于国内网络的原因，在Coursera上面看视频，如果不使用科学上网的话，有时候是看不了的。我做练习用的是Octave，用Octave提交代码的时候会报错，需要在练习中进行以下的代码替换: lib/submitWithConfiguration.m 文件66行 1responseBody = urlread(submissionUrl, &apos;post&apos;, params); 替换成：1[code, responseBody] = system(sprintf(&apos;echo jsonBody=%s | curl -k -X POST -d @- %s&apos;, body, submissionUrl)); 最后附上我的练习代码，有需要的可以自取，如果对你有帮助的话，记得给我星星哈～代码地址：https://github.com/lintingbin2009/machine-learning-ex","categories":[{"name":"代码","slug":"代码","permalink":"https://lintingbin2009.github.io/categories/代码/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://lintingbin2009.github.io/tags/机器学习/"}]},{"title":"剑指offer——C语言实现","slug":"剑指offer——C语言实现","date":"2017-05-01T04:09:54.000Z","updated":"2017-05-01T04:18:07.601Z","comments":true,"path":"2017/05/01/剑指offer——C语言实现/","link":"","permalink":"https://lintingbin2009.github.io/2017/05/01/剑指offer——C语言实现/","excerpt":"","text":"之前实习的时候为了能够比较顺利的找到一个实习，特意练习了下代码能力，期间看了挺多的算法书籍，然后把剑指offer书本上的那些练习大部分都自己用C语言实现了一遍。这些练习的代码都已经传到了Github上面了，地址是：https://github.com/lintingbin2009/C-language/tree/master/%E5%89%91%E6%8C%87offer有需要的可以自取，如果觉得对你有帮助的话，记得给我个星星哈～","categories":[{"name":"代码","slug":"代码","permalink":"https://lintingbin2009.github.io/categories/代码/"}],"tags":[{"name":"剑指offer","slug":"剑指offer","permalink":"https://lintingbin2009.github.io/tags/剑指offer/"},{"name":"C语言","slug":"C语言","permalink":"https://lintingbin2009.github.io/tags/C语言/"}]},{"title":"Erlang数据类型","slug":"Erlang数据类型","date":"2017-04-30T03:23:06.000Z","updated":"2017-04-30T11:11:25.854Z","comments":true,"path":"2017/04/30/Erlang数据类型/","link":"","permalink":"https://lintingbin2009.github.io/2017/04/30/Erlang数据类型/","excerpt":"","text":"Erlang提供的数据类型，包括以下几种： 基本类型 数字(Number)数字类型又包含整数(integers)和浮点数(floats)类型，其中整数是精确的而且是支持大数的，小数是满足IEEE754规则的64位浮点数。Erlang支持ASCII或者Unicode转换成整数值，同时支持整数不同进制的表示。（‘%’后的内容为注释） 1&gt; $a. %% ASCII表中的a是97972&gt; $哈.217043&gt; $\\n.104&gt; 2#100. %% 用100表示的二进制是445&gt; 4#100.166&gt; 16#100.256 原子(Atom)原子可以理解为一个不可变的常量，必须以小写字母开头，如果要以大写、下划线或者其他的特殊字符开头，必须加上单引号。原子在Erlang里面是存在一张表上面的，原子的个数有上限，大概是在一百万个左右。 test‘Myhome’‘_hero’ 位串和二进制(Bit Strings and Binaries)在大多数情况下，二进制型里的位数都会是8的整数倍，因此对应一个字节串。如果位数不是8的整数倍，就称这段数据为位串（bitstring）。所以当我们说位串时，是在强调数据里的位数不是8的整数倍。位语法是一种表示法，用于从二进制数据里提取或加入单独的位或者位串。当你编写底层代码，以位为单位打包和解包二进制数据时，就会发现位语法是极其有用的。 1&gt; &lt;&gt;. %%二进制型的元素如果大于8位的会自动截断，257截断成1&lt;&gt;2&gt; &lt;&gt;. %%二进制型位数如果不是8的整数倍就会产生位串，这边多了1位1&lt;&gt;3&gt; &lt;&gt;.&lt;&gt; 引用(Reference)可以通过make_ref/0函数来创建一个引用，引用在Erlang程序运行时调用make_ref函数产生的是全局唯一的。比如timer模块在创建一个定时任务的时候通常会返回一个引用，可以通过这个引用来取消定时任务。 函数(Fun)函数在Erlang里面也算是一种数据类型，通过给变量绑定函数，可以通过变量名来执行函数。 1&gt; Fun = fun(X) -&gt; X * X end.#Fun2&gt; Fun(9).81 端口标识符(Port Identifier)端口用于与外界通信，由通过函数open_port/2来创建。消息可以通过端口进行收发，但是这些消息必须遵守所谓“端口协议”(port protocol)的规则。 进程标识符(Pid)当创建一个进程的时候会产生一个进程标识符，可以通过这个进程标识符和进程进行通讯。 1&gt; Process1 = spawn(fun() -&gt; receive X -&gt; io:format(“recv ~p, bye~n”, [X]) end end). %% 创建一个进程等待接收消息2&gt; Process1 ! my_test. %% 给进程发消息recv my_test, byemy_test 复合类型为了方便定义以下的这些复合类型，我把上述的所有基本类型都称为Term。 元组(Tuple)元组类似于C语言里面的结构体(Struct)，是由固定数量的元素组成的复合数据类型，可以定义成如下结构： {Term1, Term2, …, TermN} 可以通过模式匹配或者element/2函数来提取元组里面元素的值，通过setelement/3来设置元组里面元素的值，size可以取元组里面元素的个数。 1&gt; P = {adam,24,{july,29}}.{adam,24,{july,29}}2&gt; element(1,P).adam3&gt; element(3,P).{july,29}4&gt; P2 = setelement(2,P,25).{adam,25,{july,29}}5&gt; size(P).36&gt; {adam, Old, {Month, Day}} = P.{adam,24,{july,29}}7&gt; Old.24 映射组(Map)映射组是一个由多个Key-Vaule结构组成的符合数据类型，可以定义为如下结构： #{Key1=&gt;Value1, Key2=&gt;Value2, …, KeyN=&gt;ValueN}其中Key、Value都是Term 可以通过maps模块提供的一些函数对映射组进行操作 1&gt; M1 = #{name=&gt;adam,age=&gt;24,date=&gt;{july,29}}.#{age =&gt; 24,date =&gt; {july,29},name =&gt; adam}2&gt; maps:get(name,M1).adam3&gt; maps:get(date,M1).{july,29}4&gt; M2 = maps:update(age,25,M1).#{age =&gt; 25,date =&gt; {july,29},name =&gt; adam}5&gt; map_size(M).36&gt; map_size(#{}).0 列表(List)列表类似于其他语言里面的数组，是由可变数量的元素组成的复合数据结构，可以定义成如下结构： [Term1, Term2, …, TermN] 在Erlang里面，列表由一个头和一个尾组成，空列表也是一个列表。所以列表也可以有一个递归的定义 List = [Term| List] | [][] 是一个列表, 因此[c|[]] 是一个列表, 因此[b|[c|[]]] 是一个列表, 因此[a|[b|[c|[]]]] 是一个列表, 或者简写为 [a,b,c] lists模块可以提供大量函数对列表进行操作： 1&gt; L = [3,3,4,2,1,2,34].[3,3,4,2,1,2,34]2&gt; length(L).73&gt; lists:sort(L).[1,2,2,3,3,4,34]4&gt; lists:reverse(L).[34,2,1,2,4,3,3] 其他类型(不算数据类型) 字符串(String)字符串用一对双引号括起来，但不算是Erlang中的数据类型。字符串仅仅是列表的一个缩写，比如：字符串”hello”是列表[$h,$e,$l,$l,$o]的一个缩写。两个相邻的字符串在编译的时候连接成一个字符串，不会造成任何运行时开销。 1&gt; “hello” “ “ “world”.“hello world” 记录(Record)记录其实就是元组的另一种形式。通过使用记录，可以给元组里的各个元素关联一个名称。对记录的处理是在编译的时候完成的，在运行时是不会有记录的，可以把记录理解成是元组的一种语法糖。 12345-module(person).-export([new/2]).-record(person, &#123;name, age&#125;).new(Name, Age) -&gt; #person&#123;name=Name, age=Age&#125;. 1&gt; person:new(ernie, 44).{person,ernie,44} 布尔类型(Boolean)在Erlang中没有Boolean类型。而是用原子true和false来表示布尔值。 1&gt; 2 =&lt; 3.true2&gt; true or false.true 类型转换Erlang提供了一些内置的类型转换函数，可以方便地进行类型转换，下面是一些类型转换的例子： 1&gt; atom_to_list(hello).“hello”2&gt; list_to_atom(“hello”).hello3&gt; binary_to_list(&lt;&lt;”hello”&gt;&gt;).“hello”4&gt; binary_to_list(&lt;&gt;).“hello”5&gt; list_to_binary(“hello”).&lt;&gt;6&gt; float_to_list(7.0).“7.00000000000000000000e+00”7&gt; list_to_float(“7.000e+00”).7.08&gt; integer_to_list(77).“77”9&gt; list_to_integer(“77”).7710&gt; tuple_to_list({a,b,c}).[a,b,c]11&gt; list_to_tuple([a,b,c]).{a,b,c}12&gt; term_to_binary({a,b,c}).&lt;&gt;13&gt; binary_to_term(&lt;&gt;).{a,b,c}14&gt; binary_to_integer(&lt;&lt;”77”&gt;&gt;).7715&gt; integer_to_binary(77).&lt;&lt;”77”&gt;&gt;16&gt; float_to_binary(7.0).&lt;&lt;”7.00000000000000000000e+00”&gt;&gt;17&gt; binary_to_float(&lt;&lt;”7.000e+00&gt;&gt;”).7.0","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"为什么使用Erlang?","slug":"为什么使用Erlang","date":"2017-04-29T14:00:09.000Z","updated":"2017-04-29T15:23:16.882Z","comments":true,"path":"2017/04/29/为什么使用Erlang/","link":"","permalink":"https://lintingbin2009.github.io/2017/04/29/为什么使用Erlang/","excerpt":"","text":"主要特性如果问我觉得Erlang最重要的特性是什么的话，我觉得应该是并发。 并发能够带来的好处是不言而喻的，比如： 性能现在的计算机由于主频的限制，都在往多核的方式发展，有些比较高端的机器甚至有几十个核心。如果编写的程序都是顺序运行的话将会严重浪费多核计算机的计算能力。Erlang本身是面向并发编程的，如果把之前在单核机器上面跑的Erlang程序放到多核机器上面跑的话，性能将会极大的提高。 扩展性如果在一台机器上面运行Erlang程序还不能满足性能的要求的话，可以简单的升级机器的CPU核心个数，甚至可以经过简单的改造把不同的进程分配到不同的机器上面运行，通过水平扩展方式来满足高并发的业务需求。 容错性Erlang内部实现的进程是相互独立的，一个进程的崩溃并不会影响到另外一个进程的运行，同时Erlang内部还OTP框架来保证系统的容错性。 清晰性Erlang世界观和现实的世界是一样的，在大多数的编程语言里面事情都是顺序发生的，但是在Erlang的世界里面所有的事件都是并发的，在编写程序的时候能够比较清晰的把现实世界事件的并行发生的的特性映射到Erlang的并发编程上面。 简介快速介绍下Erlang比较与众不认同的特性： Erlang Shell在编写Erlang程序的过程中会有很多时间花费在Erlang Shell里面，Erlang Shell类似于Linux的Bash，开发者能在Erlang Shell里面运行表达式，通过这种交互方式，开发者能够在Erlang Shell里面调试正在运行的Erlang程序（包括远程的Erlang程序）。 = 操作符在一般的编程语言里面，=表示赋值操作，一个变量能够被多次赋值。但是在Erlang里面变量是不可变的，一旦通过=绑定之后，该变量的值就不能发生改变了，重复绑定会导致异常。 变量和原子所有Erlang的变量都是以大写字母开头的，比如：One、This和My_baby这些都是变量。以小写字母开头的则是符号常量（被称为原子：atom），比如：person、one和hello_world。 进程Erlang的进程是Erlang虚拟机内部自己实现的进程，非常轻量级，刚开始创建的时候每个进程的大小也就2KB左右，1GB的内存就可以创建50万个进程。同时进程间没有共享内存，进程间的通信通过消息转发实现。 总结Erlang的特性决定了它是一门比较另类的语言，相信第一次见到它的人会觉得很吃惊，世界上居然会有这样的一门语言。但正是由于这些看似奇怪的特性，让Erlang能够在当今多核的时代充分的发挥它的能力。","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"使用HEXO在Github上搭建个人博客","slug":"使用HEXO在github上搭建个人博客","date":"2017-04-29T07:40:51.000Z","updated":"2017-04-29T10:20:51.228Z","comments":true,"path":"2017/04/29/使用HEXO在github上搭建个人博客/","link":"","permalink":"https://lintingbin2009.github.io/2017/04/29/使用HEXO在github上搭建个人博客/","excerpt":"","text":"在平时的工作中经常会遇到一些问题，在解决问题的时候如果能够及时记录下来是最好不过的，所以一直想维护一个自己的博客。虽然国内有各种技术博客（比如：CSDN，博客园）之类的第三方博客平台，但是作为一个程序员，不搭建一个自己的博客感觉不够酷。所以我就选择使用HEXO在Github上面搭建自己的个人博客。 下面的安装教程都是在Window x64的环境下进行的 安装步骤 申请Github账户 由于博客是要搭建在Github上面的，所有必须要有一个Github账号来上传代码，这样才能最终显示自己的博客内容。在建立完Github账号后，需要创建一个Repositories，这个Repositories的名字的格式是:your_user_name.github.io这样的。 安装Git软件 有了Github账号后还需要有软件能把本地的代码上传到Github上面，所就安装Git软件，安装Git也非常简单，直接下一步就行了。 安装NodeJs 由于Hexo是基于NodeJs的框架，所以使用Hexo前要先安装NodeJs，安装NodeJs也非常简单，只需要下载软件，点下一步就行了。现在新的版本的NodeJs，会同时安装npm（Node包管理软件），所以安装起来非常简单。 安装Hexo 把上面的软件都安装好了之后就可以开始安装Hexo了，打开window的终端，在终端中输入下面的命令开始安装Hexo 1npm install -g hexo 使用步骤 初始化 创建一个文件夹，如：MyBlog之类，然后进到MyBlog文件夹下执行以下初始化命令 1hexo init 到了这一步之后，Hexo算初始化完成，可以正常的使用了。 生成静态页面 继续在MyBlog目录下执行如下命令，生成静态页面 1hexo generate // 简写 hexo g 本地启动 启动本地服务，进行文章预览调试，命令： 1hexo server // 动态启动，有修改发生会自动检测，简写 hexo s 然后在浏览器输入 http://localhost:4000 就可以看到博客的页面，当然也在服务器启动的时候加上-p来指定自己想要的端口 部署步骤 安装 hexo-deployer-git 1npm install hexo-deployer-git --save 配置部署环境 在MyBlog的目录下会有一个_config.yml的文件，该文件为Hexo项目的配置文件，打开该文件然后把deploy部分改成下列格式 1234deploy: type: git repository: https://github.com/lintingbin2009/lintingbin2009.github.io.git // lintingbin2009替换成你自己的名字 branch: master 开始部署 1hexo deploy 部署完成之后就可以使用your_username.github.io来访问你的个人博客了, 之后的部署命令应该是 123hexo cleanhexo generatehexo deploy 总结总的来说用Hexo在Github上搭建个人博客还是比较简单的，当然这边只是涉及到最简单的搭建，还没有涉及到主题的更换、评论系统，统计系统。更多关于Hexo的使用文档可以浏览Hexo的中文官网，里面有详细的使用教程和很多可选的精美主题。","categories":[{"name":"教程","slug":"教程","permalink":"https://lintingbin2009.github.io/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://lintingbin2009.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://lintingbin2009.github.io/tags/Github/"}]}]}