{"meta":{"title":"Darcy's Blog","subtitle":"不如烂笔头","description":"欢迎来到我的个人站","author":"lintingbin2009","url":"https://lintingbin2009.github.io"},"pages":[{"title":"categories","date":"2017-04-29T05:54:12.000Z","updated":"2017-04-29T07:32:37.249Z","comments":false,"path":"categories/index.html","permalink":"https://lintingbin2009.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-04-29T05:53:57.000Z","updated":"2017-04-29T07:36:27.413Z","comments":false,"path":"tags/index.html","permalink":"https://lintingbin2009.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"为什么使用Erlang?","slug":"为什么使用Erlang","date":"2017-04-29T14:00:09.000Z","updated":"2017-04-29T15:23:16.882Z","comments":true,"path":"2017/04/29/为什么使用Erlang/","link":"","permalink":"https://lintingbin2009.github.io/2017/04/29/为什么使用Erlang/","excerpt":"","text":"主要特性如果问我觉得Erlang最重要的特性是什么的话，我觉得应该是并发。 并发能够带来的好处是不言而喻的，比如： 性能现在的计算机由于主频的限制，都在往多核的方式发展，有些比较高端的机器甚至有几十个核心。如果编写的程序都是顺序运行的话将会严重浪费多核计算机的计算能力。Erlang本身是面向并发编程的，如果把之前在单核机器上面跑的Erlang程序放到多核机器上面跑的话，性能将会极大的提高。 扩展性如果在一台机器上面运行Erlang程序还不能满足性能的要求的话，可以简单的升级机器的CPU核心个数，甚至可以经过简单的改造把不同的进程分配到不同的机器上面运行，通过水平扩展方式来满足高并发的业务需求。 容错性Erlang内部实现的进程是相互独立的，一个进程的崩溃并不会影响到另外一个进程的运行，同时Erlang内部还OTP框架来保证系统的容错性。 清晰性Erlang世界观和现实的世界是一样的，在大多数的编程语言里面事情都是顺序发生的，但是在Erlang的世界里面所有的事件都是并发的，在编写程序的时候能够比较清晰的把现实世界事件的并行发生的的特性映射到Erlang的并发编程上面。 简介快速介绍下Erlang比较与众不认同的特性： Erlang Shell在编写Erlang程序的过程中会有很多时间花费在Erlang Shell里面，Erlang Shell类似于Linux的Bash，开发者能在Erlang Shell里面运行表达式，通过这种交互方式，开发者能够在Erlang Shell里面调试正在运行的Erlang程序（包括远程的Erlang程序）。 = 操作符在一般的编程语言里面，=表示赋值操作，一个变量能够被多次赋值。但是在Erlang里面变量是不可变的，一旦通过=绑定之后，该变量的值就不能发生改变了，重复绑定会导致异常。 变量和原子所有Erlang的变量都是以大写字母开头的，比如：One、This和My_baby这些都是变量。以小写字母开头的则是符号常量（被称为原子：atom），比如：person、one和hello_world。 进程Erlang的进程是Erlang虚拟机内部自己实现的进程，非常轻量级，刚开始创建的时候每个进程的大小也就2KB左右，1GB的内存就可以创建50万个进程。同时进程间没有共享内存，进程间的通信通过消息转发实现。 总结Erlang的特性决定了它是一门比较另类的语言，相信第一次见到它的人会觉得很吃惊，世界上居然会有这样的一门语言。但正是由于这些看似奇怪的特性，让Erlang能够在当今多核的时代充分的发挥它的能力。","categories":[{"name":"Erlang入门教程","slug":"Erlang入门教程","permalink":"https://lintingbin2009.github.io/categories/Erlang入门教程/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"https://lintingbin2009.github.io/tags/Erlang/"}]},{"title":"使用HEXO在Github上搭建个人博客","slug":"使用HEXO在github上搭建个人博客","date":"2017-04-29T07:40:51.000Z","updated":"2017-04-29T10:20:51.228Z","comments":true,"path":"2017/04/29/使用HEXO在github上搭建个人博客/","link":"","permalink":"https://lintingbin2009.github.io/2017/04/29/使用HEXO在github上搭建个人博客/","excerpt":"","text":"在平时的工作中经常会遇到一些问题，在解决问题的时候如果能够及时记录下来是最好不过的，所以一直想维护一个自己的博客。虽然国内有各种技术博客（比如：CSDN，博客园）之类的第三方博客平台，但是作为一个程序员，不搭建一个自己的博客感觉不够酷。所以我就选择使用HEXO在Github上面搭建自己的个人博客。 下面的安装教程都是在Window x64的环境下进行的 安装步骤 申请Github账户 由于博客是要搭建在Github上面的，所有必须要有一个Github账号来上传代码，这样才能最终显示自己的博客内容。在建立完Github账号后，需要创建一个Repositories，这个Repositories的名字的格式是:your_user_name.github.io这样的。 安装Git软件 有了Github账号后还需要有软件能把本地的代码上传到Github上面，所就安装Git软件，安装Git也非常简单，直接下一步就行了。 安装NodeJs 由于Hexo是基于NodeJs的框架，所以使用Hexo前要先安装NodeJs，安装NodeJs也非常简单，只需要下载软件，点下一步就行了。现在新的版本的NodeJs，会同时安装npm（Node包管理软件），所以安装起来非常简单。 安装Hexo 把上面的软件都安装好了之后就可以开始安装Hexo了，打开window的终端，在终端中输入下面的命令开始安装Hexo 1npm install -g hexo 使用步骤 初始化 创建一个文件夹，如：MyBlog之类，然后进到MyBlog文件夹下执行以下初始化命令 1hexo init 到了这一步之后，Hexo算初始化完成，可以正常的使用了。 生成静态页面 继续在MyBlog目录下执行如下命令，生成静态页面 1hexo generate // 简写 hexo g 本地启动 启动本地服务，进行文章预览调试，命令： 1hexo server // 动态启动，有修改发生会自动检测，简写 hexo s 然后在浏览器输入 http://localhost:4000 就可以看到博客的页面，当然也在服务器启动的时候加上-p来指定自己想要的端口 部署步骤 安装 hexo-deployer-git 1npm install hexo-deployer-git --save 配置部署环境 在MyBlog的目录下会有一个_config.yml的文件，该文件为Hexo项目的配置文件，打开该文件然后把deploy部分改成下列格式 1234deploy: type: git repository: https://github.com/lintingbin2009/lintingbin2009.github.io.git // lintingbin2009替换成你自己的名字 branch: master 开始部署 1hexo deploy 部署完成之后就可以使用your_username.github.io来访问你的个人博客了, 之后的部署命令应该是 123hexo cleanhexo generatehexo deploy 总结总的来说用Hexo在Github上搭建个人博客还是比较简单的，当然这边只是涉及到最简单的搭建，还没有涉及到主题的更换、评论系统，统计系统。更多关于Hexo的使用文档可以浏览Hexo的中文官网，里面有详细的使用教程和很多可选的精美主题。","categories":[{"name":"教程","slug":"教程","permalink":"https://lintingbin2009.github.io/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://lintingbin2009.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://lintingbin2009.github.io/tags/Github/"}]}]}